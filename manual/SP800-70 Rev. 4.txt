Abstract
A security configuration checklist is a document that contains instructions or procedures for configuring
an information technology (IT) product to an operational environment, for verifying that the product has
been configured properly, and/or for identifying unauthorized changes to the product. Using these
checklists can minimize the attack surface, reduce vulnerabilities, lessen the impact of successful attacks,
and identify changes that might otherwise go undetected. To facilitate development of checklists and to
make checklists more organized and usable, NIST established the National Checklist Program (NCP).
This publication explains how to use the NCP to find and retrieve checklists, and it also describes the
policies, procedures, and general requirements for participation in the NCP. 
Executive Summary
A security configuration checklist (also called a lockdown, hardening guide, or benchmark) is a series of
instructions or procedures for configuring an IT product to a particular operational environment, for
verifying that the product has been configured properly, and/or for identifying unauthorized changes to
the product. The IT product may be commercial, open source, government-off-the-shelf (GOTS), etc.
Checklists can comprise templates or automated scripts, patch information, Extensible Markup Language
(XML) files, and other procedures. Checklists are intended to be tailored by each organization to meet its
particular security and operational requirements. Typically, checklists are created by IT vendors for their
own products; however, checklists are also created by other organizations, such as academia, consortia,
and government agencies. The use of well-written, standardized checklists can markedly reduce the
vulnerability exposure of IT products. Checklists can be particularly helpful to small organizations and to
individuals with limited resources for securing their systems.
NIST maintains the National Checklist Repository, which is a publicly available resource that contains
information on a variety of security configuration checklists for specific IT products or categories of IT
products. The repository, which is located at https://checklists.nist.gov/, contains information that
describes each checklist. The repository also hosts copies of some checklists, primarily those developed
by the federal government, and has links to the location of other checklists. Users can browse and search
the repository to locate a particular checklist using a variety of criteria. Having a centralized checklist
repository makes it easier for organizations to find the current, authoritative versions of security
checklists and to determine which ones best meet their needs.
This document is intended for users and developers of security configuration checklists. For checklist
users, this document makes recommendations for how they should select checklists from the NIST
National Checklist Repository, evaluate and test checklists, and apply them to IT products. For checklist
developers, this document sets forth the policies, procedures, and general requirements for participation in
the NIST National Checklist Program (NCP).
Major recommendations made in this document for checklist users and developers include the following:
Organizations should apply checklists to operating systems and applications to reduce the number
of vulnerabilities that attackers can attempt to exploit and to lessen the impact of successful attacks.
There is no checklist that can make a system or product 100 percent secure, and using checklists does not
eliminate the need for ongoing security maintenance, such as patch installation. However, using checklists
that emphasize both hardening of systems against software flaws (e.g., by applying patches and
eliminating unnecessary functionality) and configuring systems securely will typically reduce the number
of ways in which the systems can be attacked, resulting in greater levels of product security and
protection from future threats. Checklists can also be used to verify the configuration of some types of
security controls for system assessments, such as confirming compliance with certain Federal Information
Security Modernization Act (FISMA) requirements or other sets of security requirements.
Federal agencies are required to use appropriate security configuration checklists from the NCP when
available. In January 2017, Part 39 of the Federal Acquisition Regulation (FAR) was updated. Paragraph
(c) of section 39.101 states, "In acquiring information technology, agencies shall include the appropriate
information technology security policies and requirements, including use of common security
configurations available from the National Institute of Standards and Technology's website at
https://checklists.nist.gov. Agency contracting officers should consult with the requiring official to ensure
the appropriate standards are incorporated." [1] Also, FISMA requires each Federal agency to determine
minimally acceptable system configuration requirements and to ensure compliance with them [2].
Accordingly, Federal agencies, as well as vendors of products for the Federal government, should acquire
or implement and share such checklists using the NIST repository. NIST encourages checklist developers
to assert mappings to the security controls delineated in NIST Special Publication (SP) 800-53 to
facilitate FISMA compliance checking for Federal agencies.
Organizations should consider the availability of security configuration checklists during their IT product
selection processes.
When selecting checklists, checklist users should carefully consider each checklist's degree of
automation, source, use of standards, and other relevant characteristics.
NIST recognizes that some checklists are more automated and standards-based than others. For example,
non-automated checklists provide prose-based descriptions of how a person can manually alter a
product's configuration. Automated checklists are machine-readable. Automated checklists that fully
adhere to the Security Content Automation Protocol (SCAP), which are also known as SCAP content,
have all security settings documented in standardized SCAP formats; have undergone syntactic testing
using the NIST SCAP Content Validation Tool (SCAPVal) for compliance to the SCAP-related
specifications; and include mappings between low-level security settings and high-level security
requirements.
When multiple checklists are available for a particular product, organizations should take into
consideration the degree of automation and use of standards of each checklist. Generally, SCAP
checklists can be used more consistently and efficiently than others. There may be other significant
differences among checklists; for example, one checklist may include software bundled with an operating
system (e.g., web browser and email client) while another checklist addresses that operating system only.
Another example is the assumptions on which the checklists are based (e.g., operational environment). A
checklist user should identify such differences and determine which checklist(s) seem appropriate and
merit further analysis.
Checklist source is particularly important for users from Federal civilian agencies, who should first search
for government-authorized or mandated checklists (e.g., mandated by Part 39 of the FAR [1]). In general,
these users should search for NIST-produced checklists, which are tailored for civilian agency use. If no
NIST-produced checklist is available, then agency-produced checklists from the Defense Information
Systems Agency (DISA) or the National Security Agency (NSA) should be used if available. If formal
government-authorized checklists do not exist, organizations are encouraged to use vendor-produced
checklists. If vendor-produced checklists are not available, other checklists that are posted on the NCP
website may be used.
Checklist users should customize and test checklists before applying them to production systems.
A checklist that is not mandatory for an organization to adopt should be considered a starting point for an
organization to customize. Although the settings are based on sound knowledge of security threats and
vulnerabilities, they cannot take into account organization-specific security and operational requirements,
existing security controls, and other factors that may necessitate changes. Organizations should carefully
evaluate the checklist settings and give them considerable weight, then make any changes necessary to
adapt the settings to the organization's environment, requirements, policies, and security objectives. This 
is particularly true for checklists intended for an environment with significantly different security needs.
All deviations from the checklist settings should be documented for future reference, and include the
reason behind each deviation and the impact of deviating from the setting.
Before applying a checklist that will be used to alter product settings, users should first test it on non-critical systems, preferably in a controlled non-operational environment. Each checklist in the NIST
repository has been tested by its developer, but there are often significant differences between a
developer's testing environment and an organization's operational environment, and some of these
differences may affect checklist deployment. In some cases, a security control modification can have a
negative impact on a product's functionality and usability, or on other products or security controls.
Consequently, it is important to perform testing to determine the impact on system security, functionality,
and usability; to document the results of testing; and to take appropriate steps to address any significant
issues.
Checklist users should take their operational environments into account when selecting checklists,
and checklist developers should target their checklists to one or more operational environments.
Checklists are significantly more useful when they can run in common operational environments. The
NCP has identified several broad and specialized operational environments, such as Standalone and
Managed, and at least one of the environments should be common to most of the audiences. Thoroughly
identifying and describing these environments will make it easier for users to select the security checklists
that are most appropriate for their particular operating environments, and will allow developers to better
target their checklists to the general security characteristics associated with their operating environments.
NIST strongly encourages IT product vendors to develop security configuration checklists for their
products and contribute them to the NIST National Checklist Repository.
NIST encourages IT product vendors to develop security configuration checklists for their products, since
the vendors have the most expertise on the possible security configuration settings and the best
understanding of how the settings relate to and affect each other.
Vendors that create security configuration checklists should submit them for inclusion in the National
Checklist Repository through the NCP. The NCP provides a process and guidance for developing
checklists in a consistent fashion. For checklist developers, steps include initial development of the
checklist, checklist testing, documenting the checklist according to the guidelines of the NCP, and
submitting a checklist package to NIST. NIST screens the checklist according to program requirements
and then releases the checklist for public review, which lasts 30 days. After the public review period and
subsequent resolution of issues, the checklist is listed on the NIST checklist repository with its
information. Checklist maintenance may potentially be performed by the vendor, resulting in the release
of updated checklists. NIST retires or archives checklists as they become outdated or incorrect.
1. Introduction
1.1 Purpose and Scope
This document describes the use, benefits, and management of checklists, and explains how to use the
NIST National Checklist Program (NCP) to find and retrieve checklists. The document also describes the
policies, procedures, and general requirements for participation in the NCP.
1.2 Document Organization
Section 2 contains an overview of checklists and describes the advantages of the NIST NCP and how it
works.
Section 3 provides additional details on pre-defined checklist operational environments that are used in
the NCP to help developers create checklists that are consistent with security practices. The material
presented in Section 3 can also help checklist users select the checklists that best match their own
operational environments.
Section 4 contains information for potential checklist users. It describes how to use the NCP to find and
retrieve checklists that best match the identified needs. It also contains guidance on how to implement
checklists, including how to analyze the specific operating environment and then tailor checklists as
applicable.
Section 5 provides guidance for current and prospective checklist developers. This guidance contains
information on the procedures for preparing and submitting a checklist to NIST for inclusion in the
checklist repository.
Appendix A lists references for this document.
Appendix B contains the programmatic and legal requirements that must be satisfied to participate in the
NCP.
Appendix C contains the NCP participation and logo usage agreement form.
Appendix D details additional requirements that United States Government Configuration Baseline
(USGCB) checklists must meet.
Appendix E contains a list of acronyms used in this document.
Appendix F presents a glossary of the terms used in this document.
Appendix G provides the change log for the most recent release of the document.
2. The NIST National Checklist Program
There are many threats to users' computers, and new vulnerabilities in IT products (e.g., operating
systems and applications) are discovered daily. Patches may not be immediately available for new
vulnerabilities, causing the need to rapidly deploy temporary mitigation through reconfiguration until
patches are available. Also, because IT products often are intended for a wide variety of audiences,
restrictive security settings are usually not enabled by default, which means that many IT products are
immediately vulnerable in their default configuration. It is a complicated, arduous, and time-consuming
task even for experienced system administrators to know what a reasonable set of security settings is for
many different IT products.
Although the solutions to IT security are complex, one simple yet effective tool is the security
configuration checklist. To facilitate development of security configuration checklists and to meet the
requirements of the Cyber Security Research and Development Act of 2002 (Public Law 107-305)
(CSRDA) [3], NIST developed the National Checklist Program (NCP) for IT Products. This section
contains an overview of the NCP. It begins by describing the contents of checklists and giving examples
of the types of IT products for which checklists are often created. It next explains the benefits of using
security configuration checklists, such as improving the base level of security for an organization. It also
explains the goals and benefits of the NCP, which include increasing the quality, usability, and
availability of checklists.
2.1 Security Configuration Checklists
A security configuration checklist (also referred to as a lockdown guide, hardening guide, security guide,
security technical implementation guide [STIG], or benchmark) is essentially a document that contains
instructions or procedures for configuring an IT product to an operational environment, for verifying that
the product has been configured properly, and/or for identifying unauthorized configuration changes to
the product. The IT product may be commercial, open source, government-off-the-shelf (GOTS), etc.
Using well-written, standardized configuration checklists can reduce the vulnerability exposure of IT
products and be particularly helpful to small organizations and individuals in securing their systems.
Checklists can be developed not only by IT vendors, but also by other organizations with technical
competence in IT product security. A security configuration checklist might include any of the following:
• Configuration files that automatically set or verify various security-related settings (e.g., executables,
security templates that modify settings, Security Content Automation Protocol (SCAP) XML
(Extensible Markup Language) files, and scripts).
• Documentation (e.g., text file) that guides the checklist user to manually configure an IT product
• Documents that explain the recommended methods to securely install and configure a device
• Policy and programmatic documents that set forth guidelines for such things as auditing,
authentication mechanisms (e.g., passwords), and perimeter security
Not all instructions in a security configuration checklist need to strictly address security settings.
Checklists can also include specialized security functions, such as looking for artifacts of an attack on a
host, or administrative practices such as enabling energy saving features.
Typically, a system administrator or end user follows the instructions in the checklist to configure a
product or system to the level of security implemented in the checklist, or to verify that a product or
system is already configured properly. The system administrator may need to modify the checklist to
incorporate the local security policy.
Examples of the types of devices and software for which security checklists are intended are as follows:
• General-purpose operating systems and mobile operating systems
• Common applications such as email clients, web browsers, word processors, personal firewalls, and
antivirus software
• Infrastructure devices such as routers, switches, firewalls, virtual private network (VPN) gateways,
intrusion detection systems (IDS), wireless access points, and telecommunication systems
• Application servers such as Domain Name System (DNS), Dynamic Host Configuration Protocol
(DHCP), web, Simple Mail Transfer Protocol (SMTP), and database servers
• Other network devices such as scanners, printers, and copiers.
2.2 Benefits of Using Security Checklists
Security checklists, when developed correctly, can help users configure IT products so that they have
more protection than the defaults provide. Applying checklists to operating systems and applications can
reduce the number of vulnerabilities that attackers can attempt to exploit and lessen the impact of
successful attacks. Using checklists improves the consistency and predictability of system security,
particularly in conjunction with user training and awareness activities and other supporting security
controls. Additional benefits associated with using checklists include the following:
• Provides a base level of security to protect against common and dangerous local and remote threats
(e.g., malware, denial-of-service attacks, unauthorized access, and inappropriate usage)
• Verifies the configuration of certain technical security controls for system assessments, such as
confirming compliance with certain Federal Information Security Modernization Act (FISMA)
requirements or other sets of requirements, and understanding the exposure caused by
misconfigurations
• Significantly reduces the time required to research and develop appropriate security configurations
for installed IT products
• Allows smaller organizations to leverage outside resources to implement recommended practice
security configurations
• Reduces the likelihood of public loss of confidence or embarrassment resulting from a compromise of
systems (for example, a major breach of personally identifiable information (PII)).
Although using security checklists for security compliance purposes can significantly improve overall
levels of security in organizations, using a checklist cannot make a system or a product 100 percent
secure. However, using checklists that emphasize hardening of systems against the hidden software flaws
will typically result in greater levels of product security and protection from future threats (e.g., zero-day 
vulnerabilities). IT vendors that configure their products using checklists that adhere to the FISMA-associated security control requirements will provide more consistency in configuration settings within
the federal agencies. This configuration will also provide a much more cost-effective method for
establishing and verifying the minimum configuration settings, even if the agencies must modify the
checklists to fine-tune the configuration settings for their specific applications and operational
environments.
2.3 Overview of NIST National Checklist Program
Many organizations have created checklists; however, these checklists vary widely in terms of quality and
usability, and they may become outdated as software updates and upgrades are released. Without a central
checklist repository, finding security checklists can be difficult. In addition, checklists may differ
significantly from one another in terms of the purpose of the checklist or the level of security provided.
Also, it may be difficult to determine if the checklist is current or how the checklist should be
implemented.
To facilitate development of security checklists for IT products and to make checklists more organized
and usable, NIST established the NCP. The goals of the NCP are to—
• Facilitate development and sharing of checklists by providing a formal framework for vendors and
other checklist developers to submit checklists to NIST
• Provide guidance to developers to help them create standardized, high-quality checklists that conform
to common operational environments
• Help developers and users by providing guidelines for making checklists better documented and more
usable
• Encourage software vendors and other parties to develop checklists
• Provide a managed process for the review, update, and maintenance of checklists
• Provide an easy-to-use repository of checklist information
• Provide checklist content in a standardized format
• Encourage the use of automation technologies for applying checklists.
Federal agencies are required to use appropriate security configuration checklists from the NCP when
available. In January 2017, Part 39 of the Federal Acquisition Regulation (FAR) was updated. Paragraph
(c) of section 39.101 states, "In acquiring information technology, agencies shall include the appropriate
information technology security policies and requirements, including use of common security
configurations available from the National Institute of Standards and Technology's website at
https://checklists.nist.gov. Agency contracting officers should consult with the requiring official to ensure
the appropriate standards are incorporated." [1]
2.4 Types of Checklists Listed by NCP
The NCP deals with checklists that are tied to specific IT products, such as a checklist for a specific brand
and model of a router. Some checklists may guide a user to other checklists. For example, a checklist for a
database product may reference the checklist for the operating system on which the database product runs.
The NCP includes two major groups of checklists:
• Automated. An automated checklist is one that is used through one or more tools that automatically
alter or verify settings based on the contents of the checklist. Many checklists are written in
Extensible Markup Language (XML), and there are special tools that can use the contents of the XML
files to check and alter system settings. For example, the Security Content Automation Protocol
(SCAP) is commonly used to express checklist content in a standardized way that can be processed
by tools that support SCAP.
• Non-Automated. As the name implies, a non-automated checklist is one that is designed to be used
manually, such as prose instructions that describe the steps an administrator should take to secure a
system or to verify its security settings.
Security configuration checklists in the NCP can help organizations meet FISMA requirements. FISMA
requires each agency to determine minimally acceptable system configuration requirements and to ensure
compliance with them. Checklists can also map specific technical control settings to the corresponding
NIST Special Publication (SP) 800-53 controls, which can make the verification of compliance more
consistent and efficient. Accordingly, federal agencies, as well as vendors of products for the federal
government, are encouraged to acquire or develop and to share such checklists using the NIST repository.
The development and sharing of checklists can reduce what would otherwise be a "reinvention of the
wheel" for IT products that are widely used in the federal government, such as common operating
systems, servers, and client applications.
The NIST checklist repository (located at https://checklists.nist.gov/) contains information on automated
and non-automated checklists that have been developed and screened to meet the requirements of the
NCP. The repository also hosts copies of some checklists, primarily those developed by the federal
government, and has pointers to the other checklists' locations. Users can browse checklist descriptions to
locate and retrieve a particular checklist using a variety of different fields. A mailing list for the checklist
program is available at https://nvd.nist.gov/general/email-list. 
3. Operational Environments for Checklists
To ensure that as many users as possible receive value from checklists, it is recommended that checklist
authors create checklists for a broad operational environment unless there is a compelling reason to focus
on a specialized operational environment. The NCP identifies several broad and specialized operational
environments, at least one of which should be common to most audiences. Identifying and describing
these environments allows developers to better target their checklists to the general security requirements
associated with the environments, and allows end users to more easily select the checklists that are most
appropriate for their environments.
This section describes the operational environments defined for the NCP, and the general threat
description and fundamental technical security practice for each environment. The two broad operational
environments are referred to as Standalone (or Small Office/Home Office [SOHO]) and Managed (or
Enterprise). Three typical Custom environments, which could be subsets of the broader environments, are
Specialized Security-Limited Functionality (SSLF), Legacy, and United States Government.
Users of IT products may find it useful to consult this section of the document when initially identifying
their own security requirements and needs (outlined in detail in Section 4). Developers may find this
section useful when building checklists because tailoring checklist development to these environments
and their policies will enable developers to create security compliance checklists for diverse products but
still adhere to the general uniform technical security practices and settings associated with the
environments. This is discussed in detail in Section 5. Before submitting a checklist to NIST, developers
should ensure they have the most recent version of this document because updates to the criteria for
operational environments may occur periodically. The most recent version is available as a separate file at
https://checklists.nist.gov/.
3.1 Standalone Environment
The Standalone environment describes individually managed devices (e.g., desktops, laptops,
smartphones, tablets), as opposed to Managed environments (see Section 3.2), which are based on
centrally managed devices (i.e., many devices managed by a single organization). Standalone
environments are typically the least secured. The individuals who maintain Standalone systems are not
assumed to use the same enterprise security controls and possess the same general security expertise as
trained administrators. Less secure environments often occur when functionality is the main focus and not
enough emphasis is placed on balancing device security and functionality. Accordingly, Standalone
checklists should be relatively simple to understand and implement by home users or novice system
administrators.
3.2 Managed Environment
The Managed environment, also referred to as Enterprise, comprises centrally managed IT products,
everything ranging from servers and printers to desktops, laptops, smartphones, and tablets. Managed
checklists are intended for advanced end users and system administrators. The managed nature of typical
Managed environments gives administrators centralized control over various settings on devices.
Authentication, account, and policy management can also be administered centrally to maintain a
consistent security posture across an organization.
The Managed environment is more restrictive and provides less functionality than the Standalone
environment. However, because of the supported and controlled nature of the Managed environment, it
is typically easier to use more functionally restrictive settings in Managed environments than in
Standalone environments. Managed environments also tend to implement several layers of defense (e.g.,
firewalls, antivirus servers, IDSs, patch management systems, and email filtering), which provides greater
protection for systems.
3.3 Specialized Security-Limited Functionality Custom Environment
A Custom environment contains systems in which the functionality and degree of security do not fit the
other types of environments. Specialized Security-Limited Functionality (SSLF) is a typical Custom
environment that is highly restrictive and secure; it is usually reserved for systems that have the highest
threats and associated impacts. Typical examples of such systems are outward-facing web, email, and
DNS servers, other publicly accessed systems, and firewalls. It also encompasses computers that contain
confidential information (e.g., central repository of personnel records, medical records, and financial
information) or that perform vital organizational functions (e.g., accounting, payroll processing, and air
traffic control). These systems might be targeted by third parties for exploitation, but also might be
targeted by trusted parties inside the organization. Because systems in an SSLF environment are at high
risk of attack or data exposure, security takes precedence over functionality. The systems' data content or
mission purpose is of such value that aggressive tradeoffs in favor of security outweigh the potential
negative consequences to other useful system attributes such as legacy applications or interoperability
with other systems.
An SSLF environment could be a subset of another environment. For example, three desktops in a
Managed environment that hold the organization's confidential employee data could be thought of as an
SSLF environment within a Managed environment. In addition, a laptop used by a mobile worker (e.g.,
organization management) might be an SSLF environment in a Standalone environment. An SSLF
environment might also be a self-contained environment outside any other environment, such as a
government security installation processing sensitive data.
SSLF checklists are intended for experienced security specialists and seasoned system administrators who
understand the impact of implementing strict technical security practices. If home users and other users
who do not have security expertise attempt to apply SSLF checklists to their systems, they typically
experience unwanted limitations on system functionality and cause possibly irreparable system damage.
3.4 Legacy Environments
A Legacy environment is another example of a Custom environment. A Legacy environment contains
older systems or applications that may need to be secured to meet today's threats, but they often use older,
less secure communication mechanisms and need to be able to communicate with other systems. Non-legacy systems operating in a Legacy environment may need less restrictive security settings so that they
can communicate with legacy systems and applications. Legacy environments are often subsets of other
environments.
3.5 United States Government Environment
A United States Government environment is another example of a Custom environment. This
environment contains federal government systems. These systems need to be secured according to
prescribed configurations as mandated by policy. For example, the Federal Desktop Core Configuration
(FDCC) is a security configuration policy mandated by the Office of Management and Budget (OMB).
The original checklists developed in support of the FDCC policy exist for multiple versions of Microsoft
Windows, Windows Firewall, and Internet Explorer. These checklists are broader than previous
checklists, incorporating settings for Web browsers, personal firewalls, and other software. The
configuration settings also include non security-related settings aimed at improving performance, energy
efficiency, compatibility, and interoperability. The settings are largely based on the configuration settings
recommended by Microsoft in its security guides, but they have been customized to take into account
federal government security requirements. Many federal systems have been required to use these
checklists by OMB's FDCC mandate.
Since that time, the US government has focused on developing a new set of security configuration
checklists to augment the existing checklists in support of the FDCC policy. These new checklists are
known as the United States Government Configuration Baseline (USGCB). Like the original checklists,
the USGCB checklists also support the FDCC policy, and the USGCB checklists address a wide variety
of security and non-security settings that are largely based on settings recommended by product vendors
but customized to meet federal requirements. The USGCB initiative was created in 2010 by the
Technology Infrastructure Subcommittee (TIS) of the CIO Council Architecture and Infrastructure
Committee (AIC) as an evolution of the FDCC policy. The USGCB checklists are referred to as
"baselines" because they define minimum sets of configurations that must be implemented. New USGCB
baselines were released to replace the original FDCC checklists (Windows XP, Windows Vista, and
Internet Explorer 7), and the original FDCC checklists were deprecated at that time. USGCB checklists
have also been created for other platforms, namely Red Hat Enterprise Linux Desktop.
The USGCB configuration settings are intended to be deployed primarily to managed systems. The
original checklists in support of the FDCC policy and USGCB baselines are intended to be applied to
systems primarily through automated tools. Organizations should thoroughly test all checklists and
baselines before deploying them in operational environments because a number of their settings, such as
cryptographic algorithm options and wireless services, may impact system functionality. After
deployment, settings may also be checked through automated means for compliance with checklists and
baselines. 
4. Checklist Usage
This section describes a high-level process for checklist users to follow when retrieving and using
checklists. Although all checklist users, ranging from home users to system administrators, have their
own specific requirements, the process described will apply to most situations. This section includes
guidance on conducting an initial analysis of local environment threats and risks, and lists the potential
impacts of such attacks. It then describes a process for selecting and retrieving checklists through the
NIST checklist repository, and recommends steps for analyzing, tailoring, and applying the checklist.
Figure 1 shows the general process for using checklists. The general steps involved in acquiring and using
checklists are simple and straightforward—
1. Users gather their local requirements (e.g., IT products, the operating environment, and
associated security needs) and then acquire or purchase the IT product that best suits their needs.
2. Users browse the checklist repository to retrieve checklists that match the user's operational
environment and security requirements. If a product is intended to be secure by default, it is still
important to check the NIST checklist repository for updates to that checklist.
3. Users review the checklists and select the checklist that best meets their requirements, then tailor
and document the checklist as necessary to take into account local policies and functional
requirements, test the checklist, and provide feedback to NIST and checklist developers.
4. Users prepare to deploy the checklist, such as making configuration or data backups, and then
apply the checklist in production.
The following sections describe the details of the activities included in each of these steps.
4.1 Determining Local Requirements
Organizations usually conduct a requirements analysis before actually selecting and purchasing a
particular IT product. Such an analysis would include identifying the needs of the organization (what the
product must do) and the security requirements for the product (e.g., relevant security policies). Individual
end users can conduct the same process, although it could be quite informal. Because it is difficult to add
security later, it is best to assess requirements upfront when incorporating security into IT operations, big
or small.
When planning security, it is essential to first define the threats that must be mitigated. Organizations that
use checklists should conduct risk assessments to identify the specific threats against their systems and
determine the effectiveness of existing security controls in counteracting the threats; they then should
perform risk mitigation to decide what additional measures (if any) should be implemented, as discussed
in NIST SP 800-37 Revision 1, Guide for Applying the Risk Management Framework to Federal
Information Systems: A Security Life Cycle Approach [6]. Performing risk assessments and mitigation
helps organizations better understand their needs and decide whether or not they need to modify or
enhance selected checklists.
The risk mitigation methodology includes steps that are straightforward and simple, even for an
individual home user who may not be especially savvy with regard to IT security. Important steps include
the following:
• Identify Functional Needs. What must the product do? Identifying upfront the end user's
requirements, such as remote access for telecommuters or a web server to make internal information
available to employees, is necessary to ensure that the security controls selected are appropriate; that
is, that they implement an appropriate security solution and still allow the system to meet its
requirements for functionality.
• Identify Threats and Vulnerabilities. A threat is the potential for a particular threat-source to
successfully exercise a particular vulnerability. A vulnerability is a weakness that can be accidentally
triggered or intentionally exploited. The goal of this step is to identify potential threat-sources that are
applicable to the IT product or system being considered, as well as the vulnerabilities that could be
exploited by the potential threat-sources.
• Identify Security Needs. The goal of this step is to determine the controls needed to minimize or
eliminate the likelihood (or probability) of a threat exercising a product or system vulnerability. It
answers the question, "What security features must the product provide?" Armed with this
information, the organization can make wiser choices about which IT product best meets its needs.
NIST has also written several documents and guides to help federal agencies when selecting information
security products and when acquiring and using tested/evaluated products. Another key resource available
at NIST for identifying vulnerability-related information about IT products is the National Vulnerability
Database (NVD). This website provides a search engine for identified system vulnerabilities and
information on patches that are available to correct the vulnerabilities.
4.2 Browsing and Retrieving Checklists
After determining local requirements and identifying an IT product, a checklist user is ready to browse
the NIST checklist repository. To help users obtain checklists that can be processed by SCAP-validated
products, the checklists are categorized by content type (degree of automation and standardization) and 
authority (the organization responsible for producing the original security configuration guidance
represented by the checklist). Users can browse the checklists based on the content type, IT product, or
authority and through a keyword search that searches the checklist name and summary for user-specified
terms. The search results show the detailed checklist information and a link to any SCAP content for the
checklist, as well as links to any supporting resources associated with the checklist. Selecting a particular
checklist will show a description template that includes extensive information to help users decide
whether the checklist will suit their specific purposes. Depending on a user's needs, role, and skills (e.g.,
home user versus enterprise administrator), some fields in the description will be more important than
others.
Some checklists address more than one application or operating system, such as several products from a
single organization. To help users navigate the site from the checklist detail page, a Checklist Group link
is available; it represents the grouping of checklists based on a common source material. For example, the
DISA (Defense Information Systems Agency) Desktop Checklist contains configuration settings for
multiple products including browsers and antivirus products. The NCP decomposes the checklist
information according to these individual targets, but keeps them conveniently linked to the same source
document via the Checklist Group.
In some cases, multiple checklists are available for a particular version of a product. Such checklists are
often similar, but they have important differences, such as the degree of automation provided, the
intended audience (e.g., providing general recommendations versus complying with Federal agency-specific requirements), and the checklist purpose (reconfiguring a product versus identifying a successful
compromise of the product). To assist checklist users in being able to readily identify the major
differences among checklists, NIST categorized checklists by content type, such as:
• Prose. Prose checklists provide narrative descriptions of how a person can manually alter a product's
configuration.
• Automated. Automated checklists document their security settings in a machine-readable format,
either standard or proprietary. An example is a product-specific configuration script. These checklists
may include some elements of SCAP (for example, they may contain CCE [Common Configuration
Enumeration] identifiers), but do not fully adhere to the SCAP specification.
• SCAP Content. SCAP content checklists adhere to the SCAP specification in NIST SP 800-126 for
documenting security settings in machine-readable standardized SCAP formats. SCAP content
checklists can be processed by SCAP-validated products, which have been validated by an accredited
independent testing laboratory as conforming to applicable SCAP specifications and requirements.
SCAP content that is available on the National Checklist Program repository has been evaluated with
the NIST SCAP Content Validation Tool (SCAPVal). This evaluation ensures the checklist
conforms to the SCAP specification. The SCAPVal tool does not evaluate the checklist for logic
errors such as use of an "equal to" operator when "equal to or greater than" should have been used.
Some SCAP content checklists have been vetted with at least one governance organization authority.
These SCAP checklists are known to run on SCAP-enabled tools and include low-level security
setting mappings (for example, standardized identifiers for individual security configuration issues)
that can be externally mapped to high-level security requirements as represented in various security
frameworks (e.g., SP 800-53 controls for FISMA). The USGCB checklists described in Section 3.5
are examples of vetted SCAP content checklists.
When multiple checklists are available for a particular product, organizations should take into
consideration the degree of automation and use of standards of each checklist. Generally, SCAPexpressed checklists can be used more consistently and efficiently than others. There may be other
significant differences among checklists; for example, one checklist may include software bundled with
an operating system (e.g., web browser and email client) while another checklist addresses that operating
system only. Another example is the assumptions on which the checklists are based (e.g., operational
environment). A checklist user should identify such differences and determine which checklist(s) seem
appropriate and merit further analysis.
Checklist source is particularly important for users from Federal civilian agencies, who should first search
for government-authorized or mandated checklists. In general, these users should search for NISTproduced checklists, which are tailored for civilian agency use. If no NIST-produced checklist is
available, then agency-produced checklists from the Defense Information Systems Agency (DISA) or the
National Security Agency (NSA) should be used if available. If formal government-authorized checklists
do not exist, organizations are encouraged to use vendor-produced checklists. If vendor-produced
checklists are not available, other checklists that are posted on the NCP website may be used.
Organizations often submit checklists with associated alphanumeric version identifiers (e.g., R1.2.0).
Unfortunately, these identifiers do not have universal meanings. Some organizations may change the
version number when new checks are added, old technology is deleted, patches are added, or simply
based on a review date. Conversely, other organizations may update their checklist and not change the
version numbers. To clarify updates to checklists, NCP uses the concept of a "Checklist Revision." A
Checklist Revision indicates that something has changed even if the version identifier did not change.
For example, if the organization does not change the version number on the document, but the content has
been updated (e.g., patches were added for a given month), the current checklist will be listed as archived
and the checklist with the updated patch content will show as the current checklist. Likewise, if the
submitting organization updates the version identifier, then the NCP will list the current checklist as
archived and link to the new checklist. From the checklist detail page, a user can navigate to the checklist
history via the "Archived Revisions" link.
4.3 Reviewing, Customizing and Documenting, and Testing Checklists
Checklist users should download all documentation for the checklist and review it carefully. The
documentation should explain any required preparatory activities, such as backing up a system. Because a
checklist may not exactly match a user's specific requirements, reviewing a checklist is useful in
determining whether the checklist may need to be tailored and whether the system or product will
require further changes after applying the checklist.
The user's review can identify the impact on an organization's current policies and practices if a given
security checklist is used. An organization may determine that some aspects of the checklist do not
conform to certain organization-specific security and operational needs and requirements. Organizations
should carefully evaluate the checklist settings and give them considerable weight, then make any
changes necessary to adapt the settings to the organization's environment, requirements, policies, and
security objectives. This is particularly true for checklists intended for an environment with significantly
different security needs. Organizations should tailor the checklists to reflect local rules, regulations, and
mandates; for example, federal civilian agencies would need to ensure that checklists reflect compliance
with encryption requirements from Federal Information Processing Standard (FIPS) 140, Security 
Requirements for Cryptographic Modules. Because the checklist may be used many times within the
organization, the checklist itself might need to be modified. This is especially likely if the checklist
includes a script or template to be applied to systems.
At this point, all deviations from the settings in the checklist should be documented for future reference.
The documentation should include the reason behind each deviation, including the impact of retaining the
setting and the impact of deviating from the setting. This documentation helps in managing changes to the
checklist over the life cycle of the product being secured. Feedback on the checklist can be sent to NIST
as well as to the checklist developers. Feedback is especially important to developers in gauging whether
the checklist is well written and the settings are applicable to the targeted environment.
Before applying a checklist that will be used to alter product settings, users should first test it on noncritical systems, preferably in a controlled non-operational environment. Such testing may be difficult for
home or small business users who do not have extra systems and networks for testing purposes. Each
checklist in the NIST checklist repository has been tested by its developer, but there are often significant
differences between a developer's testing environment and an organization's operational environment,
and some of these differences may affect checklist deployment. The testing configuration of the IT
product should match the deployment configuration. In some cases, a security control modification can
have a negative impact on a product's functionality and usability, or on other products or security
controls. For example, installing a patch could inadvertently break another patch, or enabling a firewall
could inadvertently block antivirus software from updating its signatures or disrupt patch management
software. Consequently, it is important to perform testing to determine the impact on system security,
functionality, and usability; to document the results of testing; and to take appropriate steps to address any
significant issues. Section 4.4 contains recommendations for performing backups and other suggestions to
prevent or recover from potential damage or unwanted effects that could occur if applying an untested
checklist.
Before using a checklist to verify product settings without altering them, users should test it. If the
checklist is automated, users should also test the tool or tools that will be used with the checklist to ensure
that they do not inadvertently disrupt the functionality of the system or alter the configuration of the
product. Checklist testing should be performed to identify discrepancies between the expected and actual
settings, which could indicate errors in the checklist, such as environment-specific characteristics for
which the checklist was not modified.
4.4 Applying Checklists to IT Products
A checklist can be applied to an IT product in one of two ways: modifying the product's settings or
verifying the existing settings. The following provides recommendations for both ways of applying
checklists:
• Setting Modification
– Even after reviewing and testing a checklist, users should handle deployment carefully to
minimize any issues that might arise from applying the checklist.
– For users who are unable to test a checklist in a non-operational environment (e.g., home users), it
is important to carefully review the checklist documentation completely and to determine if an
initial backup is required. The Rollback Capability field in the checklist description will indicate
whether the results of applying the checklist can be reversed to return the product to its original
configuration. Regardless of this setting, it is strongly recommended that a user back up the IT
product's configuration before installing the checklist recommendations.
– At a minimum, users should back up all critical data files in their computing environment. If
possible, the user should make a full backup of the system to ensure that the system can be
restored to its pre-checklist state if necessary. (Making a full backup is recommended before
making any major system change; it does not apply only to implementing a checklist.) Large
organizations should also follow this procedure and, if possible, first select several operational
systems as pilots to provide "real-world" testing for the checklist before enterprise-wide
deployment.
• Setting Verification
– Even after reviewing and testing a checklist, users should handle verification carefully to ensure
that product settings are not inadvertently altered.
After initially applying a checklist, an organization may need to acquire and apply revised versions of the
checklist in the future. Depending on the product being secured, a checklist may be updated periodically
based on a set schedule or updated as needed, frequently or infrequently. For selected checklists, NIST
may maintain a mailing address list of users, and users who subscribe to the list will receive
announcements of updates or other issues connected with the checklist. Instructions for subscribing to the
mailing address list will be included in the selected checklist's description on the checklist repository. An
organization that acquires an updated checklist would perform the same steps already described in this
section while taking advantage of knowledge gained and documented from applying previous versions of
the checklist.
4.5 Providing Feedback on Checklists
NIST welcomes all "bug" reports, comments, and suggestions from checklist users in regard to individual
checklists or the repository itself. Such feedback should be directed to checklists@nist.gov.
Some of the questions that checklist users may want to consider when evaluating a checklist include the
following:
• Documentation
– Does it explain the security objectives?
– Does it contain a complete, clear, and concise description of the checklist settings?
• Recommended Practices
– Are the checklist settings consistent with recommended practices?
– Do the checklist settings take into account recent vulnerabilities?
• Impact of Settings
– Has the checklist developer tested the checklist settings on the product in an operationally
realistic environment and determined that the application of the checklist settings causes the
product to meet the security objectives of the checklist? 
– Do any of the checklist settings cause the product to become inoperable or unstable?
– Do any of the checklist settings reduce product functionality? If so, is this documented?
• Ease of Implementation
– Is the checklist straightforward to apply?
– Are the instructions concise, sound, and complete?
– Is the required skill level identified?
– Are procedures to verify that the installation is successful included?
– Is there guidance for uninstalling the checklist or restoring the product to the state before
installation?
– If the checklist cannot be rolled back, does the documentation recommend other preparatory
measures such as backups?
• Assistance
– Is checklist-related help available?
– Does the documentation contain information for troubleshooting if errors occur or if the checklist
settings cause the product to operate incorrectly?
– Is there assistance available for qualified users of the product?
• If the checklist developer is NOT the IT product's vendor, does the documentation indicate whether
the checklist has been sponsored or endorsed by the IT product's vendor? 
5. Checklist Development
This section describes the general process for developing security configuration checklists and submitting
them to the NCP. It includes an overview of the process NIST will follow to screen the checklist
submissions and publish them in its repository, and the process NIST and developers will follow to
update the checklist or to archive the checklist. Individual developers and organizations that want to
submit checklists to NIST should review the appendices of this document, which contain the
administrative requirements for participation in the NCP. Before submitting a checklist to NIST,
developers should ensure they have the most recent version of this document. The most recent version is
available as a separate file at https://nvd.nist.gov/ncp/participation.
The checklist life cycle comprises the following steps:
1. Initial Checklist Development: The developer becomes familiar with the procedures and
requirements of the checklist program, and then performs the initial development of the checklist,
including selection of a target environment.
2. Checklist Testing: The developer tests the checklist in the target environment and corrects any
problems with the checklist.
3. Checklist Documented: The developer documents the checklist according to the guidelines of
the program.
4. Checklist Submitted to NIST: The developer submits the checklist and documentation package
to NIST for screening and public review.
5. NIST Screening: NIST screens the checklist package's information and confirms that any SCAP
data stream content is well-formed, then addresses any issues with the developer prior to public
review.
6. Public Review and Feedback: NIST holds a 30-day public review of the candidate checklist,
then the developer addresses comments as necessary.
7. Final Listing on Checklist Repository: NIST lists the checklist on repository as final and
announces the checklist's availability.
8. Checklist Maintenance and Archival: Anyone can provide feedback on the checklist
throughout its life. The developer updates the checklist periodically as necessary. The checklist is
archived when it is no longer being maintained or is no longer needed.
Each step should be carried out to ensure the checklist is accurate, tested, and documented during its
development and subsequent publication, update, or archival. The following sections describe
considerations for each step. USGCB checklists for the US Government environment follow the steps in
this section, but they must meet additional requirements as detailed in Appendix D.
5.1 Developer Steps for Creating, Testing, and Submitting Checklists
The first four steps in the development methodology listed above involve the developer creating, testing,
documenting and submitting checklists. Sections 5.1.1 through 5.1.4 describe each of these steps in
greater detail.
5.1.1 Initial Checklist Development
During initial checklist development, a developer becomes familiar with the requirements of the checklist
program and all procedures involved during the checklist life cycle (as described throughout this section).
At this point, a developer would presumably agree to the requirements for participation in the NCP before
continuing to develop the checklist. The participation requirements are described in this document, but are
presented in administrative and programmatic terms in Appendix B, which is intended less for technical
developers and more for those in developer organizations who must formally agree to NCP requirements.
The participation agreement is contained in Appendix C.
After agreeing to NCP requirements, the developer decides in which operational environment (see
Section 3) the checklist should be implemented, and builds the checklist accordingly. The output of this
step is an initial checklist for the product.
NIST recognizes that detailed checklist development cannot be covered extensively in this document.
Developers may find publications on commonly accepted technical security principles and practices, as
catalogued in NIST SP 800-53 [7] and NIST SP 800-27, Engineering Principles for Information
Technology Security (A Baseline for Achieving Security) [5], to be helpful when developing a checklist.
There are also many publications related to SCAP available at https://scap.nist.gov/.
In terms of vulnerability coverage, the security objectives should take into account the most up-to-date
vulnerabilities and generally be consistent with recognized sources of vulnerability-related information,
including the Department of Homeland Security's (DHS) United States Computer Emergency Readiness
Team (US-CERT), the Computer Emergency Response Team/Coordination Center (CERT/CC), and
NIST's NVD.
Developers of checklists for products that are used by the federal government should consult the FISMA-associated security control requirements. NIST SP 800-53 [7] provides a catalog of security controls,
using groups of the controls to create three minimum security control sets for federal information
systems—low, moderate, and high impact as specified in FIPS 199, Standards for Security
Categorization of Federal Information and Information Systems [9]. Developers of IT products that will
be used in federal information systems are encouraged to help federal agencies meet the mandatory
requirements in FISMA by creating checklists that provide recommended configuration settings in a
variety of operational environments or for information systems of differing impact levels, as described in
FIPS 199 and SP 800-53. Developers are also encouraged to consider requirements imposed by the
Health Insurance Portability and Accountability Act (HIPAA) and other sources.
5.1.2 Checklist Testing
Before a checklist is submitted to NIST, it should be fully tested in a configuration that meets the target
environment and platform. The checklist should be tested with a variety of applications and hardware
platforms, if applicable. Ideally, at least some testing should be performed in a production or mirrored
production environment. The testing data does not need to be submitted to NIST; however, the developer
should retain the data for review as appropriate.
Selecting the most appropriate set of security controls can be a daunting task because many security
controls have limited system functionality and usability. In some cases, a security control can have a
negative impact on other security controls. For example, installing a patch could inadvertently break
another patch. Therefore, it is important to perform testing for all security controls to determine what
impact they have on system security, functionality, and usability, and to take appropriate steps to address
any significant issues.
NIST has produced SP 800-115, Technical Guide to Information Security Testing and Assessment [8], to
help administrators in testing systems for vulnerabilities and configuration problems. Although this
publication is focused more on testing systems than testing individual IT products, it may be useful to
checklist developers.
5.1.3 Checklist Documented
The quality of checklist documentation often makes a major difference in the checklist's effectiveness.
The checklist documentation should clearly explain how to use the checklist, with concise, sound, and
complete instructions. The skill level required to use the checklist should be identified, as well as the
targeted environment. The documentation should also explain the significance of individual settings,
including any changes to product functionality. If applicable, the documentation should also include
procedures to verify that the checklist installation is successful, as well as guidance for uninstalling the
checklist or restoring the product to its state before installation of the checklist. In some cases, it may not
be possible to roll back checklist settings, in which case the checklist documentation should recommend
procedures such as backups and system restoration as applicable.
The testing methodology, such as how the checklist was tested and what platforms were used, should be
documented. The checklist documentation should also contain information for troubleshooting if errors
occur or if the checklist settings cause the product to operate incorrectly. Ideally, assistance is available
for (registered) users of the product if there are problems.
Checklist developers must complete an online checklist description form for each checklist. Table 1
shows the fields in the checklist description form that developers are to complete.
The developer needs to complete the fields as indicated to describe the checklist accurately and minimize
user confusion as to what the checklist accomplishes.
In summary, well-structured checklist documentation includes the following, as appropriate:
• Statement of the security objectives, including the expected behavior of the product after applying the
checklist
• The intended audience (e.g., end user, system administrator) and the level of technical skill required
to use the checklist
• Explanation of the checklist settings, including each setting's effect on operation of the product and
any functionality the settings enable or disable
• Backup procedures or any other initial steps required before applying the checklist
• As appropriate, step-by-step instructions for applying the checklist (e.g., screen shots, illustrated
procedures) and verifying that the installation is successful
• Troubleshooting instructions or other information and references.
5.1.4 Checklist Submitted to NIST
At this point, the checklist developer has completed, tested, and documented the checklist. The developer
now submits the package of materials to NIST. The package includes the following:
• Checklist and configuration files, templates, scripts, etc.
• Completed checklist description
• Checklist documentation
• Identification of the developer point of contact
• Signed participation agreement.
The participation agreement and other requirements are outlined in detail in Appendix B, which also
includes the appropriate NIST contact information.
Checklist packages are submitted to NIST through the NCP Submission website. The website walks the
checklist developer through a series of screens that collect all of the information and materials needed for
checklist submission. In addition, the website allows checklist developers to view the checklists they have
submitted, see tasks that have been assigned to them (such as fixing errors on a previously submitted
checklist), update existing checklists, and perform other actions. NIST also provides web services for
submitting, fetching, and maintaining checklists. To request access to the NCP Submission website or
associated web services, email checklists@nist.gov.
5.2 NIST Steps for Reviewing and Finalizing Checklists for Publication
The NIST process for screening and publishing a checklist, which corresponds to steps 5 through 8 in the
checklist life cycle, is described in the following sections.
5.2.1 NIST Screening of the Checklist Package
This step involves determining if the appropriate checklist materials are sufficiently accurate and
complete to be publicly reviewed. NIST screens the checklist information for completeness and accuracy,
and ensures that checklist content is well-formed if it is SCAP-expressed. NIST may contact the
developer with questions about the submitted materials during the screening period.
5.2.2 Public Review and Feedback for the Candidate Checklist
After the checklist package has been screened and the developer has addressed any issues, NIST will post
it as a candidate draft and announce it for public review for a period of 30 days. This allows the public to
review and test the checklist, and to provide the checklist developers and NIST with comments and
feedback. Information from comments and feedback may be incorporated in a revision of the checklist to
improve its quality. When a candidate checklist has completed the review process, its information is
added to the checklist repository.
A checklist reviewer emails checklists@nist.gov to provide comments as well as other information about
the reviewer's test environment, procedures, and other relevant information. Depending on the review, the
checklist developer may need to respond to comments. NIST may also consult independent expert
reviewers as appropriate. Typical reasons for using independent reviewers include the following:
• NIST may decide that it does not have the expertise to determine whether the comments have been
addressed satisfactorily.
• NIST may disagree with the proposed issue resolutions and seek reviews from third parties to get
additional perspectives.
At the end of the public review period, NIST will give the developer 30 days to respond to comments.
5.2.3 Final Listing on Checklist Repository
After any outstanding issues are addressed, NIST lists the final checklist and announces that the checklist
is now listed on the repository. At this time, the developer (e.g., IT product vendor) may be eligible to use
the checklist logo on the IT product's promotional material if the developer provides assistance for the
checklist. Requirements for use of the logo are described in Appendix C.
5.2.4 Checklist Maintenance and Archival
Throughout a checklist's life cycle, anyone can provide comments or ask questions regarding the
checklist by mailing checklists@nist.gov; NIST will pass feedback to the checklist developer. Depending
on the product and how frequently updates occur, NIST may maintain a mailing address for the associated
checklists. Users who subscribe to the mailing list can receive announcements of updates or other issues
connected with a checklist. The selected checklist's description (on the checklist repository) will contain
instructions for subscribing to the mailing address list.
After the final checklist is listed, NIST will periodically review the checklist to determine if it is still
relevant or if changes need to be made to it. If the developer decides to update the checklist at any time,
NIST will announce that the checklist is in the process of being updated. If the revised checklist contains
major changes, it will be accepted as if it were a new submission, and will be required to undergo the
same review process as a new submission. 
At NIST's or the developer's discretion, the checklist can be removed from the repository or marked as an
archive. Typical reasons for such actions would be that the product is no longer supported or is obsolete,
or that the developer no longer wishes to provide support for the checklist. 