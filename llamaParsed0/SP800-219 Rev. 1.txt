# Abstract
The macOS Security Compliance Project (mSCP) provides resources that system administrators, security professionals, security policy authors, information security officers, and auditors can leverage to secure and assess macOS desktop and laptop system security in an automated way. This publication introduces the mSCP and gives an overview of the resources available from the project’s GitHub site, which is continuously curated and updated to support each new release of macOS. The GitHub site provides practical, actionable recommendations in the form of secure baselines and associated rules. This publication also describes use cases for leveraging the mSCP content. Updates from the previous version of this publication mainly involve the new mSCP capability to create a custom benchmark by tailoring a baseline.

# 1. Introduction
The National Institute of Standards and Technology (NIST) has traditionally published secure configuration guides for Apple desktop/laptop operating system versions as prose-based Special Publications (SPs), such as NIST SP 800-179, Revision 1, Guide to Securing Apple macOS 10.12 Systems for IT Professionals: A NIST Security Configuration Checklist. In order to provide security configuration guidance to organizations more quickly and in a machine-consumable format, NIST established the open-source macOS Security Compliance Project (mSCP). NIST no longer produces SP guidance documents for each macOS release; instead, the mSCP continuously curates and updates machine-consumable macOS guidance. The latest macOS security baseline content is maintained and updated on the mSCP GitHub page.

Security baselines are groups of settings used to configure a system to meet a target level or set of requirements or to verify that a system complies with requirements. The mSCP seeks to simplify the macOS security development cycle by reducing the amount of effort required to implement security baselines. This collaboration between federal agencies minimizes duplicate effort that would otherwise be needed for these agencies to administer individual security baselines. Additionally, the secure baseline content provided is easily extensible by other parties to implement their own security requirements.

Organizations using mSCP content, particularly security baseline examples, should take a risk-based approach for selecting the appropriate settings and defining values that consider the context under which the baseline will be utilized.

## 1.1. Purpose and Scope
The purpose of this document is to introduce the mSCP to broader audiences. This document provides a high-level overview of the mSCP, its components, and some common use cases. It refers readers to the online project documentation for in-depth technical information and use instructions. This document is intended to be independent of macOS version releases; updates will be released as needed when there are substantial changes to the mSCP.# mSCP Document Overview

## 1. Introduction

The previous release of this document mainly involves the new mSCP capability to create a custom benchmark by tailoring a baseline. The information in this document regarding the details of the mSCP GitHub site is accurate as of the time of publication. Readers seeking the latest detailed information on mSCP content or the content itself should visit the mSCP GitHub page and wiki.

Organizations that need to reference a NIST SP to demonstrate how they are complying with United States Government mandates for adopting secure configurations for their macOS devices may reference this SP instead of its deprecated predecessors, such as SP 800-179 or SP 800-179, Revision 1.

### 1.2. Audience

This document and the mSCP GitHub site are intended for system administrators, security professionals, policy authors, privacy officers, and auditors who have responsibilities involving macOS security. Additionally, vendors of device management, security, configuration assessment, and compliance tools that support macOS may find this document and the GitHub site to be helpful.

### 1.3. Relevance to NIST SP 800-70 and the National Checklist Program

The security baselines from the mSCP GitHub page are included in the National Checklist Program. NIST SP 800-70, Revision 4 explains that federal agencies are required to use appropriate security configuration checklists from the National Checklist Program when available. Part 39 of the Federal Acquisition Regulations, Section 39.101 paragraph (c) states:

> In acquiring information technology, agencies shall include the appropriate information technology security policies and requirements, including use of common security configurations available from the National Institute of Standards and Technology’s website at NIST Checklists. Agency contracting officers should consult with the requiring official to ensure the appropriate standards are incorporated.

### 1.4. Document Structure

The remaining sections and appendices of this document are as follows:

- **Section 2** provides an overview of the project, including what its goals are and how its content can be used.
- **Section 3** explains the major components of the mSCP and provides pointers to additional information on component usage.
- The **References** section lists the references for the document.
- **Appendix A** briefly discusses how mSCP can help meet the needs of people in several roles.
- **Appendix B** provides examples of how a security professional might use mSCP content.
- **Appendix C** contains an example of how an assessment tool vendor could leverage mSCP content.
- **Appendix D** lists selected acronyms and abbreviations used in this document.

## 2. Project Description

The mSCP is an open-source project that provides a programmatic approach to generating and using macOS security configuration baselines. The project’s content can be used to create...# Customized Security Baselines for macOS

Customized security baselines of technical security controls are developed by leveraging a library of rules, with each rule mapped to requirements in one or more existing security standards, regulations, or frameworks. This approach provides versioning and consistency of the content. Unifying and standardizing macOS baseline efforts via the mSCP means that updating security guidance is simplified and radically accelerated, even as new versions of macOS are introduced annually.

## Background of mSCP

The mSCP started in August 2019 as a collaboration among operational IT security staff from:

- NIST
- National Aeronautics and Space Administration (NASA)
- Defense Information Systems Agency (DISA)
- Department of Energy’s (DOE) Los Alamos National Laboratory (LANL)

The mSCP sought to map macOS settings to NIST SP 800-53, Revision 4, with an extensible, modern approach to security guidance that could be used by any organization (e.g., government, enterprise, education) that needs to adhere to security compliance frameworks and policy.

As of this writing, the configuration settings represent guidance and best practices from:

- NIST SP 800-53, Revision 5
- NIST SP 800-171, Revision 2
- macOS DISA Security Technical Implementation Guide (STIG)
- Committee on National Security Systems (CNSS) Instruction (CNSSI) Number 1253
- Center for Internet Security (CIS) Critical Security Controls Version 8
- Internal organizational security guidance from NIST, NASA, and LANL

## Project Goals

Apple releases a new macOS version every year, and generally, agencies and organizations must wait for guidance or accept risk before deploying the new macOS version. Most agencies or organizations must create their own internal security configuration, which delays the deployment of the new macOS version or new hardware that only supports the new macOS version. The mSCP assists organizations in upgrading sooner. Generally, the technical security settings in macOS do not drastically change from release to release, with only a handful of new settings being introduced. By pursuing a rules-based approach, mSCP rules that remain applicable can be reused and incorporated into guidance for the latest macOS version. This enables quicker adoption of new security features that are not offered in prior versions of macOS.

### The goals of the mSCP are to:

- Develop recommended security baselines using a risk-based approach
- Normalize and accelerate annual adoption of the new operating system and hardware by providing guidance to meet the security needs of new operating systems at the earliest availability
- Reduce worldwide efforts in creating annual guidance by unifying and consolidating compliance efforts into a single project
- Develop a methodology to foster collaboration between baseline authors, reducing duplication of effort# Overhead and Redundancy

## Unified Approach
- Establish a unified approach for the configuration and assessment of controls across multiple sources and tools.

## Customization of Content
- Enable the customization of existing content and the creation of new content, including creating custom baselines to meet organization-specific security requirements.

## Insight for Vendors and Auditors
- Provide device management and security tool vendors, auditors, and Apple insight into customer security configuration needs.

## 2.2. mSCP Content Use
mSCP content can be used by any organization to assist in setting and assessing the security configuration of macOS systems. Security baselines can map to existing guidance or controls, such as those in NIST SP 800-53, Revision 5, or they can be customized to meet an organization’s specific needs.

In mSCP terminology, a security baseline is represented as a baseline file that designates the rules for meeting a specific set of requirements. The mSCP provides a library of rules that are macOS settings. Each rule is mapped to a requirement within a security standard or framework. Baseline files and rules comprise much of the mSCP’s content.

### Example Baselines
The mSCP offers several example baselines with descriptions adapted from Federal Information Processing Standards Publication (FIPS) 199, such as:

- **SP 800-53, Revision 5 Low Baseline**: A defined map of controls to secure a system defined as a low-impact information system. The loss of confidentiality, integrity, or availability could be expected to have a limited adverse effect on organizational operations, organizational assets, or individuals.

- **SP 800-53, Revision 5 Moderate Baseline**: A defined map of controls to secure a system defined as a moderate-impact information system. The loss of confidentiality, integrity, or availability could be expected to have a serious adverse effect on organizational operations, organizational assets, or individuals.

- **SP 800-53, Revision 5 High Baseline**: A defined map of controls to secure a system defined as a high-impact information system. The loss of confidentiality, integrity, or availability could be expected to have a severe or catastrophic adverse effect on organizational operations, organizational assets, or individuals.

Organizations using any baseline example should take a risk-based approach for selecting the appropriate settings and organizationally defined values depending on the context under which the baseline will be applied. Organizations can tailor any of the baselines to include controls specific to their needs and to produce evidence of control enforcement.

### Additional Information
Additional information on baseline customization can be found in SP 800-70, which discusses the importance of customizing and testing baselines before applying them to a production system.

### mSCP Scripts
The mSCP provides scripts that can be used with baselines for several purposes, including:
- Creating scripts and profiles for configuring macOS.# Security Content Automation Protocol (SCAP) and mSCP Overview

## Introduction
- Generating a mapping between security standards, regulations, frameworks, etc.
- Producing human-readable documentation in a variety of formats
- Customizing existing baselines

mSCP content can also be used to generate Security Content Automation Protocol (SCAP) content for automated security compliance scans. The SCAP generated follows the SCAP 1.3 specification. The generation of SCAP content uses an Extensible Stylesheet Language Transformations (XSLT) file to create an Extensible Configuration Checklist Description Format (XCCDF) checklist document with an accompanying Open Vulnerability and Assessment Language (OVAL) document.

The XCCDF and OVAL documents are bundled into an SCAP data stream collection document with accompanying files that include Common Platform Enumeration (CPE) dictionary information and an Open Checklist Interactive Language (OCIL) document. This creates an SCAP 1.3 document that validates using the NIST SCAP Content Validation Tool and can be used by SCAP tools on macOS. More information on SCAP content generation is available at the project wiki.

## mSCP Components
This section provides an overview of several components of the mSCP: security baseline files, configuration profiles and scripts, content generation scripts, customization capabilities, and directories. More information about all of these is available at the GitHub wiki.

### 3.1. Baselines and Benchmarks
The mSCP includes both baselines and benchmarks. A baseline is a catalog of recommended configuration settings, not a checklist or benchmark, and should be customized based on the organization’s risk profile. Implementing every item is not likely to be possible or sensible in many operational scenarios. Baselines can be used to assist in the creation of security benchmarks.

A benchmark differs from a baseline in that it defines values in addition to a set of controls. Benchmarks are published by organizations that have made risk-based decisions, such as DISA and CIS. Organizations can also define their own benchmark. These values are called Organization-Defined Values (ODVs), and they exist throughout the baselines and can be set during customization.

### 3.2. Security Baseline Files
In the mSCP, a security baseline is defined in a Yet Another Markup Language (YAML) file. A YAML file is a human-readable file format commonly used by configuration files where data are stored and/or transmitted. A baseline YAML file consists of the following required fields:
- **title** – A human-readable name for the baseline
- **description** – A short description of the baseline, including its use case and target operating system (OS) version
- **authors** – Developers of the baseline# Security Content Baseline

## Profile
- **Profile** – The security content portion of the baseline
- **Section** – A keyword for organizing settings
- **Rules** – The names of the rule files that are a part of this baseline

### Example YAML File
The following code provides a partial example of a YAML file that illustrates the use of these fields (with field names bolded):

## 3.2.1. Rule File Composition
A YAML rule file is broken down into the following subsections. This list and the following example are from the Rules section of the mSCP wiki.

- **id** – The id should match the file name without the yaml file extension.
- **title** – The title is a human-readable title of the rule.
- **discussion** – The discussion should provide a concise description of the intended use of the rule.
- **check** – Every rule will have a check. A shell-based check should be able to validate and check most rules.
- **result** – Expected results from the check.
- **fix** – The fix will appear in a document when generated. If a fix includes `[source,bash]`, the fix will be used for generating the script to enforce the rule.
- **references** – The references include a Common Configuration Enumeration (CCE) identifier and a mapping of the security frameworks, guidance, and individual controls that have been mapped to the rule. See the official repository of NIST CCEs for more information.
- **macOS** – The validated macOS version for this rule.
- **odv** – If a rule supports the ODV functionality, then the odv section should be present. At a minimum, this field should contain a hint (provides a description when tailoring a baseline) and a default value that replaces the `$ODV` variable.
- **tags** – Tags are keywords used to categorize and identify related rules, and they can be added to or modified as needed. Tags can also be used to make index-based searching of the rules faster and easier.
- **severity** – The severity level specified in the DISA STIG, if applicable.
- **mobileconfig** – The mobileconfig and mobileconfig_info subsections are related. If mobileconfig is set to true, the information required for creating the mobileconfig configuration profile is required in the mobileconfig_info area.

### Notional Example of a YAML Rule File
The following code provides a notional example of a YAML rule file (with field names bolded):

## 3.2.2. Rule File Categories
The mSCP organizes YAML files in the rules directory into the following subdirectories, each of which corresponds to a category of settings:

- **audit** – OpenBSM
- **auth** – Smartcard authentication
- **icloud** – Apple’s iCloud/Apple ID service
- **os** – Rules to configure the operating system that do not fit into the other categories
- **pwpolicy** – Password policy
- **system_settings** or **sysprefs** – Settings controlled within the System Settings or System Preferences application

The rules directory also includes a supplemental subdirectory, which contains additional information that supports the guidance provided by the baselines. Supplemental content contains...# Information on Configuration and Content Generation

## 3.3. Configuration Profiles and Scripts

When an mSCP YAML file is processed, it yields a configuration script and/or configuration profile (mobileconfig file) as outputs. Both are used to apply configuration settings to a system.

### Configuration Profile

A configuration profile is an Extensible Markup Language (XML) formatted file with a mobileconfig extension that contains a configuration payload. macOS can automatically configure itself based on a mobileconfig file’s contents upon execution.

Configuration profiles offer a convenient, Apple-supported mechanism for applying security settings to a macOS environment. Additionally, they can be cryptographically signed to ensure integrity and authenticity. These factors make configuration profiles the preferred vehicle for configuration delivery.

However, mobileconfig files cannot modify all macOS settings, so a configuration script is needed for those settings that are not supported. See the developer documentation page for an example configuration profile and brief descriptions of its properties.

### Configuration Script

A configuration script is a shell script that directly manipulates operating system files. The script content is derived from all YAML rule files that have a mobileconfig value of false and belong to the specified baseline. The YAML rule file must contain the fix section in order to generate its corresponding configuration script entry.

## 3.4. Content Generation Scripts

The mSCP provides several types of scripts for generating baselines, human-readable guidance, baseline compliance checkers, and other types of content. Each script is described below.

### 3.4.1. Generate Baseline Script

The `generate_baseline.py` Python script compiles a list of security rules into a single baseline YAML file. It can be used to modify an existing security baseline or create a new one. See the wiki for additional information.

### 3.4.2. Generate Guidance Script

The `generate_guidance.py` script can produce human-readable guidance and generate the macOS Security Compliance Tool, which is a Z shell script.

The `generate_guidance.py` script takes a baseline file and produces a human-readable guide with information from the YAML rules files. The script can create documentation in several formats but always generates an AsciiDoc file. AsciiDoc (.adoc) is a plain text format that uses markup conventions for traditional document formatting and organization.

AsciiDoc files are easily transformable into many other formats via the `generate_guidance.py` script, including HTML, PDF, and Excel. The Excel format is particularly useful for quickly...# Overview of Compliance Tools and Customization

## 1. Introduction
This document provides an overview of various scripts and tools used for compliance management, particularly in the context of macOS security.

## 2. Scripts and Tools

### 2.1. generate_guidance.py
The `generate_guidance.py` script is designed to create configuration profiles (mobileconfig files) and the macOS Security Compliance Tool.

- **Usage**:
- By using the `-s` argument, the script generates an `org.{baseline}.audit.plist` file.
- It also creates the macOS Security Compliance Tool, which can check and remediate compliance settings.

- **Exemptions**:
- The `audit.plist` file can set exemptions to organizational rules for approved users, allowing compliance checks to succeed without findings.
- To create an exemption for a rule, the `exempt` field should be set to true, and an `exempt_reason` should be provided.

For more information, refer to the wiki.

### 2.2. macOS Security Compliance Tool
The `{baseline}_compliance.sh` script runs interactively by default and can:

- Evaluate a system’s conformance to a baseline.
- Remediate incorrectly configured settings.

#### Options:
- **–check**: Autonomously assess a system.
- **–fix**: Automatically remediate baseline settings.

For more information, see the wiki.

### 2.3. SCAP Generation Script
The `generate_scap.py` script can generate:

- SCAP 1.3 documents
- XCCDF documents
- OVAL files

This script builds content from available tags within the YAML files and does not require a baseline file.

For more information, see the wiki.

### 2.4. Generate Mapping Script
The `generate_mapping.py` script allows for the quick creation of custom rules and baselines for compliance frameworks not published by the mSCP.

- **Requirements**:
- A user-created CSV file containing control identifiers that map to a new framework (CSV column 1) from another already defined by the project (CSV column 2).

- **Default Mapping**:
- The script is designed to map a framework to the NIST SP 800-53, Revision 5 set of controls.
- The `-f` argument allows mapping to another supported framework.

For more information, see the wiki.

## 3. Customization
Organizations should make risk-based decisions on what controls and rules to use and how to apply them, as stated by NIST SP 800-53, Revision 5 controls PL-10 and PL-11.

### 3.1. Customization Options
Customization allows organizations to generate their own content outside of that provided by the project and to add content for internal-only controls, which are not suitable for inclusion in a global baseline.

#### Examples of Customizations Supported by mSCP:
- **Baselines**:
- A baseline folder can be included within the custom folder to create customized baselines that fit an organization’s needs.
- These baseline files may include rule, section, and template customization.

This concludes the overview of compliance tools and customization options available for organizations. For further details, please refer to the respective wiki pages.# Custom Benchmark Configuration

## Overview
Configured to create a custom benchmark. Additionally, it is possible to customize an included benchmark, but in doing so, it may no longer be compliant with the original requirements of that benchmark.

## Rules
- Existing rules can have their setting values overridden via the custom folder instead of modifying the mSCP-supplied rule file.
- New rules can be created and added to existing baselines or to user-defined baselines.
- Organizations can create their own discussions, checks, results, fixes, and mappings of rules to security frameworks not included in the project.
- In order to override an existing rule, the custom rule file name must match an existing rule so that the `generate_guidance.py` script will pick up the new values.
- New rules not included in mSCP must be listed in the baseline YAML file specified when running `generate_guidance.py`.
- Additional information on custom rules can be found in an article written by mSCP contributor Allen Golbig.

## Sections
- Custom sections can be used to organize existing or custom YAML rule files.
- Sections defined in the custom folder must be included in a baseline YAML file in order to be used by `generate_guidance.py`.

## Templates
- Custom templates can be used to define new template structures for the project and affect the organization and appearance of generated documentation.
- The template files must match the name of an existing template and will override that template when running `generate_guidance.py`.

## Logos
- An organization can include a custom logo when running the `generate_guidance.py` script by using the `-l` argument to point to an image file.

## Tailoring
- The `generate_baseline.py` script allows for a baseline to be tailored using the `-t` argument.
- During the tailoring process, the script will prompt for each control containing an ODV to have its values customized.
- If a value is not supplied to a control with an ODV, it will use the default value in the rule file.
- Refer to Appendix C for an example of tailoring with ODVs.

# Directories
mSCP source code releases available on the mSCP GitHub include the following directories:

- **baselines**: Contains the defined YAML baseline files.
- **build**: Holds scripts, documents, and configuration profiles generated by running scripts.
- **custom**: Used for creating customized baselines, rules, sections, or templates to meet an organization’s requirements.
- **includes**: Contains the YAML-based libraries required for running the scripts.
- **rules**: Contains YAML rule files with one rule per file.
- **scripts**: Contains the content generation scripts and their required files.
- **sections**: Defines the sections that correlate to the directories in the rules folder; each section has its own YAML file that contains the section name and description as it will appear in the generated guide, which is human-readable documentation.
- **templates**: Includes AsciiDoc templates for generating an AsciiDoc guide.