# Application Whitelisting Overview

## Abstract
An application whitelist is a list of applications and application components that are authorized for use in an organization. Application whitelisting technologies use whitelists to control which applications are permitted to execute on a host. This helps to stop the execution of malware, unlicensed software, and other unauthorized software. This publication is intended to assist organizations in understanding the basics of application whitelisting. It also explains planning and implementation for whitelisting technologies throughout the security deployment lifecycle.

## Executive Summary
An application whitelist is a list of applications and application components (libraries, configuration files, etc.) that are authorized to be present or active on a host according to a well-defined baseline. The technologies used to apply application whitelists—to control which applications are permitted to install or execute on a host—are called whitelisting programs, application control programs, or application whitelisting technologies.

Application whitelisting technologies are intended to stop the execution of malware and other unauthorized software. Unlike security technologies such as antivirus software, which block known bad activity and permit all other, application whitelisting technologies are designed to permit known good activity and block all other. The purpose of this publication is to assist organizations in understanding the basics of application whitelisting and planning for its implementation.

Implementing the following recommendations should facilitate more efficient and effective application whitelisting use for federal departments and agencies.

### Recommendations

1. **Consider using application whitelisting technologies already built into the host operating system.**
Organizations should consider these technologies, particularly for centrally managed desktops, laptops, and servers, because of the relative ease in managing these solutions and the minimal additional cost. If built-in application whitelisting capabilities are not available or are determined to be unsuitable, then the alternative is to examine third-party solutions with robust centralized management capabilities.

2. **Use products that support more sophisticated application whitelisting attributes.**
Choosing attributes is largely a matter of achieving the right balance of security, maintainability, and usability. Simpler attributes such as file path, filename, and file size should not be used by themselves unless there are strict access controls in place to tightly restrict file activity, and even then there are often significant benefits to pairing them with other attributes. A combination of digital signature/publisher and cryptographic hash techniques generally provides the most accurate and comprehensive application whitelisting capability, but usability and maintainability requirements can put significant burdens on the organization.

3. **Test prospective application whitelisting technology in monitoring mode.**
It is highly recommended to test any prospective application whitelisting technology in a monitoring mode to see how it behaves before solution deployment. This testing should include a thorough evaluation of the technology's performance and its impact on the organization's operations.# Evaluation of Application Whitelisting Technology

## Introduction

### Purpose and Scope
The purpose of this publication is to assist organizations in understanding the basics of application whitelisting (also known as application control). All other forms of whitelisting, such as email, network traffic, and mobile code whitelisting, are out of the scope of this publication.

### Audience
This document is intended for security managers, engineers, administrators, and others who are responsible for acquiring, testing, implementing, and maintaining application whitelisting technologies.

### Document Structure
The remainder of this document is organized into the following sections and...

## Application Whitelisting Technology Planning and Deployment

A successful deployment will require a clear, step-by-step planning and implementation process. The use of a phased approach for deployment can minimize unforeseen issues and identify potential pitfalls early in the process. This model also allows for incorporating advances in new technology and adapting the technology to the ever-changing enterprise.

In addition to following the security recommendations presented in this publication, organizations implementing application whitelisting technologies should also follow the recommendations from NIST Special Publication (SP) 800-53 Revision 4, Security and Privacy Controls for Federal Information Systems and Organizations, which defines minimum recommended management, operational, and technical controls for information systems based on impact categories.

## Evaluation of Deployment Possibility

When evaluating the possibility of deploying application whitelisting, analyze the environment or environments in which the application whitelisting will be running. It is more practical to implement whitelisting on hosts that are centrally managed and have a consistent application workload.

Application whitelisting solutions are generally strongly recommended for hosts in high-risk environments where security outweighs unrestricted functionality. Suitability for typical managed environments depends on how tightly the hosts are managed and the extent of the risks that they face.

Organizations considering application whitelisting deployment in a typical managed environment should perform a risk assessment to determine whether the security benefits provided by application whitelisting outweigh its possible negative impact on operations.

Organizations should also be mindful that they will need dedicated staff managing and maintaining the application whitelisting solution depending on the scale and specifics of the solution implemented, similar to handling an enterprise antivirus or intrusion detection solution. An organization that can dedicate the necessary trained staff to solution maintenance and has built-in application whitelisting technology should generally implement application whitelisting at least in a monitoring mode.# Appendices

## Section 2
Examines the basics of application whitelisting.

## Section 3
Explains planning and implementation for application whitelisting technologies throughout the security deployment lifecycle.

## Appendix A
Provides a mapping to existing standards and guidelines that support using application whitelisting technologies.

## Appendix B
Discusses considerations involved in applying application whitelisting technologies to mobile platforms.

## Appendix C
Defines selected acronyms and abbreviations used in the document.

## Appendix D
Provides a bibliography for the publication.

# 2. The Basics of Application Whitelisting

A whitelist is a list of discrete entities, such as hosts, email addresses, network port numbers, runtime processes, or applications that are authorized to be present or active on a system according to a well-defined baseline. A blacklist is a list of discrete entities that have been previously determined to be associated with malicious activity. A graylist is a list of discrete entities that have not yet been established as benign or malicious; more information is needed to move graylist items onto a whitelist or a blacklist.

Whitelists, blacklists, and graylists are primarily used as a form of access control: permitting activity corresponding to the whitelist and not permitting activity corresponding to the blacklist. Graylist treatment depends on the type of entities it contains. An example of how a graylist might be handled is prompting the user to make a decision or notifying an administrator that the entity needs to have its security evaluated before use.

An application whitelist is a list of applications and application components (libraries, configuration files, etc.) that are authorized to be present or active on a host according to a well-defined baseline. The technologies used to enforce application whitelists—to control which applications are permitted to be installed or executed on a host—are called whitelisting programs, application control programs, or application whitelisting technologies. Application whitelisting technologies are intended to stop the execution of malware and other unauthorized software. Unlike security technologies such as antivirus software, which use blacklists to block known bad activity and permit all other, application whitelisting technologies are designed to permit known good activity and block all other.

This section examines the basics of application whitelisting. It first discusses the categories of threats that application whitelisting can mitigate and the types of application whitelisting. Next, it defines the types of operational runtime modes available for application whitelisting technologies. The section also explains the motivations for application whitelisting and discusses uses of application whitelisting technologies other than application access control. Finally, the section concludes by examining differences in deployment based on operational environment, as well as considerations for evaluating the relative effectiveness of application whitelisting solutions.

## 2.1 Threats
As previously discussed, application whitelisting software prevents installation and/or execution of any application that is not specifically authorized for use on a particular host.# Application Whitelisting and Threat Mitigation

## Overview
Application whitelisting is a security measure that mitigates multiple categories of threats, including malware and other unauthorized software.

### Malware
Malware, also known as malicious code, refers to an application that is covertly inserted into another piece of software (e.g., operating system, application) with the intent to:
- Steal or destroy data
- Run destructive or intrusive programs
- Compromise the confidentiality, integrity, or availability of the victim’s data, applications, or operating system

Many of today’s threats are malware-based, attempting to infect hosts (install their malicious code) and execute on those hosts to steal their data or perform other harmful activities.

When properly configured, application whitelisting technologies can stop most malware from being executed (and often from being installed in the first place). These technologies can be significantly more effective at stopping unknown malware threats than conventional antivirus software and other traditional antimalware security controls. This is crucial because today’s malware threats are increasingly customized and targeted, making traditional detection technologies largely ineffective.

### Other Unauthorized Software
The other major category of threats that application whitelisting technology can mitigate is other unauthorized software (unauthorized software besides malware). This software can pose multiple problems, such as:
- Introducing unmanaged vulnerable software into the environment, which can then be exploited by attackers
- Legal issues with the installation of unauthorized software, such as violations of licensing agreements

## Application Whitelisting in Practice
Application whitelisting is most readily used to stop threats on managed hosts where users are not able to install or run applications without authorization.

### Examples
- **Kiosk Workstation**: Users are limited to running a web browser; installation and execution of all applications other than the selected web browser and authorized application-based security controls (such as antivirus software) would be prohibited.
- **Laptops**: Laptops that have all authorized applications preinstalled for the user, where the user does not have the administrative privileges necessary to install additional applications or disable the application whitelisting software.
- **Servers**: Application whitelisting may also be beneficial on servers, particularly if there is concern about malware spreading to these servers from other hosts (e.g., administrator laptops).

## Types of Application Whitelisting
This section discusses the types of application whitelisting, including the application file and folder attributes that can be analyzed, the types of application resources handled (such as executables, libraries, and scripts), and techniques for whitelist generation.

### File and Folder Attributes
Application whitelisting can be based on a variety of application file and folder attributes, including the following:
- **File Path**: This is the most general attribute, permitting all applications contained within a particular path (directory/folder). Used by itself, this is a very weak attribute, as it allows any malicious software within that path to execute.# File Whitelisting Attributes

## Overview
File whitelisting is a security measure that allows only approved applications to run on a system. Various attributes can be used to define which files are permitted. Below are some key attributes and their implications.

## Attributes

### Path
- **Description**: The directory path where files are placed for execution.
- **Strengths**:
- Reduces the need to list each file separately.
- Stronger when combined with strict access controls that limit file modifications to authorized administrators.

### Filename
- **Description**: The name of an application file.
- **Weaknesses**:
- Too general to be effective on its own.
- An infected or replaced file would retain its name, allowing it to execute under the whitelist.
- Attackers can use the same name as benign files for malicious files.
- **Recommendations**:
- Should be paired with other attributes for stronger security.
- Combining with path and filename attributes or digital signature attributes is advisable.

### File Size
- **Description**: The size of the application file.
- **Limitations**:
- Typically used in combination with other attributes.
- Assumes malicious versions will differ in size, but attackers can match file sizes.
- **Recommendations**:
- Use digital signatures and cryptographic hashes for better identification instead of relying on file size.

### Digital Signature or Publisher
- **Description**: Application files are often digitally signed by their publishers.
- **Strengths**:
- Provides a reliable, unique value for verification.
- **Limitations**:
- Many files are not signed, making this attribute less feasible on its own.
- Relying solely on publisher identity can lead to executing older, vulnerable software versions.
- **Recommendations**:
- Whitelists can be based on publisher identities, requiring updates only for new publishers or signature key changes.

### Cryptographic Hash
- **Description**: A unique value for an application file, provided the cryptography is strong.
- **Strengths**:
- Accurate regardless of file name, location, or signature.
- **Limitations**:
- Not useful when a file is updated, as the hash will change.

## Conclusion
When implementing file whitelisting, it is crucial to combine multiple attributes to enhance security. Relying on a single attribute can lead to vulnerabilities, so a comprehensive approach is recommended.# Application Whitelisting

## 1. Introduction
Application whitelisting is a security measure that allows only approved applications to run on a system. This document discusses the importance of maintaining an up-to-date whitelist and the attributes that should be considered for effective application whitelisting.

## 2. Key Considerations

### 2.1 Importance of Continuous Updates
- The patched version of an application will have a different hash.
- Patches should be verified through their digital signature.
- New cryptographic hashes must be added to the whitelist.
- Failure to update the whitelist can lead to:
- Software malfunctioning.
- Vulnerable software being allowed to run.

### 2.2 Choosing Attributes
- Selecting attributes involves balancing security, maintainability, and usability.
- Simpler attributes (file path, filename, file size) should not be used alone without strict access controls.
- Pairing attributes with others enhances security.
- A combination of digital signature/publisher and cryptographic hash is recommended for comprehensive whitelisting.

## 3. Application Resources

### 3.1 Monitoring Capabilities
- Application whitelisting primarily focuses on executables but can also monitor:
- Libraries
- Scripts
- Macros
- Browser plug-ins (add-ons/extensions)
- Configuration files
- Application-related registry entries (on Windows)
- The granularity of monitoring varies:
- Some technologies can block whole classes of scripts (e.g., JavaScript).
- Others can permit or block individual scripts.

## 4. Whitelist Generation and Maintenance

### 4.1 Methods of Generation
There are two primary methods for generating an application whitelist:

1. **Vendor-Provided Information**:
- Use characteristics of known good applications from vendors.
- Supplement with organization-specific application information (in-house custom applications).

2. **Scanning Clean Hosts**:
- Build a known good baseline by scanning files on a clean host.

### 4.2 Challenges with Updates
- Both methods are effective but face challenges when applications are updated or new applications are installed:
- Vendors must acquire and record characteristics of patches or new applications.
- Organizations must update their whitelists or redo their known good baseline.
- Quick patch application can lead to delays, as patched software may be flagged as unknown and prohibited from running.

### 4.3 Attributes Stability
- Certain attributes, such as file path and publisher, generally remain unchanged with each update.# Application Whitelisting Technologies

## Introduction
The primary purpose of application whitelisting technologies is to enhance security by allowing only approved applications to run on a system.

## Maintenance Options
To avoid problems with updates, most application whitelisting technologies offer maintenance options. For example, many technologies allow the administrator to select certain services (e.g., patch management software) to be trusted updaters. This means that any files they add to or modify on a host are automatically added to the whitelist. Similar options are available for designating trusted publishers (i.e., software vendors), users (e.g., system administrators), sources (e.g., trusted network paths), and other trusted entities that may update whitelists.

## Reputation Services
Another option available with some application whitelisting technologies is the use of reputation services. These services determine if a service, publisher, or other external entity is generally associated with benign or malicious content. This allows application whitelisting software to make decisions about how to handle new or modified files based on the reputation of the associated service, publisher, etc., instead of simply adding them to a graylist for subsequent manual processing.

## Application Whitelisting Modes
Most application whitelisting technologies offer two operational runtime modes:

### Audit Mode
- Allows items, including those not on the whitelist, to be executed and logs their execution.
- This mode provides data for continuous monitoring processes to analyze.

### Enforcement Mode
- Automatically permits execution of whitelisted items and/or blocks execution of blacklisted items.
- There are different forms of enforcement mode, which are differentiated by how they handle items that are not whitelisted or blacklisted. These forms include:
- **Whitelist Enforcement**: Permits only whitelist items to be executed and blocks execution of all others.
- **User Prompting**: Asks the user (or, in some cases, the administrator) to accept or reject each attempt to execute a file that is not whitelisted or blacklisted.
- **Blacklist Enforcement**: Blocks execution of blacklisted items but allows everything else to be executed.

An application whitelisting technology run in audit mode is strictly informative; it can log the execution of malware and other unauthorized executables, but it cannot do anything to stop them. Audit mode is primarily intended for use when first deploying an application whitelisting technology, to help an organization evaluate and fine-tune the technology before switching it to enforcement mode.

Many application whitelisting technologies have granular options for setting modes. Some features could be configured to run in enforcement mode while other features run in audit mode. For example, Windows registry changes might be permitted (audit mode) while operating system file changes would be prohibited (enforcement mode). Some products also support multiple enforcement modes and allow granular setting of those for different types of monitored entities.

## Uses of Application Whitelisting Technologies
As stated in the Section 2 introduction, the primary purpose of application whitelisting technologies is to...# Application Access Control and Whitelisting Technologies

Application access control is essential for stopping the execution of unauthorized software. However, most application whitelisting technologies can serve additional purposes, including:

## Software Inventory
Application whitelisting technologies can maintain an inventory of the applications and application versions installed on each host. This capability allows organizations to:
- Identify unauthorized applications (unlicensed, prohibited, etc.)
- Detect "wrong" versions of software (both too old and too new)
- Assist in forensic investigations by finding modified applications, unauthorized applications, malware, and unknown applications on a given host.

## File Integrity Monitoring
Most application whitelisting technologies can perform frequent or continuous monitoring of attempted changes to application files. Some technologies can:
- Prevent files from being changed
- Report immediately when changes occur

## Incident Response
When responding to an incident on a host, an organization can capture the characteristics of malicious files (e.g., generate cryptographic file hashes) and use application whitelisting technologies to check other hosts for the same files, indicating potential compromises.

## Additional Capabilities of Application Whitelisting Technologies
Some application whitelisting technologies may offer additional functionalities, including:

- **Access Control for Portable Storage Devices**: This includes restricting file reads, writes, and executes for all files on removable media, permitting only the use of encrypted devices, and allowing only drives with specific serial numbers.

- **Memory Protection**: Primarily aimed at stopping certain attacks (e.g., buffer overflows) that affect files in memory rather than files in storage. Most application whitelisting technologies focus on files in storage and do not ensure that files in memory are not altered or exploited.

- **Software Reputation Services**: These services review what other software a particular application is often bundled with and determine if an application poses a substantial security risk.

- **Anti-Malware Technology Integration**: This involves identifying known malicious content by running graylisted files through an online scanner with multiple antivirus scanning engines or other types of malware analysis products. Such products can inform application whitelisting decision-making processes.

# Operational Environment Differences

As discussed in NIST SP 800-70 Revision 2, National Checklist Program for IT Products—Guidelines for Checklist Users and Developers, there are significant differences among operational environments. These differences are crucial for selecting and deploying application whitelisting technologies. The major categories of operational environments are as follows:

## Standalone
Also referred to as Small Office/Home Office (SOHO), a Standalone environment refers to a small, informal computer installation used for home or small office purposes.# Business Environments and Application Whitelisting

## 1. Business Environments

### 1.1 Standalone Environment
Standalone environment hosts are generally not managed remotely for technical and business (economic) reasons. These environments are typically the least secured.

### 1.2 Managed Environment
The Managed environment, also known as the Enterprise environment, typically contains large organizational systems with defined suites of hardware and software configurations. This environment usually consists of centrally managed IT products (e.g., workstations and servers). The managed nature of these environments gives administrators centralized control over various settings on IT products. Due to the supported and largely homogeneous nature of the Managed environment, it is typically easier to use more functionally restrictive settings than in Standalone environments.

### 1.3 Specialized Security-Limited Functionality (Custom)
A Custom environment contains systems in which the functionality and degree of security do not fit the Standalone or Managed environments. Specialized Security-Limited Functionality (SSLF) is a Custom environment that is highly restrictive and secure; it is usually reserved for hosts that have the highest threats and associated impacts. Because hosts in an SSLF environment are at high risk of attack or data exposure, security takes high precedence over functionality.

## 2. Evaluating Application Whitelisting Solutions

The first step in evaluating the possibility of deploying an application whitelisting solution should be an analysis of the environment or environments in which the hosts will be running. Generally, it is not feasible to implement whitelisting on Standalone environment hosts because of the lack of centralized management.

Application whitelisting solutions are generally strongly recommended for hosts in SSLF environments due to the high risks they face. Suitability for Managed environments depends on how tightly the hosts are managed and the extent of the risks they face. Organizations considering application whitelisting deployment in a Managed environment should perform a risk assessment to determine whether the security benefits provided by application whitelisting outweigh its possible negative impact on operations.

Organizations should also be mindful that they will need dedicated staff managing and maintaining the application whitelisting solution, similar to handling an enterprise antivirus or intrusion detection solution.

Once it has been determined that application whitelisting technologies are merited for a particular environment, the next step is to consider which technologies might be feasible. Organizations should consider application whitelisting technologies already built into the operating system, particularly for centrally managed hosts (e.g., desktops, laptops, servers), because of the relative ease and minimal additional cost in managing these solutions. If built-in application whitelisting capabilities are not available or are determined to be unsuitable, then the alternative is to examine third-party solutions with robust centralized management capabilities. An organization that can dedicate the necessary trained staff will be better positioned to implement these solutions effectively.# Application Whitelisting Technology

## Introduction
Application whitelisting is a security measure that allows only approved applications to run on a system. This document outlines the considerations for implementing application whitelisting technology effectively.

## 1. Monitoring Mode
Organizations should generally implement application whitelisting at least in a monitoring mode. It is highly recommended to test any prospective application whitelisting technology in this mode to evaluate its behavior before deployment.

### 1.1 Testing Considerations
Testing should include a thorough evaluation of how the solution reacts to changes in software, such as installing updates. An application whitelisting technology might be considered unsuitable if it needs to be disabled to install security updates for the operating system or specific applications.

## 2. Additional Considerations
This section describes additional considerations that organizations should examine when evaluating the likely effectiveness of potential application whitelisting technology solutions.

## 3. Application Whitelisting Planning and Implementation
This section discusses considerations for planning and implementing application whitelisting technologies for end-user devices.

### 3.1 Phased Approach
As with any new technology deployment, application whitelisting technology planning and implementation should be addressed in a phased approach. A successful deployment can be achieved by following a clear, step-by-step planning and implementation process.

The use of a phased approach for deployment can minimize unforeseen issues and identify potential pitfalls early in the process. This model also allows for incorporating advances in new technology and adapting the technology to the ever-changing enterprise.

### 3.2 Planning and Implementation Phases
The following is an example of planning and implementation phases:

1. **Initiate the Solution**: Identify current and future needs for application whitelisting; specify requirements for performance, functionality, and security; and develop necessary policies.

2. **Design the Solution**: Involve all facets of designing the application whitelisting solution, including architectural considerations, whitelist management, cryptography policy, and security aspects of the solution itself.

3. **Implement and Test a Prototype**: Implement and test a prototype of the designed solution in a lab or test environment. The primary goals of the testing are to evaluate the functionality, management, performance, and security of the solution.

4. **Deploy the Solution**: Once testing is completed and all issues are resolved, gradually deploy the application whitelisting technology throughout the enterprise.

5. **Manage the Solution**: After deployment, manage the solution throughout its lifecycle. Management includes solution maintenance and support for operational issues. The lifecycle process is repeated when enhancements or significant changes need to be incorporated into the solution.

## Conclusion
This document does not describe the planning and implementation process in depth because the same basic steps are performed for any security technology. This section only highlights those considerations necessary for effective application whitelisting technology deployment.# Application Whitelisting Technologies

## Introduction
This document outlines considerations for application whitelisting technologies. It is not intended to be comprehensive, nor does it imply that security elements not listed are unimportant. Organizations implementing application whitelisting should also follow the recommendations from NIST Special Publication (SP) 800-53 Revision 4, which defines minimum recommended management, operational, and technical controls for information systems based on impact categories.

## 3.1 Initiation
The purpose of this phase is to identify the current and future needs for application whitelisting and to determine how those needs can best be met. Requirements specific to application whitelisting that should be considered include the following:

### External Requirements
- The organization may be subject to oversight or review by another organization that requires application whitelisting.

### System and Network Environments
It is important to understand the characteristics of the organization’s system and network environments to select compatible application whitelisting solutions with the necessary functionality. Aspects to consider include:
- Characteristics of the devices that need application whitelisting, especially the operating systems (OSs) and applications.
- Technical attributes of the interfaces of other systems with which the application whitelisting solution might be integrated, such as centralized logging servers and security information and event management (SIEM) software.

### Outcomes of Requirements Analysis
The outcome of the organization’s requirements analysis should be:
- A determination of the types of applications or application components (executables, libraries, registry entries, configuration files, etc.) that need to be monitored.
- The types of threats the application whitelisting should protect against (see Section 2.1).
- The types of application whitelisting that should be used to balance security, usability, and maintainability (see Section 2.2).

For example, the organization may decide to block execution of all unauthorized application components on higher-risk client systems while monitoring (but not blocking) execution of unauthorized application components on lower-risk client systems. These decisions should be captured in policy.

### Documentation of Requirements
Another outcome of the analysis is the documentation of the requirements for the application whitelisting technologies themselves, including:
- Security capabilities (e.g., authentication, cryptography, key management).
- Performance requirements.
- Management requirements (including reliability, interoperability, and scalability).
- The security of the technology itself.
- Usability.
- Maintenance requirements (e.g., applying updates).

In many cases, a single application whitelisting product cannot meet all of the organization’s identified needs. For example, the organization may need to monitor applications on devices.# Application Whitelisting Challenges and Solutions

## Overview
Running several different operating systems (OSs) presents challenges for application whitelisting. No single product can effectively work across all platforms, and some operating systems may have built-in application whitelisting technologies. Organizations can address these challenges in various ways, such as acquiring multiple products or replacing older devices.

## Identifying Effective Solutions
Organizations should ensure that effective solutions are identified for all types of end-user devices that require application monitoring. If certain cases cannot be addressed by the identified solutions, a waiver and risk management process should be established.

## Challenging Platforms for Application Whitelisting

### Mobile Devices
Mobile devices present unique challenges for application whitelisting. While they allow for the easy, quick, and often free acquisition of a wide variety of applications, this flexibility makes it difficult to implement whitelisting.

- **Managed vs. Unmanaged Devices**: If mobile devices are tightly managed, similar to desktops or laptops, and only allow approved apps from an enterprise-sponsored app store, whitelisting may be practical. However, for user-controlled unmanaged mobile devices, whitelisting may not be feasible.

### Industrial Control Systems (ICS)
Industrial control systems (ICS) are another challenging platform for application whitelisting. Unlike most computing devices, ICSs prioritize availability over confidentiality.

- **Critical Functionality**: It is essential for ICSs to function properly regardless of external factors, including cyber attacks. Application whitelisting can inadvertently block benign applications, so its implementation for ICSs must be carefully analyzed and tested for feasibility.

- **Atypical Platforms**: ICSs often utilize atypical platforms that may not be supported by standard application whitelisting solutions. However, since ICSs are designed for specific functionalities and run only certain software, they can sometimes be easier to whitelist than more dynamic environments.

## Design Considerations for Application Whitelisting
Once the needs have been identified and appropriate application whitelisting technologies selected, the next phase is to design a solution that meets those needs. Incorrect design decisions can lead to increased susceptibility to compromise and failure. Key aspects of solution design include:

### Cryptography
Cryptography plays a crucial role in application whitelisting technologies in at least three ways:

1. **Generating and Verifying Hashes**: Used for files and other application components.
2. **Validating Digital Signatures**: Ensures the authenticity of files.
3. **Protecting Communications**: Safeguards the confidentiality and integrity of communications between individual hosts and centralized management (e.g., encrypting lists of installed applications and their versions).

For all cryptographic functions, federal agencies must utilize Federal Information Processing Standard (FIPS) approved or NIST-recommended algorithms contained in validated cryptographic modules. Organizations should consider the ease of implementation for these cryptographic measures.# Application Whitelisting Technology

## Solution Architecture
The architecture of the application whitelisting technology refers to the selection of devices and software to provide application whitelisting services and the placement of centralized elements within the existing network infrastructure, such as management servers. Most application whitelisting technologies can only operate as a centrally managed solution; there may be copies of whitelists on individual hosts, but enterprise management is centralized. Each end user device must have software that provides application whitelisting enforcement or auditing. Designing the architecture includes component placement, redundancy, reliability, and interoperability.

## Whitelist Management
As discussed in Section 2.2.3, whitelist management can involve the establishment of trusted publishers, users, updaters, etc. Organizations should choose these trusted entities carefully because a compromise in a trusted entity could lead to the compromise of the application whitelisting technology, and consequently to the hosts it protects. However, failure to identify necessary entities as trusted will likely lead to operational problems, such as when files updated by patch installation are not automatically trusted by the application whitelisting technology.

## Prototype Testing
After the solution has been designed, the next step is to implement and test a prototype of the design. Ideally, implementation and testing should first be performed on lab or test devices. Only solutions in the final phase of testing should be implemented on production devices. Aspects of the prototype solution that require evaluation include the following:

### Application Control Functionality
Basic functionality will need to be checked during the prototype testing. Examples include allowing the execution of whitelisted applications, blocking the execution of blacklisted applications, and detecting modifications to whitelisted applications. These functions should be verified by installing patches and other updates, manually modifying executables, and making other changes to applications to confirm that the application control policies can be properly enforced and cannot be easily circumvented.

### Management
Administrators should be able to configure and manage all components of the solution effectively and securely. It is particularly important to evaluate the ease of deployment and configuration, including how easily the solution can be managed as the solution is scaled to larger deployments. Management concerns should include the effects of patching/upgrading the application whitelisting software, changing software settings (e.g., changing cryptographic algorithms or key sizes), and managing cryptographic keys. Another important management concern that needs special attention is whitelist generation and maintenance, such as how the whitelists accommodate software patching.

### Logging/Alerting
The logging, alerting, and data management functions should work properly in the prototype testing phase.# Application Whitelisting Implementation Guide

## 1. Introduction
This document outlines the key considerations and phases involved in the implementation of application whitelisting technology within an organization.

## 2. Key Considerations

### 2.1 Performance
The solution should be able to provide adequate performance during both normal and peak usage. Testing should incorporate a variety of devices, operating systems (OSs), and applications.

### 2.2 Security of the Implementation
The application whitelisting technology itself may contain vulnerabilities and weaknesses that attackers could exploit. Organizations with high security needs may want to perform extensive vulnerability assessments against the application whitelisting components.

Before installing application whitelisting software on a host, organizations should:
- Scan the host for malware.
- Remove any detected malware or rebuild the host.

The scan will ensure that malware files are not included in the whitelist generation process. Organizations should also ensure that the host’s OS is secured properly, including:
- Being fully patched.
- Having other necessary security controls installed and configured properly.

If the OS is not secured properly, the host is more likely to be compromised, which could weaken the protection provided by the application whitelisting technology.

## 3. Deployment

Once testing is complete and any issues have been resolved, the next phase of the planning and implementation model involves deploying the solution. When deploying components into production, organizations should initially use application whitelisting on a small number of hosts.

### 3.1 Phased Deployment
Deploying to many hosts at once might overwhelm the management servers or identify other bottlenecks through loss of availability. Many of the problems that occur are likely to occur on multiple hosts, so it is helpful to identify such problems either during the testing process or when deploying the first hosts.

A phased deployment provides administrators an opportunity to:
- Evaluate the impact of the solution.
- Resolve issues prior to enterprise-wide deployment.
- Train IT staff (e.g., system administrators, help desk) and users to become accustomed to the operational lifecycle of the implementation.

### 3.2 Common Issues
Most of the issues that can occur during deployment are similar to those that occur during any large IT deployment. In addition to potential problems described earlier, another typical issue is end users discovering and disabling the application whitelisting software. Many products run in a stealth mode so that users cannot readily tell that they are running.

## 4. Management

The last phase of the planning and implementation model is the longest lasting. Managing the solution involves operating the deployed solution and maintaining the application whitelisting architecture, policies, software, and other solution components.

### 4.1 Typical Management Actions
Examples of typical actions include:
- Updating the whitelist to include new or updated applications.
- Testing and applying patches to the application whitelisting software.
- Deploying application whitelisting to additional platforms.
- Performing key management duties.
- Adapting policies as requirements change.
- Monitoring the components for operational and security issues.# Application Whitelisting Best Practices

## Regular Testing
- Periodically performing testing to ensure that application whitelisting is functioning properly.
- Performing regular vulnerability assessments.

## Ongoing Whitelist Updates
Organizations should pay particular attention to the ongoing whitelist updates. Although many, if not most, whitelist updates can be automated, administrators should be prepared to make manual updates quickly when needed, in order to identify emerging threats and correct false positives or negatives.

## Monitoring Graylists
Organizations should also monitor any graylists and transfer their entries to whitelists or blacklists, as appropriate.