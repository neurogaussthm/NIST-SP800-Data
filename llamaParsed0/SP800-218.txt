# Secure Software Development Framework (SSDF)

## Abstract
Few software development life cycle (SDLC) models explicitly address software security in detail, so secure software development practices usually need to be added to each SDLC model to ensure that the software being developed is well-secured. This document recommends the Secure Software Development Framework (SSDF) – a core set of high-level secure software development practices that can be integrated into each SDLC implementation. Following such practices should help software producers reduce the number of vulnerabilities in released software, reduce the potential impact of the exploitation of undetected or unaddressed vulnerabilities, and address the root causes of vulnerabilities to prevent future recurrences. Because the framework provides a common vocabulary for secure software development, software acquirers can also use it to foster communications with suppliers in acquisition processes and other management activities.

## Executive Summary
This document describes a set of fundamental, sound practices for secure software development called the Secure Software Development Framework (SSDF). Organizations should integrate the SSDF throughout their existing software development practices, express their secure software development requirements to third-party suppliers using SSDF conventions, and acquire software that meets the practices described in the SSDF. Using the SSDF helps organizations to meet the following secure software development recommendations:

- Organizations should ensure that their people, processes, and technology are prepared to perform secure software development.
- Organizations should protect all components of their software from tampering and unauthorized access.
- Organizations should produce well-secured software with minimal security vulnerabilities in its releases.
- Organizations should identify residual vulnerabilities in their software releases and respond appropriately to address those vulnerabilities and prevent similar ones from occurring in the future.

The SSDF does not prescribe how to implement each practice. The focus is on the outcomes of the practices rather than on the tools, techniques, and mechanisms to do so. This means that the SSDF can be used by organizations in any sector or community, regardless of size or cybersecurity sophistication. It can also be used for any type of software development, regardless of technology, platform, programming language, or operating environment.

The SSDF defines only a high-level subset of what organizations may need to do, so organizations should consult the references and other resources for additional information on implementing the practices. Not all practices are applicable to all use cases; organizations should adopt a risk-based approach to determine what practices are relevant, appropriate, and effective.# Mitigating Threats to Software Development Practices

Organizations can communicate how they are addressing the clauses from Section 4 of the President’s Executive Order (EO) on “Improving the Nation’s Cybersecurity (14028)” by referencing the SSDF practices and tasks described in Appendix A.

## 1. Introduction

A software development life cycle (SDLC) is a formal or informal methodology for designing, creating, and maintaining software (including code built into hardware). There are many models for SDLCs, including waterfall, spiral, agile, and – in particular – agile combined with software development and IT operations (DevOps) practices.

Few SDLC models explicitly address software security in detail, so secure software development practices usually need to be added to and integrated into each SDLC model. Regardless of which SDLC model is used, secure software development practices should be integrated throughout it for three reasons:

1. To reduce the number of vulnerabilities in released software.
2. To reduce the potential impact of the exploitation of undetected or unaddressed vulnerabilities.
3. To address the root causes of vulnerabilities to prevent recurrences.

Vulnerabilities include not just bugs caused by coding flaws, but also weaknesses caused by security configuration settings, incorrect trust assumptions, and outdated risk analysis. [IR7864]

Most aspects of security can be addressed multiple times within an SDLC, but in general, the earlier in the SDLC that security is addressed, the less effort and cost is ultimately required to achieve the same level of security. This principle, known as **shifting left**, is critically important regardless of the SDLC model. Shifting left minimizes any technical debt that would require remediating early security flaws late in development or after the software is in production. Shifting left can also result in software with stronger security and resiliency.

There are many existing documents on secure software development practices, including those listed in the References section. This document does not introduce new practices or define new terminology. Instead, it describes a set of high-level practices based on established standards, guidance, and secure software development practice documents. These practices, collectively called the **Secure Software Development Framework (SSDF)**, are intended to help the target audiences achieve secure software development objectives. Many of the practices directly involve the software itself, while others indirectly involve it (e.g., securing the development environment).

Future work may expand on this publication and potentially cover topics such as how the SSDF may apply to and vary for particular software development methodologies and associated practices like DevOps, how an organization can transition from their current software development practices to also incorporating the SSDF practices, and how the SSDF could be...# Secure Software Development Practices

## Introduction
This document identifies secure software development practices but does not prescribe how to implement them. The focus is on the outcomes of the practices to be implemented rather than on the tools, techniques, and mechanisms used to do so.

## Advantages of High-Level Specification
Specifying the practices at a high level offers several advantages:

- **Broad Applicability**: Can be used by organizations in any sector or community, regardless of size or cybersecurity sophistication.
- **Versatile Application**: Can be applied to software developed to support information technology (IT), industrial control systems (ICS), cyber-physical systems (CPS), or the Internet of Things (IoT).
- **Integration**: Can be integrated into any existing software development workflow and automated toolchain; should not negatively affect organizations that already have robust secure software development practices in place.
- **Technology Agnostic**: Makes the practices broadly applicable, not specific to particular technologies, platforms, programming languages, SDLC models, development environments, operating environments, tools, etc.
- **Documentation and Improvement**: Can help an organization document its secure software development practices today and define its future target practices as part of its continuous improvement process.
- **Transition Support**: Can assist an organization currently using a classic software development model in transitioning its secure software development practices for use with a modern software development model (e.g., agile, DevOps).
- **Supplier Understanding**: Can assist organizations that are procuring and using software to understand secure software development practices employed by their suppliers.

## Common Language for Secure Software Development
This document provides a common language to describe fundamental secure software development practices. This is similar to the approach taken by the Framework for Improving Critical Infrastructure Cybersecurity, also known as the NIST Cybersecurity Framework [NISTCSF].

### Accessibility
Expertise in secure software development is not required to understand the practices. The common language helps facilitate communications about secure software practices among both internal and external organizational stakeholders, such as:

- **Internal Stakeholders**: Business owners, software developers, project managers and leads, cybersecurity professionals, and operations and platform engineers within an organization who need to clearly communicate with each other about secure software development.
- **External Stakeholders**: Software acquirers, including federal agencies and other organizations, that want to define required or desired characteristics for software in their acquisition processes in order to have higher-quality software (particularly with fewer significant security vulnerabilities).
- **Software Producers**: Commercial-off-the-shelf (COTS) product vendors, government-off-the-shelf (GOTS) software developers, and software developers working in various capacities.# Secure Software Development Framework (SSDF) Version 1.1

## Introduction
This document is intended for software acquirer organizations that wish to integrate secure software development practices throughout their Software Development Life Cycles (SDLCs). It aims to help organizations express their secure software practices to customers and define requirements for their suppliers.

## Unique Security Objectives
The practices outlined in this document do not assume that all organizations have the same security objectives and priorities. Instead, they reflect the understanding that:

- Each software producer may have unique security assumptions.
- Each software acquirer may have unique security needs and requirements.

While the goal is for each software producer to follow all applicable practices, the expectation is that the degree of implementation and the formality of the implementation will vary based on the producer’s security assumptions.

## Flexibility and Clarity
The practices provide flexibility for implementers while also being clear enough to avoid excessive interpretation.

### Relevance of Practices
Most practices are relevant to any software development effort; however, some may not apply in specific contexts. For instance, if a particular piece of software does not involve using a compiler, there would be no need to follow practices related to compiler configuration for improving executable security.

### Foundational vs. Advanced Practices
- Some practices are foundational, while others are more advanced and depend on certain foundational practices being in place.
- Not all practices hold equal importance in every case.

## Considerations for Implementation
When deciding which practices to use and how much time and resources to allocate to each, consider the following factors:

- **Risk**
- **Cost**
- **Feasibility**
- **Applicability**
- **Automatability** (especially for implementing practices at scale)

The practices, tasks, and implementation examples provided in this document serve as a starting point. They are meant to be customized and are not prioritized. Any stated frequency for performing practices is notional.

## Purpose of the SSDF
The intention of the SSDF is not to create a checklist to follow but to provide a basis for planning and implementing a risk-based approach to adopting secure software development practices.

## Shared Responsibility Model
The responsibility for implementing the practices may be distributed among different organizations based on the delivery of software and services (e.g., Infrastructure as a Service, Software as a Service, Platform as a Service, Container as a Service, Serverless).

In these scenarios, a shared responsibility model typically applies, involving both platform/service providers and the tenant organization consuming those platforms/services. The tenant organization should establish an agreement with the providers that specifies:

- Which party is responsible for each practice and task.
- How each provider will attest to their conformance with the agreement.

## Conclusion
This document defines version 1.1 of the Secure Software Development Framework (SSDF) with fundamental, sound, and secure recommended practices based on established principles.# Secure Software Development Practices

The practices are organized into four groups:

## 1. Prepare the Organization (PO)
Organizations should ensure that their people, processes, and technology are prepared to perform secure software development at the organization level. Many organizations will find some PO practices to also be applicable to subsets of their software development, like individual development groups or projects.

## 2. Protect the Software (PS)
Organizations should protect all components of their software from tampering and unauthorized access.

## 3. Produce Well-Secured Software (PW)
Organizations should produce well-secured software with minimal security vulnerabilities in its releases.

## 4. Respond to Vulnerabilities (RV)
Organizations should identify residual vulnerabilities in their software releases and respond appropriately to address those vulnerabilities and prevent similar ones from occurring in the future.

### Each practice definition includes the following elements:
- **Practice**: The name of the practice and a unique identifier, followed by a brief explanation of what the practice is and why it is beneficial.
- **Tasks**: One or more actions that may be needed to perform a practice.
- **Notional Implementation Examples**: One or more notional examples of types of tools, processes, or other methods that could be used to help implement a task. No examples or combination of examples are required, and the stated examples are not the only feasible options. Some examples may not be applicable to certain organizations and situations.
- **References**: Pointers to one or more established secure development practice documents and their mappings to a particular task. Not all references will apply to all instances of software development.

### Additional Information
Table 1 defines the practices. They are only a subset of what an organization may need to do. The information in the table is space constrained; much more information on each practice can be found in the references. Note that the order of the practices, tasks, and notional implementation examples in the table is not intended to imply the sequence of implementation or the relative importance of any practice, task, or example.

The table uses terms like “sensitive data,” “qualified person,” and “well-secured,” which are not defined in this publication. Organizations adopting the SSDF should define these terms in the context of their own environments and use cases. The same is true for the names of environments, like “development,” “build,” “staging,” “integration,” “test,” “production,” and “distribution,” which vary widely among organizations and projects. Enumerating your environments is necessary in order to secure them properly, and especially to prevent lateral movement of attackers from environment to environment.