# Cloud Access Control Characteristics and Guidance

## Abstract
This document presents cloud access control characteristics and a set of general access control guidance for cloud service models: IaaS (Infrastructure as a Service), PaaS (Platform as a Service), and SaaS (Software as a Service). Different service delivery models require managing different types of access on offered service components. Such service models can be considered hierarchical, thus the access control guidance of functional components in a lower-level service model are also applicable to the same functional components in a higher-level service model. In general, access control guidance for IaaS is also applicable to PaaS and SaaS, and access control guidance for IaaS and PaaS is also applicable to SaaS. However, each service model has its own focus with regard to access control requirements for its service.

## Executive Summary
Cloud systems have been developed over time and conceptualized through a combination of software, hardware components, and virtualization technologies. Characteristics of the cloud, such as resource pooling, rapid elasticity, and pay-as-you-go services, accelerated its wide adoption by industry, government, and academia. Specifically, cloud systems offer application services, data storage, data management, networking, and computing resources management to consumers over a network (the internet in general). Despite the great advancements of cloud systems, concerns have been raised about the offered level of security and privacy. The importance of these concerns becomes more evident when considering the increasing number of users who have adopted cloud services.

This document presents cloud access control (AC) characteristics and a set of general access control guidance for cloud service models—IaaS (Infrastructure as a Service), PaaS (Platform as a Service), and SaaS (Software as a Service). The main focus is on technical aspects of access control without considering deployment models (e.g., public, private, hybrid clouds etc.), as well as trust and risk management issues, which require different layers of discussions that depend on the security requirements of the business function or the organization of deployment for which the cloud system is implemented.

Different service delivery models need to consider managing different types of access on offered service components. Such considerations can be hierarchical, such as how the access control considerations of functional components in a lower-level service model (e.g., networking and storage layers in the IaaS model) are also applicable to the same functional components in a higher-level service model (e.g., networking and storage in PaaS and SaaS models). In general, access control considerations for IaaS are also applicable to PaaS and SaaS, and access control considerations for IaaS and PaaS are also applicable to SaaS. Therefore, AC guidance for IaaS is applicable to PaaS and SaaS, and AC guidance for IaaS and PaaS is also applicable to SaaS.# Access Control Guidance for Cloud Service Models

## 1. Introduction

### 1.1 Purpose
Access control (AC) dictates how subjects (i.e., users and processes) can access objects based on defined AC policies to protect sensitive data and critical computing objects in cloud systems. Considering the heterogeneity and remote nature of the cloud service models, AC and its general concepts should be revisited. In recent years, many works have focused on AC in cloud systems [23, 25, 26, 27]. However, these are primarily ad hoc solutions targeted at specific cloud applications and do not provide comprehensive views of cloud AC.

This document presents a set of general AC guidance for cloud service models independent from its deployment models because it requires another layer of access control that depends on the security requirements of the business function for which the cloud system is used.

As shown in Figure 3, different cloud service models require the management of access to different components of the offered service. Since such cloud service models can be considered hierarchical, the AC considerations of functional components in a lower-level (according to Figure 2) service model (e.g., networking and storage layers in the Infrastructure as a Service (IaaS) model) are also applicable to the same functional components in a higher-level service model (e.g., networking and storage in Platform as a Service (PaaS) and Software as a Service (SaaS) models).

In general, AC considerations for IaaS are also applicable to PaaS and SaaS, and AC considerations for IaaS and PaaS are also applicable to SaaS. Thus, AC guidance for IaaS is applicable to PaaS and SaaS, and AC guidance for IaaS and PaaS is also applicable to SaaS. However, each service model has its own focus with regard to AC. For instance, an IaaS provider may put more effort into virtualization control, and in addition to the virtualization control, a SaaS provider needs to consider data security and the privacy of services it provides.

### 1.2 Scope
This document focuses on providing guidance for access control systems that are applicable to an organization’s cloud implementation and security management. It does not prescribe the internal cloud access control standards that an organization may need in their enterprise systems or within a community other than the organization itself.

### 1.3 Audience
The intended audience for this document is an organizational entity that implements access control solutions for sharing information in cloud systems. This document assumes that readers are familiar with the cloud and access (authorization) control systems and have basic knowledge of operating systems, databases, networking, and security. Given the constantly changing nature of the information technology (IT) industry, readers are strongly encouraged to take advantage of...# Document Overview

## 1.4 Document Structure

The sections and appendix presented in this document are as follows:

- **Section 1**: States the purpose and scope of access control and cloud systems.
- **Section 2**: Provides an overview of cloud access control characteristics.
- **Section 3**: Discusses guidance for access control systems for IaaS (Infrastructure as a Service).
- **Section 4**: Discusses guidance for access control systems for PaaS (Platform as a Service).
- **Section 5**: Discusses guidance for access control systems for SaaS (Software as a Service).
- **Section 6**: Discusses guidance for access control systems for inter- and intra-cloud operations.
- **Section 7**: Concludes the document with future directions.

## 2 Cloud Access Control Characteristics

With the support of different service models, cloud systems can provide a wide range of services to its end-users, developers, and system administrators. Cloud systems have been developed over time and conceptualized through a combination of software, hardware components, and virtualization technologies.

Characteristics of the cloud, such as resource pooling, rapid elasticity, and pay-as-you-go services, have accelerated its wide adoption by industry, government, and academia. Specifically, cloud systems offer application services, data storage, data management, networking, and computing resources management to consumers over a network (and the internet in general).

Examples of popular cloud applications include:

- Web-based email services (e.g., Google’s Gmail, Microsoft’s Office 365 Outlook)
- Data storage (e.g., Google Drive, Microsoft’s OneDrive, Dropbox) for end users
- Consumer relationship management and business intelligence systems (e.g., Customer Relationship Management (CRM) Cloud, Workday) for business management.

Despite the great advancements of cloud systems, concerns have been raised about offered levels of security and privacy. The importance of these concerns becomes more evident when considering the increasing number of users that have adopted cloud services.

NIST publications define cloud computing as “a model for enabling ubiquitous, convenient, on-demand network access to a shared pool of configurable computing resources (e.g., networks, servers, storage, applications, and services) that can be rapidly provisioned and released with minimal management effort or service provider interaction.”

Cloud deployment models (e.g., public cloud, private cloud, community cloud, hybrid cloud, etc.) are configured by the scope of cloud users, services, and resources based on service requirements. They may be deployed privately, hosted on the premises of a cloud consumer or provider’s dedicated infrastructure, or hosted publicly by one or more cloud service providers. The system may be configured and used by one consumer or a group of trusted partners or support multi-tenancy and be used.# Cloud Computing Overview

## Cloud Deployment Models

Cloud computing services are acquired by end users and can vary based on the deployment model. Depending on the type of cloud deployment model, the cloud may have limited private computing resources or access to large quantities of remotely accessed resources. The different deployment models present a number of trade-offs in how consumers can control their resources as well as the scale, cost, and availability of those resources.

### Architecture of a Cloud System

As depicted in Figure 1, the architecture of a cloud system is generally composed of layers of functions:

- **VM (Virtual Machine)**, including:
- Applications
- Application Programming Interface (API)
- Operating System (OS)
- Hypervisor
- Storage
- Networking
- Hardware

## Cloud Service Models

A cloud service can provide access to various service models:

1. **Software as a Service (SaaS)**: Provides access to software applications, such as email or office productivity tools.
2. **Platform as a Service (PaaS)**: Offers an environment for consumers to build and operate their own software.
3. **Infrastructure as a Service (IaaS)**: Provides network access to virtualized computing resources such as processing power and storage.

The different service models have different strengths and are suitable for different consumers and business objectives, as illustrated in Figure 2, where the arrows show the support relations between models.

### SaaS Model

A cloud system that deploys the SaaS model can be accessed over a network by an end user utilizing various client devices (e.g., a thin client interface, such as a web browser, for accessing a web-based email application) or via a program with the correct set of interfaces that enable communication with a cloud application. In the SaaS model, an application user is limited to user-specific application configuration settings and does not manage or control the underlying cloud infrastructure, which typically includes the network, servers, operating systems, storage, or individual applications.

### PaaS Model

The PaaS model in a cloud system allows developers to create and deploy applications onto the cloud infrastructure using programming languages, libraries, services, and tools. A software developer does not manage or control the underlying cloud infrastructure but has control over the deployed applications (software) and, possibly, configuration settings for the application-hosting environment.

## Responsibilities in Cloud Data Protection

When analyzing the responsibilities between consumers and cloud service providers for protecting cloud data, it is not always clear-cut. If an IaaS system provides only the computation resources or also offers virtualized storage and network resources to consumers for deploying and running arbitrary software, including operating systems and applications, the consumer may have control over virtual storage, virtualized network components, and more.# Access Control in Cloud Computing

## Introduction
The ability to deploy their own VMs and applications is contingent upon access provisioned by the cloud service provider. The shared responsibility of access control needs to be considered in the PaaS and SaaS models.

## Shared Responsibility Model
For example, software developers might need to access data in systems provided by PaaS for their developmental needs, while internal application users (i.e., users that need to access the application system data) might need to access application system data managed by the applications.

In general:
- For PaaS, consumer software developers might share access control responsibilities with cloud service providers.
- For SaaS, internal application users might share such responsibilities with cloud service providers.

### Access Control Management
Note that unless there is express prior approval from the consumer, a PaaS or SaaS provider must manage access control with the IaaS provider and the consumer (if it is not also the IaaS provider). If the consumer approves, the provider should inform the consumer of its intention to store the specified data in the IaaS provider, where it will be accessed, as well as the extent to which the data can be accessed by the IaaS provider, foreign entities, or authorities. A public consultation and hearing process must then be conducted before a decision is made.

## Essential Characteristics Challenging Access Control System Design
The five essential characteristics that challenge access control (AC) system design are summarized as follows:

### 1. Broad Network Access
Cloud services are available over the network and accessible through standard mechanisms that promote use by heterogeneous thick and thin client platforms (e.g., mobile phones, tablets, laptops, workstations). This raises security concerns regarding network access. For example, denial of service (DoS) attacks can be launched against a cloud system, rendering its resources unavailable to legitimate users. Thus, AC for network access should be managed.

### 2. Resource Pooling
The computing resources of a cloud system (e.g., storage, memory, processing, network bandwidth) are pooled to serve multiple consumers using a multi-tenant model (i.e., a single instance of the software and its supporting infrastructure serves multiple consumers) through different physical and virtual resources, each dynamically assigned and reassigned according to consumer demands.

Information may be leaked if:
- The resource allocated to a consumer can be accessed by another co-located consumer.
- The allocated resource, such as memory, is not wiped before being reallocated to another consumer.

There is also a sense of location independence in that the consumer generally has no control over or knowledge of the exact location of the provided resources. Location may be specified at a higher level of abstraction (e.g., country, state, data center) that brings security concerns. Therefore, methods for implementing resource pooling while ensuring the isolation of shared resources should be considered in the AC design.

### 3. Rapid Elasticity
Cloud services can be elastically provisioned and released...# Cloud Security and Access Control

## 1. Introduction
Cloud computing has transformed the way services are provisioned, allowing for rapid scaling of resources. However, this flexibility brings challenges, particularly in the area of security.

## 2. Measured Service
Cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service (e.g., storage, processing, bandwidth, active end user accounts).

- Resource usage is monitored, controlled, and reported to provide transparency to both the provider and consumer of the utilized service.
- To maintain resource usage, cloud consumers should be authorized to review but not to modify their own metering data to prevent falsification of payments.

## 3. Data Sharing
Sharing information among different organizations is complex, as cloud systems must meet the security requirements of all involved organizations.

- Concepts such as trust of federated identities and access control (AC) attributes are crucial for facilitating data sharing.
- It is assumed that trust and federated identities/attributes are already established, with further discussion on this topic reserved for another document.

### 3.1 Consumer Responsibility
Regardless of the service model, consumers are responsible for the security of their cloud-based data and who has access to it.

- Data is never controlled by cloud service providers; it remains with the cloud consumers.
- The exception is log data, which still requires consideration regarding privacy and security.

### 3.2 Data Encryption
If a consumer’s data is not encrypted, cloud administrators may have the ability to read it.

- In such cases, the consumer’s data should be flagged as accessible by the service provider, and the consumer should be informed immediately.

## 4. Guidance for Access Control Systems
Guidance for access control systems for each cloud service model can be extended to system requirements by referring to the AC control elements listed in NIST SP 800-53, Revision 4, Security and Privacy Control for Federal Information Systems and Organizations.

- Appendix A maps the guidance to the AC control elements listed in NIST SP 800-53, Revision 4.

## 5. Conclusion
The rapid evolution of cloud services necessitates a robust approach to security and access control, ensuring that consumers maintain control over their data while also adhering to necessary security protocols.# Access Control Guidance for IaaS

IaaS is the cornerstone of all cloud services that offer computing and storage through a network such as the internet. Through virtualization technology, IaaS enables end users to dynamically allocate computing resources by instantiating new virtual machines (VMs) or releasing them based on their requirements. A VM is a software container that behaves like a physical machine with its own operating system (OS) and virtual resources (e.g., CPU, memory, hard disk, etc.). Leasing VMs is more cost-effective than purchasing new physical machines. The virtualization technology is composed of VMs and a hypervisor, as shown in Figure 1. VMs are managed by the hypervisor, which controls the flow of data and instructions between the VMs and the physical hardware. On the consumer side, system administrators are usually the major users of IaaS services since IaaS services are flexible to configure resources (e.g., network, data storage).

Cloud virtualization adds additional security management burdens by introducing security controls that arise from combining multiple VMs onto a single physical computer, which can have potential negative impacts if a security compromise occurs. Some cloud systems make it easy to share information among VMs by, for instance, allowing users to create multiple VMs on top of the same hypervisor if multiple VMs are available. However, this convenience can also become an attack vector since data leakage could occur among VMs. Additionally, virtualized environments are transient since they are created and vanish frequently, thereby making the creation and maintenance of necessary security boundaries more complex.

As shown in Figure 3, data in the middleware, data, applications, and OS layers is owned and controlled by the consumer. The IaaS system and the consumer need to ensure that access to the data is not granted to IaaS system administrators or any other IaaS consumers in these layers unless any of them are permitted. IaaS administrators are responsible for access control on the virtual machine, hypervisor, storage, and networking layers and should consider Sections 3.1 to 3.5 below.

## 3.1 Guidance for Network

The network is shared among IaaS consumers, and it is important to secure the network traffic and the cloud’s environment from being exploited by unauthorized consumers. Thus, access control for network boundaries and allowlists for network communications are required and may be applied through, for example, dedicated virtual local area networks (VLANs) leveraging automated access control lists (ACLs). Using the Institute of Electrical and Electronics Engineers (IEEE) 802.1Q VLAN tagging for network traffic with a cloud data center will result in routing only traffic tagged with the server’s unique VLAN identifier to or from that server.

## 3.2 Guidance for Hypervisor

A hypervisor plays an important role in the security of the entire virtualized architecture since it manages consumer loads and guest operating systems (OSs), creates new guest OS...# Security Guidance for Cloud Infrastructure

## 3.3 Guidance for Virtual Machines

VMs that are created by different end users allow resources to be shared among multiple end users. In such cases, it must be ensured that no application from one VM can directly access other VMs since covert channels may leak information between VMs by accessing shared physical resources (e.g., memory).

Similarly, although the ability to copy and paste information between VMs via the clipboard is a convenient feature, such a capability could be made available on other VMs running on the same hypervisor and thus introduce an attack vector (i.e., information can be leaked to other VMs through the clipboard). Organizations should have policies regarding the use of shared clipboards.

Isolation between VMs is necessary to keep VMs running independently of each other, and quotas on VM resource usage should be regulated so that a malicious VM can be prohibited from exhausting computation resources. If a malicious application consumes the majority of computation resources, legitimate applications may not be able to obtain sufficient resources to perform their operations. Moreover, end users might terminate the execution of their tasks before they are finished. The state and data of the current VM would then be saved as a guest OS image, and when the task is resumed, the VM might be migrated from a different hypervisor. In such scenarios, guest OS images must be protected from unauthorized access, tampering, or storage.

Furthermore, VMs that are not active may also store sensitive data. Monitoring access to the sensitive data in inactive VMs should be considered.

## 3.4 Guidance for APIs

There are several popular open-source platforms for deploying an IaaS system. These solution platforms enable APIs to manage access control of VMs, hypervisors, and networks (note that a consumer cannot control hypervisors and networks in a multi-tenant environment unless it is a private cloud).

For example, one such platform consists of control components, including API, communication, lifecycle, storage, volume, scheduler, network, and an API server for managing access control policies for hypervisors, as well as a network controller for constructing networks.# Access Control in Cloud Computing

## 1. Introduction
Access control (AC) is a critical aspect of cloud computing, particularly in Infrastructure as a Service (IaaS) and Platform as a Service (PaaS) models. This document discusses the importance of monitoring AC APIs and provides recommendations for enhancing access control in these environments.

## 2. Monitoring Access Control APIs
The lack of monitoring AC within APIs can lead to unenforced or incorrectly enforced AC policies by hypervisors, virtual machines (VMs), and networks. Therefore, it is essential to consider implementing a service for monitoring AC APIs in cloud platforms.

## 3. Recommendations for IaaS Access Control

### 3.1 Importance of Virtualization
The security of an IaaS cloud system is heavily dependent on virtualization, specifically the hypervisor. A widely adopted solution for protecting hypervisors is the virtualization management system, which operates between the underlying hardware and the hypervisor.

### 3.2 Enforcement of Access Control
Virtualization management systems enforce AC on both hypervisors and VMs in various ways. Different levels of access are granted to users, including:
- Read-only access to the administrative interface of a guest OS.
- Control over specific guest OSs.
- Complete administrative control.

### 3.3 Existing Solutions
There are existing solutions for providing AC for hypervisors and VMs. For instance, certain approaches secure the hypervisor against control hijacking attacks by protecting its code from unauthorized access and offering isolation of VMs through mandatory access control (MAC).

### 3.4 Service Level Agreements
To enforce AC on interoperations, a service level agreement (SLA) should be designed to include appropriate controls to secure external interoperations. Additional isolation mechanisms can also enhance the security of internal interoperations.

### 3.5 Guideline Rules for IaaS AC Policy
Guideline rules for IaaS AC policy, which consider the main elements in AC (subject, object, and operation), are essential. The AC policy designer should determine whether each rule is permitted or denied based on system requirements. For example, if an authorized IaaS end user requires access to cloud services, a login operation in the hypervisor should be granted; otherwise, it should be denied.

## 4. Access Control Guidance for PaaS

### 4.1 Overview of PaaS
PaaS provides a framework for developers to create and deploy customized applications. Security assurance considerations should be integrated throughout the application development process lifecycle by the PaaS provider.

### 4.2 Focus on Data Protection
The primary focus of AC in the PaaS model is to protect data during runtime, which is managed by middleware and the operating system (OS). PaaS systems are primarily concerned with developing, deploying, and operating customer applications.

### 4.3 Security and Privacy
The security and privacy measures offered by the PaaS provider are crucial for protecting applications and data from potential leaks, particularly through unsecure shared memory. Therefore, enforcing AC over data during runtime in PaaS is critical for the security of PaaS services.

### 4.4 Responsibilities of PaaS System Administrator
The PaaS system administrator is responsible for the access control of various layers, including runtime, middleware, OS, virtual machine, hypervisor, storage, and networking layers.# Guidance for Memory Data and Access Control

## 4.1 Guidance for Memory Data
The PaaS system permits users to deploy tasks in a provider-controlled middleware and host OS, which may be shared with other PaaS applications. As such, PaaS typically leverages OS-based techniques (e.g., Linux Containers and Docker for isolating applications) [19]. However, numerous existing memory-related attacks can compromise sensitive application-related data by hacking through the shared OS memory in PaaS [20]. Thus, Access Control (AC) for OS memory, such as AC of different processes on top of processor caches [21], should be considered.

## 4.2 Guidance for APIs
As the PaaS system allows cloud developers to build applications on top of the platform, APIs should control the scope of each user’s application such that user data remains inaccessible between different applications. In addition, packaged APIs can be serviced as microservices in a PaaS cloud. A centralized architecture for provisioning and enforcement of access policies governing access to all microservices is required due to the sheer number of services needed for service composition to support real-world business transactions (e.g., consumer order processing and shipping). Since each of the microservices may be implemented in a different language, policy provisioning and computation of access decisions may require the use of an authorization server [22].

## 4.3 Recommendations for PaaS Access Control
An efficient method should be established for protecting memory data by flushing processor caches during context switches. However, in order to avoid significant performance degradation, only highly sensitive memory data should be flushed.

To handle access control for multiple replicas of data, a method to manage the central AC policy system should be introduced. Thus, once the data within a PaaS provider is duplicated across PaaS providers, any change in the policy should result in an appropriate update to the central AC policy system. Moreover, the AC policy related to the replicated data in other PaaS providers should be synchronized accordingly based on an AC policy in the central system.

Guideline rules for PaaS AC policy are listed in Table 2 with respect to the three basic elements of AC (i.e., subject, object, and operation). Each row indicates a possible AC rule, but the AC designer should decide whether access should be granted or denied based on the system requirements. For example, if a user of an application needs to access memory data related to their application, permission to read memory data will be granted. However, access to that memory data will be denied to other users.

# 5 Access Control Guidance for SaaS
In SaaS, a cloud service provider delivers an application as a service to end users through a network such as the internet. Thus, there is no need for users to install and execute applications locally on their own computers. As shown in Figure 4, multiple applications and users can...# Cloud System Security and Data Management

## Overview
Cloud systems allow multiple applications to be supported simultaneously, sharing common resources, including applications and underlying databases. When a developer deploys a third-party application, data from that application, along with data from other unrelated applications, may be stored in the cloud system.

End users must rely on the security and privacy measures provided by the cloud service provider to protect their data from unauthorized access that may arise from these unrelated applications. It is important to note that data managed by the application layer is owned and controlled by the consumer.

## Access Control
The SaaS system and the consumer must ensure that access to application data in these layers is not granted to the SaaS system administrator, consumers, or other users unless they are trusted. SaaS administrators are responsible for access control across all operational layers, except for the consumer’s application data.

### Guidance Sections
SaaS administrators should consider the guidance outlined in the following sections: 3, 4, and 5.1 to 5.4.

## 5.1 Guidance for Data Owner’s Control
A data provider is defined as the creator or source of application data owned by consumer organizations. Typically, application data is stored in the SaaS service provider’s database.

Managing access to this data presents challenges. Key questions include:
- How does the data provider manage data retention (e.g., where is data kept and for how long)?
- Does the provider have permission to determine access rights to the data it hosts?

If a data provider can determine access rights on the data it holds, it is essential to ensure that an up-to-date Access Control (AC) policy is enforced within the SaaS system.

## 5.2 Guidance for Confidentiality
In the application deployment model, protecting the integrity of sensitive data within the data owner’s domain is crucial. Protection mechanisms for application data include:

- **Data Encryption Schemes**: Data can be encrypted using specific cryptographic primitives, with decryption keys disclosed only to authorized users.

To enforce confidentiality, Attribute-Based Access Control (ABAC) and Attribute-Based Encryption (ABE) schemes can be utilized to manage, encrypt, and decrypt application data. These schemes leverage user identity through attributes.

However, the high volume of data in the SaaS model can lead to performance issues due to the encryption and decryption processes. Therefore, it is important to balance data confidentiality with performance.

## 5.3 Guidance for Privilege Management
Privilege management involves the addition, removal, and modification of privileges for subjects. It is vital to design a flexible or real-time mechanism for assigning and revoking privileges to maintain the usability of the SaaS service.

## 5.4 Guidance for Multiple Replicas of Data
To ensure high availability, cloud service providers may replicate data across multiple locations, potentially even across countries. It is essential to ensure that all data replicas are adequately protected under the relevant security measures.# Guidance for Access Control in SaaS Systems

## 5.5 Guidance for Multi-tenancy
The SaaS system introduces additional considerations with regard to the management of access to applications. An immediate necessity is to focus on users’ access to applications. The access rights are granted to end users through AC policies based on predefined attributes or roles. This can be specified by:

- Attribute-based access control (ABAC) policy models
- Role-based access control (RBAC)
- Context-based access control (CBAC)

The SaaS model is a typical multi-tenancy platform that supports multiple end users simultaneously accessing an application with the data of different users’ applications residing at the same location. Exploiting vulnerabilities in the application or injecting code into the SaaS system might expose data to other users. Therefore, strategic planning should be given to implementing multi-tenancy while segregating data from different users’ applications during the design of an AC system.

## 5.6 Guidance for Attribute and Role Management
In the SaaS system, attribute and role-based AC management employs policies and predefined roles to manage access rights to applications and underlying databases. The primary challenge of deploying attribute or role-based AC management is reaching an agreement on what types of attributes or roles should be used and what should be considered when designing the AC systems.

If the set of considered attributes or roles is too small, flexibility will be reduced. However, if the number of attributes or roles is too large, the complexity of policies will increase.

## 5.7 Guidance for Policies
SaaS applications provide application-specific access control configurations for different user applications, and in this case, user policies for each application are enforced by the SaaS provider. This configuration does not support collaboration between the SaaS provider and the consumer’s access control infrastructure.

For example, while large organizations often employ on-premises access control systems for managing their users centrally and efficiently, SaaS applications typically provide organizations with an AC configuration interface for managing AC policies, which forces the AC policies to be stored and evaluated on the SaaS provider’s side.

This approach might result in disclosing sensitive data required for evaluating the AC policies to the SaaS provider. Therefore, methods for enforcing authorization in the SaaS provider while not disclosing sensitive access control data to the SaaS provider should be considered.

Federated authorization is an efficient technique that utilizes a middleware layer to transfer the management of access control policies from the SaaS provider to the consumer side and enforce policies on the SaaS.# Access Control in SaaS

## 5.8 Guidance for APIs

An API in the SaaS model serves as an interface between the cloud server and its users. The API should be designed to protect against both accidental and malicious attempts to circumvent any Access Control (AC) policy. Applications for organizations and third parties often build upon the APIs, which introduce the AC complexity of the new layered API.

For example, if the APIs do not require memory access for their tasks, then the AC policy for the APIs should enforce the non-memory access. Additionally, AC policies should be specified to manage the authorization process for web APIs. For example, when APIs connect through SOAP and REST protocols, the AC should control whether to allow end users to interface between Microsoft or non-Microsoft tools and technologies.

For authorized API connections through Simple Object Access Protocol (SOAP) and Representational State Transfer (REST) protocols, the AC should grant all related access requested by the protocols. For unauthorized API connections through these protocols, no access or partial access should be granted by the AC.

## 5.9 Recommendations for SaaS Access Control

With regard to multi-tenancy, authorization may be enforced using a centralized, decentralized, or hybrid authorization system.

- In a **centralized authorization system**, the SaaS provider manages a central authorization database for every end user and their accounts.
- In a **decentralized or hybrid authorization system**, individual tenants are responsible for all or part of the authorization process.

Note that different tenants may require different systems. Considering the attributes or roles of tenants is crucial when selecting the most suitable system. There are many ways to specify attributes or roles, such as in Attribute-Based Access Control (ABAC) and Role-Based Access Control (RBAC) models. Attributes or roles must be well-designed and take into account hierarchy relationships when implementing AC policies for different tenants.

Authorization federation is an efficient way to enforce AC policies in the SaaS provider. A generic middleware architecture that incorporates access control requirements from consumers and handles local and remote attributes or roles can be used to extend and shift AC policy management from the SaaS provider to the consumer side. This approach centralizes consumer AC policy management and lowers the required trust in the SaaS provider.

In addition, the AC for Virtual Machine (VM) supporting federation operations should also be specified (e.g., an end user may create a VM to run different applications). Within the VM of the same host, one application may need to access the application code of other applications to fulfill its task. Unlike the Platform as a Service (PaaS) architecture, where consumers can fully manage the design, testing, and development of the software, SaaS consumers have limited control of the applications hosted in the cloud server.

To achieve the application data owner’s control, a Security Class Agreement (SCA) may be of use. SCA is mutually agreed upon by both the data provider of PaaS subscribers and the PaaS.# Access Control in Cloud Services

## Security Class of Data Providers

The security class of data providers is crucial for defining access rights. Multiple replicas of the same data share the same security level as their data provider. This means that given data from a particular data provider, the security class for multiple replicas of the data should be identical.

### Determining Access Rights

The host within the PaaS service that is qualified for executing the access request can be determined by referring to the Security Class Assignment (SCA). The data provider can manage access to its data by specifying security classes for the SCA, ensuring synchronization between the data provider and the cloud host in determining access rights.

#### Example: Bell-LaPadula Model

In a Bell-LaPadula model, assuming a patient’s report is written by a doctor with confidential clearance, the report can only be read by a host with the same or higher security clearance.

### Privacy Considerations

When accessing multiple data sources that are not intended to be accessed in the same cloud system, the privacy of data should not be compromised due to different security classes of these data sources and their data in the SCA. However, the high computational complexity of encryption and decryption necessitates careful design of cryptographic schemes to maintain the performance of cloud systems while protecting data confidentiality.

## Privilege Management Infrastructure (PMI)

A Privilege Management Infrastructure (PMI) can be employed to dynamically manage the assignment and revocation of privileges through the use of attributes or role specification certificates in the PaaS model. PMI specifies the privileges for different users and links these privileges with various attribute or role specification certificates, which contain different attribute or role assignments to enforce privilege management.

## Access Control Policy Management

To handle access control of multiple replicas of data, a method to manage the central Access Control (AC) policy system should be introduced. Once the data within a SaaS provider is duplicated across SaaS providers, any change in the policy should result in an appropriate update to the central AC policy system. Moreover, the AC policy related to the replicated data in other SaaS providers should be synchronized accordingly based on the AC policy in the central system.

### Guideline Rules for SaaS AC Policy

Guideline rules for SaaS AC policy are listed in Table 3. The AC designer should decide whether access in each rule is permitted or denied based on the system requirements. For example, during federation operation, VM read/write to other application code within the same host is permitted; otherwise, it is denied.

## Access Control Guidance for Inter- and Intra- Operation

In general, collaboration (i.e., two or more systems that work together as a combined system) in the context of the cloud may lead to a seamless exchange of data and services among various cloud infrastructures.

### Types of Collaborations

There are two types of collaborations: inter-operation and intra-operation. Inter-operation refers to the capability of using multiple cloud infrastructures. For example, a consumer may purchase IaaS services from two different cloud service providers, Cloud A and Cloud B, and the collaboration between them should be allowed due to data interoperability.# Processing Requirements

## Intra-Operation

With regard to intra-operation, two scenarios can be presented as derived from Figure 6.

1. A consumer may own multiple VMs in a single cloud host (e.g., VM A and VM B), and communication among those VMs may be required.
2. A consumer may rent multiple hosts within the same IaaS service, and collaboration among VMs from these different hosts may be required (e.g., an inter-operation between VM B and VM C).

For intra-operation, the AC policy should enable the operations of VMs for the same consumer to access each as needed during the collaboration period and disable access when the collaboration period ends.

There are two primary cases in intra-operation:
- **Inter-host case**: VMs from different cloud hosts are operating collaboratively.
- **Intra-host case**: VMs are from the same cloud host and must exchange data and services.

Additionally, for some applications, VMs might be distributed in multiple host computers, so the AC policy should cover both intra-host and inter-host cases.

## Inter-Operation

There is the possibility that inconsistent management of access elements leads to incorrect access control policy integration for inter-operation. For instance, different cloud service providers using different sets of subject attributes for AC may cause potential conflicts or leak access permissions. Attributes with the same name may result in different privileges when switching providers.

Enforcing AC among different cloud service providers without incurring conflicts or blocks of privilege for individual users/VMs is a challenge. This would require examining how to achieve secure inter-operation among the cloud service providers, such as in cross-hybrid environments.

Some cloud AC systems adopt centralized mechanisms to create global AC policies that manage policy integration among different cloud service providers. However, the cloud inter-operation is transient and, thus, inefficient to manage global AC policies as frequent updates for individual cloud AC policies.

# Conclusions

This document presents an initial step toward understanding access control (AC) challenges in cloud systems by analyzing the AC considerations in all three cloud service delivery models— IaaS, PaaS, and SaaS.

Essential characteristics that would affect the cloud’s AC design are also summarized, such as:
- Broad network access
- Resource pooling
- Rapid elasticity
- Measured service
- Data sharing

Various guidance for AC design of IaaS, PaaS, and SaaS are proposed according to their different characteristics. Recommendations for AC design in different cloud systems are also included to facilitate future implementations. Additionally, potential policy rules are summarized for each cloud system.

However, many issues remain open, such as AC management across different devices and platforms, as well as new challenges that have yet to emerge with the wide adoption of the cloud.