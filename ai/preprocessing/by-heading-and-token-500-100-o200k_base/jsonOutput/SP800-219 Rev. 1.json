[
  {
    "title": "Abstract",
    "subsections": [
      {
        "content": "The macOS Security Compliance Project (mSCP) provides resources that system administrators, security professionals, security policy authors, information security officers, and auditors can leverage to secure and assess macOS desktop and laptop system security in an automated way. This publication introduces the mSCP and gives an overview of the resources available from the project's GitHub site, which is continuously curated and updated to support each new release of macOS. The GitHub site provides practical, actionable recommendations in the form of secure baselines and associated rules. This publication also describes use cases for leveraging the mSCP content. Updates from the previous version of this publication mainly involve the new mSCP capability to create a custom benchmark by tailoring a baseline."
      }
    ]
  },
  {
    "title": "1. Introduction",
    "subsections": [
      {
        "content": "The National Institute of Standards and Technology (NIST) has traditionally published secure configuration guides for Apple desktop/laptop operating system versions as prose-based Special Publications (SPs), such as NIST SP 800-179, Revision 1, Guide to Securing Apple macOS 10.12 Systems for IT Professionals: A NIST Security Configuration Checklist. In order to provide security configuration guidance to organizations more quickly and in a machine-consumable format, NIST established the open-source macOS Security Compliance Project (mSCP). NIST no longer produces SP guidance documents for each macOS release; instead, the mSCP continuously curates and updates machine-consumable macOS guidance. The latest macOS security baseline content is maintained and updated on the mSCP GitHub page [1]."
      },
      {
        "content": "Security baselines are groups of settings used to configure a system to meet a target level or set of requirements or to verify that a system complies with requirements. The mSCP seeks to simplify the macOS security development cycle by reducing the amount of effort required to implement security baselines. This collaboration between federal agencies minimizes duplicate effort that would otherwise be needed for these agencies to administer individual security baselines. Additionally, the secure baseline content provided is easily extensible by other parties to implement their own security requirements."
      },
      {
        "content": "Organizations using mSCP content, particularly security baseline examples, should take a risk-based approach for selecting the appropriate settings and defining values that consider the context under which the baseline will be utilized."
      },
      {
        "title": "1.1. Purpose and Scope",
        "content": [
          {
            "text": "The purpose of this document is to introduce the mSCP to broader audiences. This document provides a high-level overview of the mSCP, its components, and some common use cases. It refers readers to the online project documentation for in-depth technical information and use instructions. This document is intended to be independent of macOS version releases; updates will be released as needed when there are substantial changes to the mSCP.\n```# CURRENT_PAGE_RAW_OCR_TEXT"
          }
        ]
      },
      {
        "title": "previous release of this document mainly involve the new mSCP capability to create a custom benchmark by tailoring a baseline.",
        "content": [
          {
            "text": "The information in this document regarding the details of the mSCP GitHub site is accurate as of the time of publication. Readers seeking the latest detailed information on mSCP content or the content itself should visit the mSCP GitHub page and wiki."
          },
          {
            "text": "Organizations that need to reference a NIST SP to demonstrate how they are complying with United States Government mandates for adopting secure configurations for their macOS devices may reference this SP instead of its deprecated predecessors, such as SP 800-179 or SP 800-179, Revision 1."
          },
          {
            "subsection": "1.2. Audience",
            "text": []
          },
          {
            "text": "This document and the mSCP GitHub site are intended for system administrators, security professionals, policy authors, privacy officers, and auditors who have responsibilities involving macOS security. Additionally, vendors of device management, security, configuration assessment, and compliance tools that support macOS may find this document and the GitHub site to be helpful."
          },
          {
            "subsection": "1.3. Relevance to NIST SP 800-70 and the National Checklist Program",
            "text": []
          },
          {
            "text": "The security baselines from the mSCP GitHub page are included in the National Checklist Program. NIST SP 800-70, Revision 4 [2], explains that federal agencies are required to use appropriate security configuration checklists from the National Checklist Program when available. Part 39 of the Federal Acquisition Regulations, Section 39.101 paragraph (c) states,"
          },
          {
            "text": "In acquiring information technology, agencies shall include the appropriate information technology security policies and requirements, including use of common security configurations available from the National Institute of Standards and Technology's website at https://checklists.nist.gov. Agency contracting officers should consult with the requiring official to ensure the appropriate standards are incorporated."
          },
          {
            "subsection": "1.4. Document Structure",
            "text": []
          },
          {
            "text": "The remaining sections and appendices of this document are as follows:"
          },
          {
            "text": "Section 2 provides an overview of the project, including what its goals are and how its content can be used.\nSection 3 explains the major components of the mSCP and provides pointers to additional information on component usage.\nThe References section lists the references for the document.\nAppendix A briefly discusses how mSCP can help meet the needs of people in several roles.\nAppendix B provides examples of how a security professional might use mSCP content.\nAppendix C contains an example of how an assessment tool vendor could leverage mSCP content.\nAppendix D lists selected acronyms and abbreviations used in this document."
          }
        ]
      }
    ]
  },
  {
    "title": "Customized Security Baselines",
    "subsections": [
      {
        "content": "Customized security baselines of technical security controls by leveraging a library of rules, with each rule mapped to requirements in one or more existing security standards, regulations, or frameworks. This approach provides versioning and consistency of the content. Unifying and standardizing macOS baseline efforts via the mSCP means that updating security guidance is simplified and radically accelerated, even as new versions of macOS are introduced annually."
      },
      {
        "content": "The mSCP started in August 2019 as a collaboration among operational IT security staff from NIST, the National Aeronautics and Space Administration (NASA), the Defense Information Systems Agency (DISA), and the Department of Energy's (DOE) Los Alamos National Laboratory (LANL). The mSCP sought to map macOS settings to NIST SP 800-53, Revision 4 with an extensible, modern approach to security guidance that could be used by any organization (e.g., government, enterprise, education) that needs to adhere to security compliance frameworks and policy."
      },
      {
        "content": "As of this writing, the configuration settings represent guidance and best practices from NIST SP 800-53, Revision 5; NIST SP 800-171, Revision 2; the macOS DISA Security Technical Implementation Guide (STIG); the Committee on National Security Systems (CNSS) Instruction (CNSSI) Number 1253; the Center for Internet Security (CIS) Critical Security Controls Version 8; and internal organizational security guidance from NIST, NASA, and LANL."
      },
      {
        "title": "2.1. Project Goals",
        "content": [
          {
            "text": "Apple releases a new macOS version every year, and generally, agencies and organizations must wait for guidance or accept risk before deploying the new macOS version. Most agencies or organizations must create their own internal security configuration, which delays the deployment of the new macOS version or new hardware that only supports the new macOS version. The mSCP assists organizations in upgrading sooner. Generally, the technical security settings in macOS do not drastically change from release to release, with only a handful of new settings being introduced. By pursuing a rules-based approach, mSCP rules that remain applicable can be reused and incorporated into guidance for the latest macOS version. This enables quicker adoption of new security features that are not offered in prior versions of macOS."
          },
          {
            "text": "The goals of the mSCP are to:\n- Develop recommended security baselines using a risk-based approach\n- Normalize and accelerate annual adoption of the new operating system and hardware by providing guidance to meet the security needs of new operating systems at the earliest availability\n- Reduce worldwide efforts in creating annual guidance by unifying and consolidating compliance efforts into a single project\n- Develop a methodology to foster collaboration between baseline authors, reducing\n```# Overhead and Redundancy"
          },
          {
            "text": "Establish a unified approach for the configuration and assessment of controls across multiple sources and tools\nEnable the customization of existing content and the creation of new content, including creating custom baselines in order to meet organization-specific security requirements\nProvide device management and security tool vendors, auditors, and Apple insight into customer security configuration needs"
          }
        ]
      }
    ]
  },
  {
    "title": "CURRENT_PAGE_RAW_OCR_TEXT",
    "subsections": [
      {
        "content": "Generating a mapping between security standards, regulations, frameworks, etc.\nProducing human-readable documentation in a variety of formats\nCustomizing existing baselines"
      },
      {
        "content": "mSCP content can also be used to generate Security Content Automation Protocol (SCAP) content for automated security compliance scans. The SCAP generated follows the SCAP 1.3 specification [10]. The generation of SCAP content uses an Extensible Stylesheet Language Transformations (XSLT) file to create an Extensible Configuration Checklist Description Format (XCCDF) checklist document with an accompanying Open Vulnerability and Assessment Language (OVAL) document. The XCCDF and OVAL documents are bundled into an SCAP data stream collection document with accompanying files that include Common Platform Enumeration (CPE) dictionary [11] information and an Open Checklist Interactive Language (OCIL) document. This creates an SCAP 1.3 document that validates using the NIST SCAP Content Validation Tool. See https://csrc.nist.gov/projects/security-content-automation-protocol/scap-releases/scap-1-3. and can be used by SCAP tools on macOS. More information on SCAP content generation is available at the project wiki."
      }
    ]
  },
  {
    "title": "CURRENT_PAGE_RAW_OCR_TEXT",
    "subsections": [
      {
        "title": "Authors",
        "content": [
          {
            "text": "Developers of the baseline"
          }
        ]
      },
      {
        "title": "Profile",
        "content": [
          {
            "text": "The security content portion of the baseline"
          },
          {
            "text": "section: A keyword for organizing settings\nrules: The names of the rule files that are a part of this baseline"
          },
          {
            "text": "The following code provides a partial example of a YAML file that illustrates the use of these fields (with field names bolded):"
          },
          {
            "subsection": "3.2.1. Rule File Composition",
            "text": []
          },
          {
            "text": "A YAML rule file is broken down into the following subsections. This list and the following example are from the Rules section of the mSCP wiki."
          },
          {
            "text": "id: The id should match the file name without the yaml file extension.\ntitle: The title is a human-readable title of the rule.\ndiscussion: The discussion should provide a concise description of the intended use of the rule.\ncheck: Every rule will have a check. A shell-based check should be able to validate and check most rules.\nresult: Expected results from the check.\nfix: The fix will appear in a document when generated. If a fix includes [source,bash], the fix will be used for generating the script to enforce the rule.\nreferences: The references include a Common Configuration Enumeration (CCE) identifier and a mapping of the security frameworks, guidance, and individual controls that have been mapped to the rule. See the official repository of NIST CCEs [12] for more information.\nmacOS: The validated macOS version for this rule.\nodv: If a rule supports the ODV functionality, then the odv section should be present. At a minimum, this field should contain a hint (provides a description when tailoring a baseline) and a default value that replaces the $ODV variable.\ntags: Tags are keywords used to categorize and identify related rules, and they can be added to or modified as needed. Tags can also be used to make index-based searching of the rules faster and easier.\nseverity: The severity level specified in the DISA STIG, if applicable.\nmobileconfig: The mobileconfig and mobileconfig_info subsections are related. If mobileconfig is set to true, the information required for creating the mobileconfig configuration profile is required in the mobileconfig_info area."
          },
          {
            "text": "The following code provides a notional example of a YAML rule file (with field names bolded):"
          },
          {
            "subsection": "3.2.2. Rule File Categories",
            "text": []
          },
          {
            "text": "The mSCP organizes YAML files in the rules directory into the following subdirectories, each of which corresponds to a category of settings:"
          },
          {
            "text": "audit: OpenBSM\nauth: Smartcard authentication\nicloud: Apple's iCloud/Apple ID service\nos: Rules to configure the operating system that do not fit into the other categories\npwpolicy: Password policy\nsystem_settings or sysprefs: Settings controlled within the System Settings or System Preferences application"
          },
          {
            "text": "The rules directory also includes a supplemental subdirectory, which contains additional information that supports the guidance provided by the baselines. Supplemental\n```# CURRENT_PAGE_RAW_OCR_TEXT"
          }
        ]
      },
      {
        "title": "Content Contains",
        "content": [
          {
            "text": "Information for rules that are not part of an existing baseline but could be beneficial for certain use cases. Supplemental content may not have mappings and may not contain the YAML rule file check and fix sections mentioned in Section 3.2.1. Supplemental content can be added to enhance baselines where organizational requirements are different than the system baseline requirements."
          }
        ]
      },
      {
        "title": "3.3. Configuration Profiles and Scripts",
        "content": [
          {
            "text": "When an mSCP YAML file is processed, it yields a configuration script and/or configuration profile (mobileconfig file) as outputs. Both are used to apply configuration settings to a system. A configuration profile is an Extensible Markup Language (XML) formatted file with a mobileconfig extension that contains a configuration payload. macOS can automatically configure itself based on a mobileconfig file's contents upon execution. Configuration profiles offer a convenient, Apple-supported mechanism for applying security settings to a macOS environment. Additionally, they can be cryptographically signed to ensure integrity and authenticity. These factors make configuration profiles the preferred vehicle for configuration delivery. However, mobileconfig files cannot modify all macOS settings, so a configuration script is needed for those settings that are not supported. See the developer documentation page for an example configuration profile and brief descriptions of its properties. A configuration script is a shell script that directly manipulates operating system files. The script content is derived from all YAML rule files that have a mobileconfig value of false and belong to the specified baseline. The YAML rule file must contain the fix section in order to generate its corresponding configuration script entry."
          }
        ]
      }
    ]
  },
  {
    "title": "CURRENT_PAGE_RAW_OCR_TEXT",
    "subsections": [
      {
        "content": "HTML, PDF, and Excel. The Excel format is particularly useful for quickly viewing all of the rules of a baseline, and it contains all of the data in the YAML rules files. The generate_guidance.py script can also create configuration profiles (mobileconfig files) and the macOS Security Compliance Tool. Using the -s argument, the generate_guidance.py script will generate an org.{baseline}.audit.plist file and another script, the macOS Security Compliance Tool, that can check and remediate compliance settings. The audit.plist file can be used to set an exemption to organizational rules for approved users so that compliance checks can succeed without findings. To create an exemption for a rule, the exempt field should be set to true and an exempt_reason should be added. See the wiki for more information on the generate_guidance.py script."
      },
      {
        "title": "3.4.3. macOS Security Compliance Tool",
        "content": [
          {
            "text": "The {baseline}_compliance.sh script runs interactively by default. It can evaluate a system's conformance to a baseline or remediate any incorrectly configured settings. Alternatively, the script can autonomously assess a system with the --check argument or automatically remediate baseline settings with --fix. The lines below provide an example of the results of running the script: For more information on the macOS Security Compliance Tool script, see the wiki."
          }
        ]
      },
      {
        "title": "3.4.4. SCAP Generation Script",
        "content": [
          {
            "text": "The SCAP generation script, generate_scap.py can generate an SCAP 1.3 document, XCCDF document, or OVAL file. The script builds content from available tags within the YAML files and does not need to be pointed to a baseline file. For more information, see the wiki."
          }
        ]
      },
      {
        "title": "3.4.5. Generate Mapping Script",
        "content": [
          {
            "text": "The generate_mapping.py script allows for the quick creation of custom rules and baselines for a compliance framework not published by the mSCP. The script requires a user-created comma-separated values (CSV) file containing control identifiers that maps to a new framework (CSV column 1) from another already defined by the project (CSV column 2). By default, the script is designed to map a framework to the NIST SP 800-53, Revision 5 [4] set of controls. Adding the -f argument allows for mapping to another supported framework. See the wiki for more information on the generate_mapping.py script."
          }
        ]
      },
      {
        "title": "3.5. Customization",
        "content": [
          {
            "text": "Organizations should make the risk-based decision on what controls and rules to use and how to apply them, as stated by NIST SP 800-53, Revision 5 controls PL-10 and PL-11. Customization allows organizations to generate their own customized content outside of that provided by the project. Additionally, it allows them to add content for internal-only controls, which are not suitable for inclusion in a global baseline. Customization primarily takes place within the custom folder. Here are examples of customizations supported by mSCP:"
          },
          {
            "text": "Baselines: A baseline folder can be included within the custom folder to create customized baselines that fit an organization's needs. These baseline files may include rule, section, and template customization (discussed below). An existing\n```# CURRENT_PAGE_RAW_OCR_TEXT"
          }
        ]
      },
      {
        "title": "Baseline Configuration",
        "content": [
          {
            "text": "Baseline can be configured to create a custom benchmark. Additionally, it is possible to customize an included benchmark, but in doing so, it may no longer be compliant with the original requirements of that benchmark."
          },
          {
            "subsection": "Rules",
            "text": []
          },
          {
            "text": "Existing rules can have their setting values overridden via the custom folder instead of modifying the mSCP-supplied rule file. New rules can be created and added to existing baselines or to user-defined baselines. Organizations can create their own discussions, checks, results, fixes, and mappings of rules to security frameworks not included in the project. In order to override an existing rule, the custom rule file name must match an existing rule so that the generate_guidance.py script will pick up the new values. New rules not included in mSCP must be listed in the baseline YAML file specified when running generate_guidance.py. Additional information on custom rules can be found in an article written by mSCP contributor Allen Golbig [13]."
          },
          {
            "subsection": "Sections",
            "text": []
          },
          {
            "text": "Custom sections can be used to organize existing or custom YAML rule files. Sections defined in the custom folder must be included in a baseline YAML file in order to be used by generate_guidance.py."
          },
          {
            "subsection": "Templates",
            "text": []
          },
          {
            "text": "Custom templates can be used to define new template structures for the project and affect the organization and appearance of generated documentation. The template files must match the name of an existing template and will override that template when running generate_guidance.py."
          },
          {
            "subsection": "Logos",
            "text": []
          },
          {
            "text": "An organization can include a custom logo when running the generate_guidance.py script by using the -l argument to point to an image file."
          },
          {
            "subsection": "Tailoring",
            "text": []
          },
          {
            "text": "The generate_baseline.py script allows for a baseline to be tailored using the -t argument. During the tailoring process, the script will prompt for each control containing an ODV to have its values customized. If a value is not supplied to a control with an ODV, it will use the default value in the rule file. Refer to Appendix C for an example of tailoring with ODVs."
          }
        ]
      }
    ]
  },
  {
    "title": "CURRENT_PAGE_HTML",
    "subsections": []
  }
]