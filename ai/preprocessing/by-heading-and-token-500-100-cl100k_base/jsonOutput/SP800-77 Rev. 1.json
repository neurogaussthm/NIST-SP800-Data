[
  {
    "title": "Abstract",
    "subsections": [
      {
        "content": "Internet Protocol Security (IPsec) is a widely used network layer security control for protecting communications. IPsec is a framework of open standards for ensuring private communications over Internet Protocol (IP) networks. IPsec configuration is usually performed using the Internet Key Exchange (IKE) protocol. This publication provides practical guidance to organizations on implementing security services based on IPsec so that they can mitigate the risks associated with transmitting sensitive information across networks. The document focuses on how IPsec provides network layer security services and how organizations can implement IPsec and IKE to provide security under different circumstances. It also describes alternatives to IPsec and discusses under what circumstances each alternative may be appropriate."
      }
    ]
  },
  {
    "title": "Executive Summary",
    "subsections": [
      {
        "content": "Internet Protocol Security (IPsec) is a suite of open standards for ensuring private communications over public networks. It is the most common network layer security control, typically used to encrypt Internet Protocol (IP) traffic between hosts in a network and to create a virtual private network (VPN). A VPN is a virtual network built on top of existing physical networks that provides a secure communications mechanism for data and control information transmitted between computers or networks. IPsec is also used as a component that provides the security for many other internet protocols. The User Datagram Protocol (UDP) usage guidelines [1] specify IPsec as one of the methods to secure UDP."
      },
      {
        "content": "The Internet Key Exchange (IKE) protocol is most commonly used to establish IPsec-based VPNs. The terms IKE and IPsec are often used interchangeably, although that is not correct. In practice, the terms \"IPsec VPN,\" \"IKEv2 VPN,\" \"Cisco IPsec,\" \"IPsec XAUTH,\" and \"L2TP/IPsec\" all refer to IPsec-based VPN connections. Some examples of technologies and protocols that use IKE and/or IPsec are:\n- 3rd Generation Partnership Project (3GPP) mobile phone telephony standard (Long-Term Evolution [LTE]/5th Generation [5G], Wireless Fidelity [WiFi] calling) [2] [3]\n- Ethernet VPN (EVPN) and Virtual eXtensible Local Area Network (VXLAN) [4]\n- Software-Defined Networking (SDN) and Software-Defined Wide Area Network (SDWAN)\n- Segment Routing [5]\n- Data Center Network Virtualization Overlay (NVO3) Networks [6]\n- Generic Network Virtualization Encapsulation (GENEVE) [7]\n- Smart Grid [8]\n- Constrained Application Protocol (CoAP)\n- IPv6 over Low-Power Wireless Personal Area Networks (6LowPANs) [9]\n- Routing protocol protection [10] such as Border Gateway Protocol (BGP)/BGP Monitoring Protocol (BMP) [11] and Open Shortest Path First (OSPFv3) [12]"
      },
      {
        "content": "VPNs protect communications carried over public networks, such as the internet, as well as private networks, such as fiber networks or Multiprotocol Label Switching (MPLS) networks. A VPN can provide several types of data protection, including confidentiality, integrity, data origin authentication, replay protection, and access control. The primary VPN architectures are as\n```# VPN Architectures"
      },
      {
        "title": "Gateway-to-Gateway",
        "content": [
          {
            "text": "This architecture protects communications between two specific networks, such as an organization's main office network and a branch office network or two business partners' networks."
          }
        ]
      },
      {
        "title": "Remote Access",
        "content": [
          {
            "text": "Also known as host-to-gateway, this architecture protects communications between one or more individual hosts and a specific network belonging to an organization. The remote access architecture is most often used to allow hosts on unsecured networks, such as traveling employees and telecommuters, to gain access to internal organizational services, such as the organization's email and web servers."
          }
        ]
      },
      {
        "title": "Host-to-Host",
        "content": [
          {
            "text": "A host-to-host architecture protects communication between two specific computers. It can be used when a small number of users need to use or administer a remote system that requires the use of inherently insecure protocols."
          }
        ]
      }
    ]
  },
  {
    "title": "Overview of Security Controls",
    "subsections": [
      {
        "content": "The guide provides an overview of the types of security controls that can offer protection for network communications that are widely used throughout the world. IP communications are composed of four layers that work together: application, transport, network, and data link. Security controls exist for network communications at each of the four layers."
      },
      {
        "content": "As data is prepared for transport, it is passed from the highest to the lowest layer, with each layer adding more information. Because of this, a security control at a higher layer cannot provide full protection for lower layers because the lower layers add information to the communications after the higher layer security controls have been applied. The primary disadvantage of lower layer security controls is that they are less flexible and granular than higher layer controls. Accordingly, network layer controls have become widely used for securing communications because they provide a more balanced solution."
      }
    ]
  },
  {
    "title": "IPsec",
    "subsections": [
      {
        "content": "IPsec is a network layer security protocol with two main components:"
      },
      {
        "title": "Encapsulating Security Payload (ESP)",
        "content": [
          {
            "text": "ESP is the protocol that transports the encrypted and integrity-protected network communications across the network. If only integrity protection is needed without encryption, the ESP protocol can use NULL encryption. An older method for IPsec transport of non-encrypted data involves the use of the Authentication Header (AH) protocol, but this method is no longer recommended by this guidance."
          }
        ]
      }
    ]
  },
  {
    "title": "CURRENT_PAGE_RAW_OCR_TEXT",
    "subsections": [
      {
        "content": "Only implementations of NIST-approved cryptographic algorithms specified in Federal Information Processing Standards (FIPS) or NIST Special Publications (SPs) and contained in FIPS-validated cryptographic modules shall be used in IPsec VPN deployments for compliance with this guidance. The FIPS 140 specifications [13][14] define how cryptographic modules will be validated. One requirement of FIPS 140 is that the module be capable of operating in a mode where all algorithms are NIST approved. NIST-approved algorithms are specified in a FIPS (e.g., FIPS 180, Secure Hash Standard) or in a NIST SP (e.g., SP 800-56A, Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography). Some implementations can run in both FIPS mode and non-FIPS mode, so it is important to set and verify the mode of operation of the IKE and IPsec modules."
      },
      {
        "content": "The Cryptographic Module Validation Program (CMVP) is a joint effort between NIST and the Communications Security Establishment (CSE) of the Government of Canada for the validation of cryptographic modules against FIPS 140 [13][14]. The Cryptographic Algorithm Validation Program (CAVP) provides validation testing of FIPS-approved and NIST-recommended cryptographic algorithms and their individual components. Cryptographic algorithm validation is a prerequisite of cryptographic module validation."
      },
      {
        "content": "Cryptographic recommendations in this document are based on the time of publication of this document and may be superseded by other publications in the future. The References section contains a list of relevant FIPS, SPs, and Internet Engineering Task Force (IETF) standards related to IKE and IPsec."
      },
      {
        "content": "Approved algorithms and their options for IKE and IPsec as of this writing are listed in Table 1. NIST's current cryptographic timeline requirements are specified in SP 800-131A [18]. Federal agencies that want to provide IPsec VPN services in compliance with NIST's recommendation or requirements must ensure that their systems will be upgraded to NIST-recommended or approved algorithms and key lengths before the current algorithms and their key lengths become disallowed. Federal agencies should require their IPsec VPN vendors to have the necessary upgrades available early enough for testing and deployment in the field."
      },
      {
        "content": "The strongest possible cryptographic algorithms and key lengths that are NIST-approved should be used for authentication, encryption, and integrity protection unless they are incompatible with interoperability, performance, or export constraints."
      },
      {
        "content": "In addition to providing specific recommendations related to configuring cryptography for IPsec, this guide presents a phased approach to IPsec planning and implementation that can help in achieving successful IPsec deployments. The five phases of the approach are as follows:"
      },
      {
        "content": "Identify Needs \u2013 Identify the need to protect network communications and determine how that need can best be met.\nDesign the Solution \u2013 Make design decisions in several areas, including architectural\n```# Considerations for IPsec Implementation"
      },
      {
        "content": "Considerations, authentication methods, cryptographic policy, and packet filters. The placement of an IPsec gateway has potential security, functionality, and performance implications. An authentication solution should be selected based primarily on maintenance, scalability, and security. Packet filters should apply appropriate protections to traffic and not protect other types of traffic for performance or functionality reasons."
      },
      {
        "title": "3. Implement and Test a Prototype",
        "content": [
          {
            "text": "Test a prototype of the designed solution in a lab or test environment to identify any potential issues. Testing should evaluate several factors, including connectivity, protection, authentication, application compatibility, management, logging, performance, the security of the implementation, and component interoperability."
          }
        ]
      },
      {
        "title": "4. Deploy the Solution",
        "content": [
          {
            "text": "Gradually deploy IPsec throughout the enterprise. Existing network infrastructure, applications, and users should be moved incrementally over time to the new IPsec solution. This provides administrators an opportunity to evaluate the impact of the IPsec solution and resolve issues prior to enterprise-wide deployment."
          }
        ]
      }
    ]
  },
  {
    "title": "1 Introduction",
    "subsections": [
      {
        "title": "1.1 Purpose and Scope",
        "content": [
          {
            "text": "This publication seeks to assist organizations in mitigating the risks associated with the transmission of sensitive information across networks by providing practical guidance for implementing security services based on Internet Protocol Security (IPsec). This document presents information that is independent of particular hardware platforms, operating systems, and applications other than providing real-world examples to illustrate particular concepts. Specifically, the document includes a discussion of the need for network layer security services, then focuses on how IPsec provides them and how organizations can implement IPsec. The document uses a case-based approach to show how IPsec can be used to provide security for different scenarios. It also describes alternatives to IPsec and discusses the circumstances under which each alternative may be appropriate."
          }
        ]
      },
      {
        "title": "1.2 Document Structure",
        "content": [
          {
            "text": "The remainder of this document is organized into the following sections and appendices:\n- Section 2 discusses the need for network layer security, introduces the# Concept of a Virtual Private Network (VPN)"
          },
          {
            "text": "This document defines the primary VPN architectures for IPsec (a collection of protocols that assist in protecting communications over networks)."
          }
        ]
      }
    ]
  },
  {
    "title": "2 Network Layer Security",
    "subsections": [
      {
        "content": "This section provides a general introduction to network layer security\u2014protecting network communications at the layer that is responsible for routing packets across networks. It first introduces the Internet Protocol (IP) model and its layers, then discusses the need to use security controls at each layer to protect communications. It includes a brief introduction to IPsec, primarily focused on the types of protection IPsec can provide for communications. This section also briefly introduces VPN services, architectures, features, and common uses and explains what types of protection a VPN can provide."
      }
    ]
  },
  {
    "title": "Security Controls in Network Communications",
    "subsections": [
      {
        "content": "From highest to lowest, are shown in Figure 1. Security controls exist for network communications at each layer of the IP model. As previously explained, data is passed from the highest to the lowest layer, with each layer adding more information. Therefore, a security control at a higher layer cannot provide full protection for lower layers because the lower layers perform functions of which the higher layers are not aware."
      },
      {
        "content": "The following items discuss the security controls that are available at each layer:"
      },
      {
        "title": "Application Layer",
        "content": [
          {
            "text": "Separate controls must be established for each application. For example, if an application needs to protect sensitive data sent across networks, the application may need to be modified to provide this protection. While this allows for a high degree of control and flexibility over the application's security, it may require a large resource investment to properly add and configure controls for each application. Designing a cryptographically sound application protocol is very difficult, and implementing it properly is even more challenging, so creating new application layer security controls is likely to create vulnerabilities. Also, some applications, particularly commercial off-the-shelf (COTS) software, may not be capable of providing such protection."
          },
          {
            "text": "While application layer controls can protect application data, they cannot protect communication metadata, such as source and destination IP addresses, because this information exists at a lower layer. Whenever possible, application layer controls for protecting network communications should be standards-based solutions that have been in use for some time. One example is Secure/Multipurpose Internet Mail Extensions (S/MIME) [19], which is commonly used to encrypt email messages. Another example is the Secure Shell (SSH) [20] protocol, which encrypts remote login sessions."
          }
        ]
      },
      {
        "title": "Transport Layer",
        "content": [
          {
            "text": "Controls at this layer can be used to protect the data in a single communication session between two hosts, often called a netflow. Because IP information is added at the network layer, transport layer controls cannot protect it. In the past, there have been many protocols that protect different netflows, but the current best practice is to use Transport Layer Security (TLS) [21] to protect TCP streams and Datagram Transport Layer Security (DTLS) [22] to protect UDP datagrams."
          },
          {
            "text": "The use of TLS or DTLS typically requires each application to support TLS or DTLS; however, unlike application layer controls (which typically involve extensive customization of the application), transport layer controls such as TLS and DTLS are less intrusive because they simply protect network communications and do not need to understand the application's functions or characteristics. Although using TLS or DTLS may require modifying some applications, these protocols are well-tested and are a relatively low-risk option compared to adding protection at the application layer instead.\n```# CURRENT_PAGE_RAW_OCR_TEXT"
          },
          {
            "text": "Alternatively, an application could use a TLS proxy instead of building native support for TLS or DTLS. The transport layer can only provide transport security, not data origin security. For example, a TLS-based connection between two email servers protects the transport from eavesdroppers but does not protect the message content transmitted within that TLS connection from manipulation by one of the two email servers. TLS and DTLS are sometimes deployed as a generic VPN solution protecting all IP traffic instead of only protecting a netflow. Such VPNs, commonly called Secure Sockets Layer (SSL) VPNs, work on the network layer but use an application at the transport layer."
          }
        ]
      },
      {
        "title": "Network Layer",
        "content": [
          {
            "text": "Controls at this layer apply to all applications and are not application-specific. For example, all network communications between two hosts or networks can be protected at this layer without modifying any applications on the clients or the servers. In many environments, network layer controls such as IPsec provide a much better solution than transport or application layer controls because of the difficulties in adding controls to individual applications. Network layer controls also provide a way for network administrators to enforce certain security policies."
          },
          {
            "text": "Another advantage of network layer controls is that since IP information (e.g., IP addresses) is added at this layer, the controls can protect both the data within the packets and the IP information for each packet. However, network layer controls provide less control and flexibility for protecting specific applications than transport and application layer controls."
          }
        ]
      },
      {
        "title": "Data Link Layer",
        "content": [
          {
            "text": "Data link layer controls are applied to all communications on a specific physical link, such as a dedicated circuit between two buildings or a WiFi network. Data link layer controls for dedicated circuits are most often provided by specialized hardware devices known as data link encryptors; data link layer controls for WiFi networks are usually provided through WiFi chipset firmware. Because the data link layer is below the network layer, controls at this layer can protect both data and IP information."
          },
          {
            "text": "Compared to controls at the other layers, data link layer controls are relatively simple, which makes them easier to implement. They also support other network layer protocols besides IP. Because data link layer controls are specific to a particular physical link or local WiFi signal, they are poorly suited to protecting connections to remote endpoints, such as establishing a VPN over the internet."
          },
          {
            "text": "An internet-based connection is typically composed of several physical links chained together; protecting such a connection with data link layer controls would involve many parties and different protocols for each part of the physical chain. It is easier to consider.# The Internet as a Whole"
          },
          {
            "text": "The internet as a whole to be untrustworthy and use controls at the network, transport, or application layer. Data link layer protocols have been used for many years primarily to provide additional protection for specific physical links that should not be trusted. Because network layer security controls can provide protection for many applications at once without modifying them, these controls have been used frequently for securing communications, particularly over shared networks such as the internet. Network layer security controls provide a single solution for protecting all data from all applications, as well as protecting IP address, protocol, and port information. However, in many cases, controls at another layer are better suited to providing protection than network layer controls. For example, if only one or two applications need protection, a network layer control may be excessive. An application is often not aware of the (lack of) protection offered by the network or data link layer. Controls at each layer offer advantages and features that controls at other layers do not. Information on data link, transport, and application layer alternatives to network layer controls is provided in Section 8."
          }
        ]
      },
      {
        "title": "2.2 The IPsec Protocol",
        "content": [
          {
            "text": "IPsec has emerged as the most commonly used network layer security control for protecting communications. IPsec is a framework of open standards for ensuring private communications over IP networks. The Internet Key Exchange (IKE) protocol is used to securely negotiate IPsec parameters and encryption keys. IKE is described in Section 3."
          },
          {
            "text": "The IPsec Working Group at the Internet Engineering Task Force (IETF) is responsible for maintaining and publishing the standards for IKE and IPsec. Documents produced by IETF Working Groups are defined in two types: Request for Comments (RFCs), which are completed specifications, and Internet-Drafts, which are working documents that may become RFCs. IKEv2 is specified in [23]. The Encapsulating Security Payload (ESP), the core IPsec security protocol, is specified in [24]. Algorithm implementation and usage guidelines are specified in [25] for IKEv2 and [26] for IPsec. Various extensions to IKEv2 have their own RFC specifications. The IKE and IPsec protocols originated at the IETF almost three decades ago. Some of their history, such as the difference between IPsec-v2 and IPsec-v3, has been documented in the IPsec roadmap document [27]."
          },
          {
            "text": "Depending on how IPsec is implemented and configured, it can provide any combination of the following types of protection:"
          },
          {
            "text": "Confidentiality. IPsec ensures that data cannot be discovered by unauthorized parties. This is accomplished by encrypting and decrypting data using a cryptographic algorithm and a secret key\u2014a value known only to the two parties exchanging data. The data can only be decrypted by someone who has the secret key. While it is possible to use IPsec# IPsec Security Features"
          }
        ]
      },
      {
        "title": "Integrity",
        "content": [
          {
            "text": "IPsec determines if data has been changed (intentionally or unintentionally) during transit. The integrity of data can be assured by generating a message authentication code (MAC) value, which is a cryptographic checksum (hash) of the data made with a mutually agreed secret key (different from the encryption secret key). If the data is altered, the MAC's verification will fail."
          }
        ]
      },
      {
        "title": "Confidentiality and Integrity",
        "content": [
          {
            "text": "Both types of checks can be combined into one Authenticated Encryption with Associated Data (AEAD) algorithm. This combines symmetric encryption and cryptographic checksums into one process using a single secret key rather than two separate keys. Both parties still need to have the same secret key and use the same associated data."
          }
        ]
      },
      {
        "title": "Peer Authentication",
        "content": [
          {
            "text": "Each IPsec endpoint confirms the identity of the other IPsec endpoint with which it wishes to communicate, ensuring that the network traffic and data is only transmitted to the expected and authorized endpoint."
          }
        ]
      },
      {
        "title": "Replay Protection",
        "content": [
          {
            "text": "The same data will not be accepted multiple times, and data is not accepted grossly out of order. This prevents attackers from copying and retransmitting valid IPsec encrypted data for malicious purposes. IPsec (like UDP) does not ensure that data is delivered in the exact order in which it was sent. The receiver has a Replay Window where it will store out-of-order received messages before decrypting and delivering these messages to the operating system in the right order."
          }
        ]
      },
      {
        "title": "Traffic Analysis Protection",
        "content": [
          {
            "text": "When IPsec's tunnel mode is used (see Section 4.1.1), a person monitoring network traffic does not know which parties are communicating, how often communications are occurring, or how much data is being exchanged. While the number and size of the encrypted packets being exchanged can be counted, the traffic flow confidentiality (TFC) capabilities of ESP can pad all packets to a single length (usually the maximum transmission unit [MTU]), and dummy packets can be sent to further obfuscate the timing of the actual communication."
          }
        ]
      },
      {
        "title": "Access Control",
        "content": [
          {
            "text": "IPsec endpoints can perform filtering to ensure that only authorized IPsec users can access particular network resources. IPsec endpoints can also allow or block certain types of network traffic, such as allowing web server access but denying file sharing. This is called policy-based IPsec. Routing-based IPsec accepts all traffic at the IPsec policy layer, but both endpoints filter valid traffic by setting routes into a specific IPsec interface. In other words, the routing table acts as the policy filter. Policy-based IPsec is more secure than routing-based IPsec, as the security of the policy works independently from the security of the remote endpoint. Policy-based IPsec is not vulnerable to accidental or malicious routing table changes, and it prevents leaking packets to the local network, since local packets do not use the routing table. IPsec-based access control works independently from other access control mechanisms, such as...# Firewall Services or Other Mandatory Access Control Mechanisms"
          },
          {
            "text": "Perfect Forward Secrecy (PFS). IPsec endpoints create session keys that are changed frequently, typically once an hour. Afterwards, the endpoints wipe the old session keys from volatile memory, and no entities are left with a copy of these private decryption keys. Since expired keys are not saved, any encrypted traffic monitored and stored cannot be decrypted at a later time by compromising an IPsec endpoint and obtaining the encryption/decryption keys belonging to past IPsec sessions. Normally, new keys are generated based on the generated shared secret of the original key exchange using a key derivation function (KDF). To guarantee that new key material has no relationship to the old key exchange, fresh session keys can, optionally, be generated by performing a new Diffie-Hellman (DH) key exchange instead of reusing the old key exchange's generated shared secret to generate new session keys. This method of using a fresh key exchange provides perfect forward secrecy (PFS). When resources allow, PFS should be used.\n\n\nMobility. The outer IP address of an endpoint can change without causing an interruption to the encrypted data flow. Since the application is communicating using the inner (encrypted) IP address, it does not matter that the outer IP address changes. This allows a device to switch from WiFi to Ethernet to mobile data without application interruption."
          },
          {
            "text": "Perfect Forward Secrecy (PFS). IPsec endpoints create session keys that are changed frequently, typically once an hour. Afterwards, the endpoints wipe the old session keys from volatile memory, and no entities are left with a copy of these private decryption keys. Since expired keys are not saved, any encrypted traffic monitored and stored cannot be decrypted at a later time by compromising an IPsec endpoint and obtaining the encryption/decryption keys belonging to past IPsec sessions. Normally, new keys are generated based on the generated shared secret of the original key exchange using a key derivation function (KDF). To guarantee that new key material has no relationship to the old key exchange, fresh session keys can, optionally, be generated by performing a new Diffie-Hellman (DH) key exchange instead of reusing the old key exchange's generated shared secret to generate new session keys. This method of using a fresh key exchange provides perfect forward secrecy (PFS). When resources allow, PFS should be used."
          },
          {
            "text": "Mobility. The outer IP address of an endpoint can change without causing an interruption to the encrypted data flow. Since the application is communicating using the inner (encrypted) IP address, it does not matter that the outer IP address changes. This allows a device to switch from WiFi to Ethernet to mobile data without application interruption."
          }
        ]
      }
    ]
  },
  {
    "title": "2.3.2 Integrity",
    "subsections": [
      {
        "content": "Integrity is provided by a message authentication algorithm. The algorithm takes input data and a secret integrity key and produces a MAC. The data and MAC are sent across the network. The receiver calculates the MAC on the received data using the same secret integrity key (which has been previously established between the sender and receiver). If there is any change in the message and/or its MAC, a verification of the MAC will fail, and the message must be discarded. Common algorithms that implement integrity protection are:\n- The keyed-hash message authentication code (HMAC) algorithm specified in Federal Information Processing Standard (FIPS) 198 [29], which uses a hash function from FIPS 180 [30] (i.e., Secure Hash Algorithm [SHA]: SHA-1 or the SHA-2 family of hash functions, also known as HMAC-SHA-2). The SHA-3 family might be added in the future.\n- A mode of AES, as specified in FIPS 197 [31]. Included modes are AES-Cipher Block Chaining (AES-CBC), AES-Cipher-Based Message Authentication Code (AES-CMAC) [32], and AES-Galois Message Authentication Code (AES-GMAC) [33]. While commonly deployed on Internet of Things (IoT) devices, AES-XCBC is not a NIST-approved integrity algorithm."
      }
    ]
  },
  {
    "title": "2.3.3 Establishment of Shared Secret Keys",
    "subsections": [
      {
        "content": "VPNs typically use the DH key exchange algorithm to create a confidential communication channel to calculate a shared key between the two endpoints that an eavesdropper cannot obtain or compute. DH key exchanges can be based on finite field cryptography (\"classic\" or \"modular\" DH) or on elliptic curve cryptography (ECDH). After performing the DH key exchange and calculating the shared key, the endpoints still need to authenticate each other to ensure that the confidential communication channel is set up with the expected party and not somebody else."
      }
    ]
  },
  {
    "title": "2.3.4 Peer Authentication",
    "subsections": [
      {
        "content": "A digital signature algorithm is used for peer authentication. It uses two separate keys: a public key and a private key. The private key is used to digitally sign data to be sent to a receiving party along with the signature, and the public key is used by the receiver to verify the digital signature on the received data. These keys are often referred to as public/private key pairs. When an individual's private key is used to digitally sign data, only that same# Individual's Corresponding Public Key"
      },
      {
        "content": "An individual's corresponding public key can be used to verify the digital signature. Common algorithms that are used to generate and verify digital signatures include RSA, the Digital Signature Algorithm (DSA), and the Elliptic Curve Digital Signature Algorithm (ECDSA). NIST-approved digital signature algorithms are specified in FIPS 186 [34][35]."
      },
      {
        "title": "VPNs and Asymmetric Cryptography",
        "content": [
          {
            "text": "VPNs usually use asymmetric cryptography for identity authentication. Such a public/private key pair can be used by itself or contained within an X.509 certificate. A VPN entity is authenticated by proving it has possession of the private key that corresponds to a known public key as well as the secret key computed by the parties during the DH key exchange. This binds the private communication channel (i.e., the VPN) to the expected identities. The public key can verify this proof without having a copy of the private key. Thus, as long as both parties each have the other's public key and their own private key, they can establish an authenticated private channel through which they can communicate."
          }
        ]
      },
      {
        "title": "Pre-Shared Key (PSK) Authentication",
        "content": [
          {
            "text": "A less secure method of identity authentication is using a pre-shared key (PSK). Parties authenticate each other's identity based on the fact that no one else has possession of this shared key, which must be established out-of-band. A VPN entity's identity is authenticated by proving that it has possession of the PSK as well as the secret key computed by the parties during the DH key exchange. This binds the private communication channel to the expected identities."
          },
          {
            "text": "The main disadvantage of VPNs using PSKs for authentication is that all parties that know the PSK can impersonate every other party in the group. PSKs are also vulnerable to online and offline dictionary attacks. That means that PSKs must be highly random (providing at least 112 bits of security strength) and must not be based on simple words or phrases. Otherwise, an attacker observing the key exchange can attempt to use an offline brute-force attack to find the PSK by calculating the authentication payload based on dictionary words and comparing the generated authentication payloads to the observed authentication payload. Unfortunately, experience has shown that administrators often use weak PSKs that are vulnerable to dictionary attacks."
          }
        ]
      },
      {
        "title": "2.3.5 Deployment Risks",
        "content": [
          {
            "text": "VPNs do not remove all risk from networking, particularly for communications that occur over public networks. One potential problem is the strength of the implementation. For example, flaws in an encryption algorithm or the software implementing the algorithm could allow attackers to decrypt intercepted traffic, and random number generators that do not produce sufficiently random values as keys could provide additional attack possibilities. Another issue is encryption key disclosure; an attacker who discovers a symmetric key could decrypt previously recorded or current traffic. An attacker obtaining the private key of a...# CURRENT_PAGE_RAW_OCR_TEXT"
          }
        ]
      },
      {
        "title": "Public/Private Key Pair",
        "content": [
          {
            "text": "Public/private key pair (or PSK) used for identity authentication could potentially pose as a legitimate user."
          }
        ]
      },
      {
        "title": "Availability Risks",
        "content": [
          {
            "text": "Another area of risk involves availability. A common model for information assurance is based on the concepts of confidentiality, integrity, and availability. Although VPNs are designed to support confidentiality and integrity, they generally do not improve availability (i.e., the ability for authorized users to access systems as needed). In fact, many VPN implementations actually tend to decrease availability somewhat because they add more components, complexity, and services to the existing network infrastructure."
          }
        ]
      },
      {
        "title": "VPN Architecture Risks",
        "content": [
          {
            "text": "Risks are highly dependent upon the chosen VPN architecture and the details of the implementation. Section 2.4 describes the primary VPN architectures."
          },
          {
            "subsection": "2.4 Primary IPsec-Based VPN Architectures",
            "text": []
          },
          {
            "text": "There are four primary architectures for IPsec-based VPNs:"
          },
          {
            "text": "Gateway-to-gateway\nRemote access\nHost-to-host\nMesh"
          },
          {
            "text": "IPsec-based VPNs are often used to provide secure network communications between two networks. This is typically done by deploying a VPN gateway onto each network and establishing a VPN connection between the two gateways. Traffic between the two networks that needs to be secured passes within the established VPN connection between the two VPN gateways. The VPN gateway may be a dedicated device that only performs VPN functions, or it may be part of another network device, such as a firewall or router."
          },
          {
            "text": "Figure 2 shows an example of an IPsec network architecture that uses the gateway-to-gateway model to provide a protected connection between the two networks."
          },
          {
            "text": "This model is relatively simple to understand. To facilitate VPN connections, one of the VPN gateways issues a request to the other gateway to establish an IPsec connection. The two VPN gateways exchange information with each other and create an IPsec connection. Routing on each network is configured so that as hosts on one network need to communicate with hosts on the other network, their network traffic is automatically routed through the IPsec connection, protecting it appropriately. A single IPsec connection establishing a cryptographically protected tunnel between the gateways can support all communications between the two networks, or multiple IPsec connections can each protect different types or classes of traffic. The gateways connect to each other using IPv4 or IPv6 protocols. When using tunnel mode, the IP address family of the outer ESP packets transmitted between the gateways does not need to be the same as the IP address family of the encrypted IP packets. For example, an IPsec connection between the hosts on IPv6 addresses 2001:db8:1:2::45 and 2001:db8:1:2::23 could be used to transport IPv4 traffic from 192.0.2.0/24 to 198.51.100.0/24. These types of IPsec.# VPN Architectures"
          }
        ]
      },
      {
        "title": "Gateway-to-Gateway VPN",
        "content": [
          {
            "text": "Connections are often called 6in4 or 4in6, respectively, to denote the inner and outer IP families. Figure 2 illustrates a gateway-to-gateway VPN that does not provide full protection for data throughout its transit. In fact, the gateway-to-gateway architecture only protects data between the two gateways, as denoted by the solid line. The dashed lines indicate that communications between VPN clients and their local gateway and between the remote gateway and destination hosts (e.g., servers) are not protected by the gateway-to-gateway architecture."
          },
          {
            "text": "The other VPN models provide protection for more of the transit path. The gateway-to-gateway architecture is most often used when connecting two secured networks, such as linking a branch office to headquarters over the internet. The gateway-to-gateway architecture is the easiest to implement in terms of user and host management. Gateway-to-gateway VPNs are typically transparent to users; the use of a gateway-to-gateway VPN connection is not noticeable to them. Also, the users' systems and the target hosts (e.g., servers) do not need to have any VPN client software installed, nor should they require any reconfiguration, to be able to use the VPN."
          },
          {
            "text": "If the gateway-to-gateway VPN connects two different organizations, it is possible that some special DNS configuration is required if machines in one network need to be able to reach machines in the other network by DNS name. If machines are found by their IP address, no special DNS handling is required."
          }
        ]
      },
      {
        "title": "Remote Access",
        "content": [
          {
            "text": "An increasingly common VPN architecture is the remote access architecture. The organization deploys a VPN gateway onto its network; each remote access user then establishes a VPN connection between their remote device (host) and the VPN gateway. As with the gateway-to-gateway architecture, the VPN gateway may be a dedicated device or part of another network device. Figure 3 shows an example of an IPsec remote access architecture that provides a protected connection for the remote user."
          },
          {
            "text": "In this model, IPsec connections are created as needed for each individual mobile device that has been configured to act as an IPsec client with the organization's IPsec gateway. When a remote user wishes to use computing resources through the VPN, the user's host initiates communications with the VPN gateway. The user is typically asked by the VPN gateway to authenticate their identity before the connection can be established. The VPN gateway can perform the authentication itself or consult a dedicated authentication server. The client (the remote device in Figure 3) and gateway exchange information, and the IPsec connection is established. The user can now use the organization's computing resources, and the network traffic between the user's host (the remote device in Figure 3) and the VPN gateway will be protected by the IPsec connection."
          },
          {
            "text": "Some organizations do not want to receive all of the internet traffic generated.# Remote Access VPN"
          },
          {
            "text": "by a remote host. For example, if a host is browsing the internet, that traffic could be prohibited from going through the VPN connection. Only traffic for the organization itself will be sent over the VPN connection; a separate internet connection would be required. This is called a split-tunnel VPN."
          },
          {
            "text": "Other organizations do not trust the remote hosts to directly communicate with the internet over a separate internet connection while also being connected via a VPN connection to the organizational computer resources since that internet connection could be used to attack or infiltrate the VPN connection. If an organization normally has a strict firewall preventing unauthorized access of the organization's computer resources by the hosts in the local network, it would not want a remote host to bypass this security when it is connecting from a remote location. In that case, a remote host will send all its traffic via the VPN connection to the VPN gateway; this allows IPsec protection to be applied to all of the traffic. Traffic received and decrypted by the VPN gateway that is not meant for the local organization can be sent to the organization's firewall for inspection and then sent onwards through the organization's internet connection. Similarly, response traffic from the internet flows back via the organization's firewall to the VPN gateway and is then sent via the VPN connection to the remote host."
          },
          {
            "text": "As shown in Figure 3, the remote access VPN does not provide full protection for data throughout transit. The dashed lines indicate that communications between the gateway and the destination hosts (e.g., servers, laptops, desktops) on the right side of the figure are not protected. The remote access VPN architecture is most often used when connecting hosts on unsecured networks to resources on secured networks, such as linking traveling employees around the world to headquarters over the internet. The remote access VPN is somewhat complex to implement and maintain in terms of user and host management: the VPN gateway (or a designated device) must manage the credentials of all of the remote devices (hosts) and their authorized users, and all of these might frequently change. Remote access VPNs are typically not transparent to users because they must authenticate before using the VPN. Also, the user's remote device needs to have a VPN connection configured. Some devices do not allow more than one VPN connection to be active at a time."
          },
          {
            "text": "Remote access users can find themselves on networks that, intentionally or not, cause VPN connections to fail. Some unintentional failures can be worked around by always having the latest software and IPsec VPN features supported. Standard IKE runs over the UDP protocol, and ESP can also use UDP. Some networks block all UDP packets, causing IKE and ESP-over-UDP traffic to be dropped. As a method of last resort, IPsec communication can be tunneled over TCP, which is a more universally accepted protocol. For added insurance, TLS can# VPN Architectures"
          }
        ]
      },
      {
        "title": "2.4.3 Host-to-Host",
        "content": [
          {
            "text": "The host-to-host VPN architecture is used for a variety of reasons. For security reasons, some hosts may only accept connections protected by a VPN. This makes it more secure against unauthenticated access attempts. For example, if the web server software on the host is vulnerable to a specific attack, it is only exposed to those who also have VPN credentials to contact the host. Another common issue is the presence of attackers performing port scans or dictionary attacks against the login method (e.g., SSH). With a VPN, these ports are not accessible to attackers."
          },
          {
            "text": "In this case, the organization configures the server to provide VPN services and the system administrators' machines (or some users' machine) to act as VPN clients. The system administrators use the VPN client when needed to establish protected connections to the remote server. Figure 4 shows an example of an IPsec network architecture that uses the host-to-host architecture to provide a protected connection to a server for an administrator (or a user) that is remote to that server. The purpose of a host-to-host VPN connection is to protect the traffic from one end of the connection to the other end."
          },
          {
            "text": "In this model, IPsec connections are created as needed for each individual remote VPN administrator or user. The remote hosts have been configured to act as IPsec clients with another remote host that is a server. When a user or administrator wishes to use or modify resources on the server, that user or administrator's host initiates IPsec communications with the server. The server acts as an IPsec server that requests the person authenticate before the connection can be established. The host and the server exchange information, and if the authentication is successful, the IPsec connection is established. The person can now access the server, and the network traffic between the host and the server will be protected by the IPsec connection."
          },
          {
            "text": "As shown in Figure 4, the host-to-host VPN (indicated by the solid line) provides protection for data throughout its transit. This can be a problem because network-based firewalls, intrusion detection systems, and other network devices cannot be deployed to inspect the traffic in transit, which effectively circumvents certain layers of security. The host-to-host VPN is most often used when a small number of trusted users or administrators need to access a system from remote.# CURRENT_PAGE_RAW_OCR_TEXT"
          }
        ]
      }
    ]
  },
  {
    "title": "Security Controller and Nodes",
    "subsections": [
      {
        "content": "With a security controller and various nodes (hosts), the security controller enforces the security policies of its nodes. All of the nodes are configured by the security controller, usually via the Network Configuration Protocol (NETCONF) [36]. For communication between two nodes within a network or within two different networks, each node consults its local security controller. If the nodes have enough resources to set up IPsec, the security controller(s) can relay the authentication and connection parameters to its node(s), and the two nodes can then negotiate the IPsec VPN connection."
      },
      {
        "content": "This is shown in Figure 5 for communication between hosts (i.e., nodes) A1 and B1 (at the top of the figure). Host A1 contacts its security controller SC1. SC1 and SC2 (host B1's security controller) negotiate the IKE and IPsec parameters and convey them to their respective hosts (A1 or B1, as appropriate). Host A1 can now initiate an IKE session with B1, establishing an IPsec connection between A1 and B1. The IPsec secret key material is only known by the A1 and B1 hosts and not by the security controller. The hosts could optionally transfer these secret keys to their security controller to facilitate monitoring via decryption by the security controller or another dedicated monitoring device that takes its configuration from the security controller."
      },
      {
        "content": "When establishing a connection between two hosts in two different networks, if the hosts do not have enough resources to negotiate an IPsec connection, the security controller in each network can negotiate an IPsec connection with the security controller in the other network on behalf of its host and give the keying material and security policies for the IPsec connection to that host. The two hosts receive the exact same IPsec policies and the same encryption keys from their security controllers to install in their IPsec subsystems (key exchange is performed by the two corresponding security controllers). This latter method is called an IKEless IPsec connection. It is not the preferred method since, in this case, the security controllers are aware of all of the secret keys used by their hosts, and the security controllers (or whoever manages to get control of one of them) can decrypt all of the host-to-host IPsec-protected traffic or masquerade as one of the hosts under its control. An IKEless connection can also be established by a single security controller between two of its own managed nodes."
      },
      {
        "content": "A third method for configuring hosts by a security controller is for the hosts to give their key-exchange public keys to the security controller. When two hosts establish an IPsec connection, the security controller distributes each host's key-exchange public key and a nonce to the other host. Each of the hosts uses the public key and nonce from the other host along with its own private key to generate a secret shared key, which is then used for an IPsec connection. The security controller does not know the private keys or the shared key of the IPsec devices. Therefore, the security controllers cannot decrypt any host-to-host.\n```# Communication and Security"
      },
      {
        "content": "Communication and cannot masquerade as one of the hosts. The same method can be used for two nodes behind different security controllers. In that case, the security controllers distribute the nodes' public keys to each other and relay these to the nodes they manage."
      },
      {
        "title": "2.4.3.2 Anonymous IPsec VPN",
        "content": [
          {
            "text": "The hardest part of deploying an IPsec implementation is the authentication mechanisms, which depend on the prior deployment of a CA or other identity verifier mechanism. If a network only needs to protect itself from passive attackers (i.e., attackers that can eavesdrop but not send their own malicious packets), then anonymous IPsec can be used. Therefore, anonymous IPsec connections are typically host-to-host connections and not gateway-based connections because an IPsec gateway typically requires authentication of the connecting gateway or host and authenticates itself to that entity. A variant of this is server-only authenticated IPsec. This works similarly to regular HTTPS connections where a client connects to the server and the server has to authenticate itself to the client, but the client remains anonymous. Any client authentication then happens at the application layer and not at the network layer."
          },
          {
            "text": "The advantage of anonymous IPsec is that it can be deployed quickly. Once in place and protecting against passive attackers, the configuration can be slowly migrated to an authenticated IPsec capability that also protects against active attacks. Due to its security risk, anonymous IPsec VPNs are discouraged by NIST."
          }
        ]
      },
      {
        "title": "2.5 Summary",
        "content": [
          {
            "text": "Section 2 describes the IP model and its layers\u2014application, transport, network, and data link\u2014and explains how security controls at each layer provide different types of protection for IP communications. IPsec, a network layer security control, can provide several types of protection for data, depending on its configuration. The section describes VPNs and highlights the VPN architectures. IPsec is a framework of open standards for ensuring private communications over IP networks and is the standard used for network layer security control. It can provide several types of protection, including maintaining confidentiality and integrity, preventing packet replay attacks and traffic analysis, and enforcing access restrictions."
          },
          {
            "text": "IKE is the protocol that is used to negotiate, update, and maintain IPsec connections.\nA VPN is a virtual network built on top of existing networks that can provide a secure communications mechanism for data and IP information transmitted between networks.\nVPNs can be used to secure communication between individual hosts (host-to-host) or multiple networks (gateway-to-gateway) or to provide secure remote access for mobile devices to a home or enterprise network. Hosts within a network can build a mesh of IPsec connections between all nodes or use a security controller to assist them with building VPN connections to other nodes.\nAlthough VPNs can reduce the risks of operating over an insecure network, they...# CURRENT_PAGE_RAW_OCR_TEXT"
          },
          {
            "text": "cannot eliminate them. For example, a VPN implementation may have flaws in algorithms or software that attackers can exploit. Also, VPN implementations often have at least a slightly negative impact on availability because they add components and services to existing network infrastructures."
          }
        ]
      },
      {
        "title": "3 Internet Key Exchange (IKE)",
        "content": [
          {
            "text": "When two hosts want to set up an IPsec connection with each other, the parameters of the IPsec connection need to be negotiated (e.g., the source and destination IP addresses that are allowed, the encryption algorithms to use, and the cryptographic key material to use for the encryption and decryption of packets). The hosts also need to authenticate each other. All of this is done using the Internet Key Exchange (IKE) protocol. The version of the IKE protocol described in this section is IKE version 2 (IKEv2) and is specified in RFC 7296 [23]. The differences between IKEv1 and IKEv2 are described at the end of this section."
          },
          {
            "text": "Typically, IKE runs as a privileged process, while IPsec usually runs as part of the operating system kernel. The IKE process is responsible for configuring the kernel for IPsec. The kernel is responsible for the actual packet encryption and decryption operations. The IKE process can insert a policy into the kernel that will instruct the kernel to warn the IKE process when an unencrypted packet matching certain source and destination IP addresses and/or other criteria is about to be transmitted. If the peers can mutually authenticate each other and agree on other policy details, then the IKE process can negotiate an IPsec tunnel that covers this packet. This is used for creating IPsec tunnels on demand."
          },
          {
            "subsection": "3.1 Overview of IKE",
            "text": []
          },
          {
            "text": "The IKE protocol can be considered the command channel. The IPsec protocol is the data channel; it encrypts and decrypts the IP packets and verifies that the source and destination IP address conform to the negotiated policies. The IKE protocol command channel itself also needs to be encrypted to ensure the privacy of the parameters of the IPsec connection. In other words, first the IKE encrypted connection is established, and then one or more IPsec connections are established through the protected IKE command channel. The IKE protocol is used to establish an IKE Security Association (IKE SA) [23]. An IPsec connection is called an IPsec SA or Child SA. Both IKEv2 SAs and IPsec SAs are identified by Security Parameters Index (SPI) numbers; for IKEv1, other fields are used as the SA identifier until the IPsec SPIs are established."
          },
          {
            "text": "The IKE protocol consists of UDP messages on port 500 and 4500. As shown in Figure 6, each IKE packet consists of a fixed IKE header (the first five lines of the figure) followed by the variable-length IKE data."
          },
          {
            "text": "The initiator of an IKE exchange generates a four-byte Initiator SPI. The responder generates the# four-byte Responder SPI"
          },
          {
            "text": "In the first IKE packet sent by the Initiator, the Responder SPI is 0x00000000. The SPI numbers are used to uniquely identify an established IKE SA. Each endpoint selects the corresponding IKE encryption/decryption key for an encrypted IKE message from its endpoint to the other endpoint based on the SPI numbers."
          },
          {
            "text": "An IKE session consists of IKE packet exchanges. Each exchange consists of a single request packet and a single reply packet. If there is any packet loss, it is the initiator's responsibility to retransmit its request. Each exchange packet has a message ID, which starts at zero and is incremented for each message exchange. The message ID allows for detecting retransmitted packets and handling out-of-order IKE packets. There is a distinct message ID for messages started at each IKE peer (endpoint)."
          },
          {
            "text": "The IKEv2 protocol uses two exchanges to establish an IKE SA and an associated IPsec SA. The IKE SA is then used to send and receive further configuration and management commands. The first exchange is called IKE_SA_INIT, and the second exchange is called IKE_AUTH. Together, these two exchanges are referred to as the initial exchanges. Once these two exchanges are completed, both the initiator and the responder have established the IKE SA and one IPsec SA. Once the IKE SA is established, other additional exchange types are used to establish additional IPsec SAs, rekey the existing IKE SA or the IPsec SAs, make configuration changes, perform a liveness detection of peers, and terminate IKE or IPsec SAs."
          },
          {
            "text": "The following sections describe the IKE exchanges in detail and explain how they work together to establish IPsec connections."
          }
        ]
      }
    ]
  },
  {
    "title": "Transform Combinations",
    "subsections": [
      {
        "content": "The responder selects the preferred proposal and returns a single proposal with those transforms, its own KE and nonce payloads, and a responder SPI. The initiator needs to determine the cryptographic policy that can be accepted by the responder."
      },
      {
        "content": "The initiator sends a list of transforms that represents its policy. For the initiator's (EC)DH Key Exchange algorithm, it will include the corresponding KE payload (e.g., an EC public key) of its preferred Key Exchange algorithm. If the responder does not allow this (EC)DH algorithm in any of its transforms, the responder will reply with an INVALID_KE notification that indicates the responder's preferred (EC)DH algorithm based on the list that the initiator sent. The initiator can use this response to create a new IKE_SA_INIT packet with a proper KE payload that is acceptable to both initiator and responder policies."
      },
      {
        "title": "Denial of Service Attack",
        "content": [
          {
            "text": "Since an (EC)DH computation is central processing unit (CPU) intensive, a malicious entity could send many spoofed IKE_SA_INIT messages, causing the responder to perform multiple (EC)DH key exchange calculations to try and complete the (EC)DH calculations and resulting in a denial of service attack. When a responder deems it is under attack, it may respond to an IKE_SA_INIT message with a special COOKIE payload instead of the regular payloads."
          },
          {
            "text": "The initiator that receives a response containing a COOKIE must resend its IKE_SA_INIT packet but now include that COOKIE payload. This proves to the responder that the initiator can receive packets\u2014that is, the original packet received by the responder was not simply a spoofed packet by an attacker. The responder typically encodes some information in the COOKIE\u2014such as the initiator's IP address, a timestamp, and a random value\u2014so that the COOKIE cannot be reused by an attacker redistributing it to its attacking nodes that are spoofing packets."
          },
          {
            "text": "Now the responder is assured that the initiator is an actual participant in the IKE exchange and not simply sending malicious packets using a forged (spoofed) IP address. While this could still be an attacker, at least now the responder can defend itself against this abuse by, for example, rate-limiting the number of IKE negotiation attempts allowed by that IP address."
          }
        ]
      },
      {
        "title": "NAT Detection",
        "content": [
          {
            "text": "The IKE_SA_INIT exchange is also used to detect the presence of network address translation (NAT) devices. If a NAT device is detected, the IKE negotiation will move to port 4500, and the IPsec connection will be configured to use UDP or TCP encapsulation to avoid problems with the NAT device rewriting the IP address of the IPsec packets. Often, NAT routers also drop all IP protocols except UDP and TCP, so by encapsulating the IPsec (ESP) packets into UDP or TCP, the packets will not be dropped by the NAT router."
          },
          {
            "text": "The endpoint behind the NAT device will also send one-byte KEEPALIVE packets, typically at 20-second intervals, to ensure that the NAT device will keep open the port mapping that is used by the endpoint behind NAT. This is\n```# CURRENT_PAGE_RAW_OCR_TEXT"
          },
          {
            "text": "especially important with deployments of Carrier Grade NAT (CGN) that are typically deployed on mobile data networks (LTE/5G). The KEEPALIVE packets serve no purpose beyond passing the NAT device and are discarded by any endpoint IPsec stack that receives them. After the IKE_SA_INIT exchange has completed, both endpoints have performed the (EC)DH key exchange and have generated the secret value called the SKEYSEED. All encryption and authentication keys will be derived from this value using the negotiated PRF transform. From here on, all further packets are encrypted. However, both the initiator and the responder still need to authenticate each other's identity."
          }
        ]
      },
      {
        "title": "3.2.2 The IKE_AUTH Exchange",
        "content": [
          {
            "text": "The peers still need to verify each other's identities and prove that the initial unencrypted IKE SA messages were not modified in transit. The IKE_AUTH exchange contains the payloads needed for the responder to authenticate the initiator and its previous IKE_SA_INIT exchange. The IKE_AUTH exchange also contains payloads to negotiate the first IPsec SA, such as the proposals and transforms to negotiate the cryptographic parameters, the source/destination packet policies for the IPsec SA in the form of traffic selectors for the initiator (TSi) and responder (TSr), and other options such as the mode of the IPsec SA and Configuration Payload requests for obtaining an IP address and a DNS nameserver IP address."
          },
          {
            "text": "Since authentication can involve X.509 certificates and intermediary CA certificates, this packet can end up being larger than the network MTU. To work around networks that do not handle IP fragmentation properly, the IKE protocol itself supports fragmentation to prevent fragmentation at the network layer. Typically, only the IKE_AUTH packets trigger IKE fragmentation. Typical authentication methods are X.509 certificates, raw (unsigned) public keys (e.g., RSA or ECDSA public keys, usually formatted in the SubjectPublicKeyInfo [SPKI] format), or PSKs. IKE supports the Extensible Authentication Protocol (EAP). If EAP authentication is required, more than one IKE_AUTH exchange might be required to complete the authentication. The authentication method can be different between the two endpoints, although they often use the same method. One example of using different authentication methods by each party is a remote access VPN where the server is authenticated using its X.509 certificate, but clients are authenticated via EAP-TLS."
          },
          {
            "text": "Once the IKE_SA_INIT and IKE_AUTH exchanges have successfully completed, the two hosts have set up an IKE SA and an IPsec SA. Any further communication will be sent using the encrypted and authenticated IKE SA."
          },
          {
            "subsection": "3.2.2.1 Traffic Selectors",
            "text": []
          },
          {
            "text": "The IKE_AUTH exchange negotiates the IPsec SA network parameters, such as the source and destination IP address, the address family, the source and destination ports, and the protocol, using traffic selectors. A traffic selector consists of:# CURRENT_PAGE_RAW_OCR_TEXT"
          }
        ]
      },
      {
        "title": "Traffic Selectors",
        "content": [
          {
            "text": "The traffic selector type (e.g., IPv4 or IPv6 type)\nThe IP address range (start address and end address)\nThe IP protocol number (0 means all protocols)\nThe port range (start and end port, 0-65535 means all ports)"
          },
          {
            "text": "Additional traffic selector components are possible, too, such as Network Label or Security Context. Traffic selectors are negotiated in sets of two. A set of two traffic selectors denotes the policy for the source and destination traffic\u2014one for the inbound traffic and one for the outbound traffic of the IPsec SA. The IKE_AUTH request contains at least the TSi and TSr. The TSi describes the sending and receiving address of the initiator, and the TSr describes the sending and receiving address of the responder."
          },
          {
            "text": "IKEv2 allows the concept of narrowing, where the responder picks a subset of the TSi/TSr that the initiator requested. This facilitates setting up a number of smaller-range IPsec SAs instead of one large network-to-network IPsec SA. This can enhance parallel processing. It is also used for the initiator obtaining an IP address from the responder where the initiator requests every address on the internet (by requesting 0.0.0.0/0) and is narrowed down by the responder to one IP address (e.g., 192.0.2.1/32)."
          },
          {
            "text": "An additional traffic selector pair can be included that contains the actual source, destination, and protocol values from the packet that triggered the IKE session at the initiator. This assists the responder in narrowing traffic selectors to a range that includes the traffic that the initiator wants to send to the responder."
          }
        ]
      },
      {
        "title": "3.2.2.2 Configuration Payloads",
        "content": [
          {
            "text": "Optionally, during IKE_AUTH, the hosts can also exchange Configuration Payloads (CPs). The initiator can request a number of configuration options, and the responder can respond with appropriate values. The main CPs are:"
          },
          {
            "text": "Internal IPv4 and IPv6 address and netmask\nInternal IPv4 and IPv6 DNS server to use as generic DNS resolver\nInternal IPv4 or IPv6 subnet\nInternal IPv4 or IPv6 Dynamic Host Configuration Protocol (DHCP) relay address\nInternal DNS domains for domains that must be resolved via the VPN\nInternal DNSSEC trust anchors to use for internal DNSSEC-signed domains\nApplication version"
          },
          {
            "text": "All these CPs enable the remote access VPN client to find and use resources on the remote network. By obtaining an IP address on that remote network, other hosts on that network can potentially reach the remote VPN clients as if they were present locally. CPs are not used and are ignored on gateway-to-gateway and host-to-host IPsec deployments."
          },
          {
            "text": "CPs are the successor to the IKEv1 non-standard Extended Authentication (XAUTH) and Mode Configuration (ModeCFG) payloads."
          }
        ]
      },
      {
        "title": "3.2.3 The CREATE_CHILD_SA Exchange",
        "content": [
          {
            "text": "The CREATE_CHILD_SA exchange is used for three separate tasks:"
          },
          {
            "text": "Create an additional IPsec SA\nRekey an IPsec SA, which replaces the IPsec SA with a new SA that has the same traffic selectors but new encryption keys\nRekey the IKE SA, which replaces the IKE SA encryption keys with new# Encryption Keys"
          },
          {
            "text": "Creating an additional IPsec SA uses similar IPsec payloads as those used to create the initial IPsec SA in the IKE_AUTH exchange. Either endpoint can initiate a CREATE_CHILD_SA exchange. Lifetimes for IKE and IPsec SAs are not negotiated. Each peer is responsible for rekeying the relevant SAs before the lifetime of their local policy is exceeded. Rekeying is the process of creating fresh cryptographic keys for an IKE SA or IPsec SA. IKE and IPsec keys are ephemeral and only stored in volatile memory for the duration of the lifetime of the SA. Once an SA is rekeyed, the old cryptographic keys are wiped from memory. In the event that one of the IPsec hosts is compromised, only the current session keys are still in memory, and previously recorded encrypted SA traffic cannot be decrypted. IKE SA and IPsec SA session keys typically have a lifetime of one to eight hours. A rekey request can be for one of the IPsec SAs or for the IKE SA. A new IPsec SA is negotiated and installed as a new IPsec SA without yet removing the old IPsec SA. The outbound IPsec SA is used immediately. Once traffic is received on the new inbound IPsec SA, the old IPsec SA is completely deleted. This ensures that rekeying does not lead to any traffic flow interruptions or leaking of unencrypted packets. Once an IKE SA rekey is complete, the associated IPsec SAs of the old IKE SA are transferred to the new IKE SA. The old IKE SA is then deleted."
          }
        ]
      },
      {
        "title": "3.2.4 The INFORMATIONAL Exchange",
        "content": [
          {
            "text": "The purpose of the IKE INFORMATIONAL exchange is to provide the endpoints with a way to send each other status and error messages. Some commonly used informational messages are:"
          },
          {
            "text": "Delete one or more IPsec SAs\nDelete this IKE SA\nLiveness probe (aka Dead Peer Detection [DPD])\nMobility IP address updates for Mobile IKE (MOBIKE)"
          },
          {
            "text": "Either endpoint can initiate an informational exchange. The other endpoint is obliged to return an answer to prevent the initiator (of the informational exchange) from retransmitting. A delete message denotes that the SPI of the IPsec SAs or the IKE SA is to be deleted. Deleting the IKE SA will also cause all of its IPsec SAs to be terminated and deleted."
          },
          {
            "text": "An endpoint that has not received any IPsec traffic in a while might want to verify that the remote endpoint is still alive. To do so, it can send an informational exchange message (i.e., a probe message) containing zero payloads. An endpoint receiving such an informational message must respond with an empty informational message. If these probes are not answered for a configured time period, the IKE SA and IPsec SA are terminated."
          },
          {
            "text": "A mobile device that is switching its connection (e.g., from LTE/5G to WiFi) needs to send an informational message with a notification to its remote endpoint. The remote endpoint uses both the content of the informational message, as well as the IP addresses observed from the IKE packet itself, as an indication of which IP address to use as the updated IP.# Address for the Mobile Endpoint"
          },
          {
            "text": "Successful decryption of the packet (with properly incremented Message ID to prevent replays) verifies the new IP address to use. This process is called Mobile IKE (MOBIKE) and is specified in [38]."
          }
        ]
      },
      {
        "title": "3.3 IKE Authentication Models",
        "content": [
          {
            "text": "Different deployments require different authentication methods. Usually, hosts authenticate each other using the same authentication method. But sometimes a client host authenticates a server host differently from the method used by the server to authenticate the client."
          },
          {
            "subsection": "3.3.1 Certificate-Based Authentication",
            "text": []
          },
          {
            "text": "This method, also called machine certificate authentication, is most often used for deploying IPsec within an organization when it involves a large number of devices. The organization can set up a new internal X.509 certificate deployment or reuse an existing X.509 certificate-based solution. Setting up a new host does not require any changes to the already deployed hosts. Certificate revocation lists (CRLs) and the Online Certificate Status Protocol (OCSP) can be used to revoke a particular certificate. Remote access VPN clients are often authenticated using X.509 certificates. Cloud (mesh) encryption also often uses certificate-based authentication."
          },
          {
            "text": "A host that requires the other end to authenticate itself using certificates can send a CERTREQ payload (during IKE_SA_INIT or IKE_AUTH). Both parties then exchange their certificates in CERT payloads during the IKE_AUTH exchange. Intermediate CAs can also be sent as part of the CERT payload."
          },
          {
            "text": "Since certificate-based authentication requires certificates generated by CAs that may not be trusted by the organizations verifying the certificates, this method is not always a usable solution to connect two different organizations since one (or both) of the organizations would need to trust an external CA party not under their own control. For U.S. Government organizations, the Common Policy CA can be used as a mutually trusted CA."
          },
          {
            "subsection": "3.3.2 Extensible Authentication Protocol (EAP)",
            "text": []
          },
          {
            "text": "EAP is a framework for adding arbitrary authentication methods in a standardized way to any protocol. It uses a model of a client, a server, and a backend authentication, authorization, and accounting (AAA) server. The client initiates an EAP authentication to the server. The server forwards these messages to and from the AAA server. The AAA server will let the server and client know that the client and server have successfully authenticated each other. AAA protocols with EAP support include Remote Authentication Dial-In User Service (RADIUS) [39] and Diameter [40]."
          },
          {
            "text": "The most common EAP method used with IKEv2 is EAP-TLS, although EAP-Microsoft Challenge Handshake Authentication Protocol version 2 (EAP-MSCHAPv2) is used as well. EAP-TLS uses certificates issued to users instead of certificates issued to hosts. Some devices, such as mobile phones, often do not make such a distinction. However, laptops generally have# CURRENT_PAGE_RAW_OCR_TEXT"
          }
        ]
      },
      {
        "title": "non-privileged users that cannot modify the operating system's machine certificate store.",
        "content": [
          {
            "text": "These users cannot install a machine certificate but can install a certificate for themselves for use with EAP-TLS. Usually, clients use EAP to authenticate themselves to the server, but the server is authenticated by the clients using regular certificate-based authentication."
          },
          {
            "subsection": "3.3.3 Raw Public Key Authentication",
            "text": []
          },
          {
            "text": "Authentication using the raw public key of the other entity in a communication (there are no certificates which bind the public key with the other entity's identity) is mostly used for IoT devices or when authentication of the public keys is done via publication in DNSSEC. IoT devices often do not have the memory, storage, or CPU capacity to perform X.509 certificate validation. These devices often have a hard-coded public key in their firmware that authenticates its IPsec peers."
          },
          {
            "text": "When public keys are stored in DNS, and the DNS is secured against tampering or spoofing using DNSSEC, there is no more need to use X.509 certificates. Certificates provide trust via the entity that signs the certificate, but in this case, the public key stored in the DNS itself is already signed by DNSSEC. The trust anchor is not a CA but rather a DNSSEC trust key responsible for that part of the DNS hierarchy. Instead of certificates stating the validity period of the public key, raw public keys in DNS are valid as long as these public keys are still published in the DNS. DNSSEC prevents the replay of old DNS data by adding signature lifetimes to DNS records. This type of deployment is most commonly used within a single administrative network, similar to machine-based certificate authentication."
          },
          {
            "subsection": "3.3.4 Pre-shared Secret Key (PSK) Authentication",
            "text": []
          },
          {
            "text": "PSK-based authentication is often deployed because it is the easiest to configure. Each end of the communication has the identity of the other end and their PSK. It does not require generating public keys or certificates or running an EAP infrastructure. It is most commonly used for gateway-to-gateway deployments as it does not involve adding a third-party trust anchor to the VPN gateway device."
          },
          {
            "text": "Some deployments use a PSK for authentication that is shared between the VPN server and all of the remote access VPN clients. Once the PSK has been obtained by an attacker, it can be used to impersonate any client or the remote access VPN server itself. Even if the clients are using one-time passwords (OTPs), a man-in-the-middle attacker can obtain an OTP and log in as the remote user to the real remote access VPN. Therefore, group PSKs are strongly discouraged."
          },
          {
            "text": "PSKs are often derived from dictionary words and are less than 32 characters long. Such insecure deployments are vulnerable to offline dictionary attacks. PSKs must have a high entropy value. A good PSK is pseudorandomly created and has at least 128 bits of entropy."
          },
          {
            "subsection": "3.3.5 NULL Authentication",
            "text": []
          },
          {
            "text": "NULL authentication is a special kind of authentication. It really means that no authentication is...# CURRENT_PAGE_RAW_OCR_TEXT"
          },
          {
            "text": "required. There are two common use cases for this."
          }
        ]
      },
      {
        "title": "Use Cases for NULL Authentication",
        "content": [
          {
            "text": "The first use case is to deploy IPsec to a large number of nodes (i.e., hosts) where the goal is to only protect against passive attacks. It does not protect against attackers that can perform a man-in-the-middle attack. An advantage is that no authentication system (e.g., certificates, EAP, or DNSSEC) needs to be deployed. For small-scale deployments, this method should never be used, and strong PSKs should be used instead. Sometimes a NULL authentication deployment is gradually upgraded to an authenticated deployment."
          },
          {
            "text": "The second use case only uses NULL authentication for the initiator client. The responder (i.e., the server) still authenticates itself to the initiator using another authentication method, such as a machine certificate. This creates a situation that is similar to HTTPS-based websites: the client remains anonymous, but the server is authenticated. This is the method used for internet-based opportunistic IPsec, where two IPsec hosts attempt to establish an IPsec connection without a preexisting configuration or knowledge of each other. This usually involves authentication based on DNSSEC or a widely acknowledged CA such as Let's Encrypt. The advantage of this type of deployment is that only the servers need to have an identity for authentication. The clients (usually laptops and phones) do not need to have any kind of identity and can remain anonymous\u2014at least at the network layer. Similar to HTTPS, the application layer might require the client to authenticate before it is allowed to access a particular resource."
          },
          {
            "text": "NIST does not approve the use of NULL authentication-based IPsec. Any deployment of NULL authenticated IPsec shall be categorized as being identical to plaintext unprotected network traffic."
          }
        ]
      },
      {
        "title": "3.4 Network Address Translation (NAT)",
        "content": [
          {
            "text": "During the IKE_SA_INIT exchange, both endpoints exchange information about what they believe their IP address is. The other end of the communication will confirm whether the information matches the source address of the packet it received. If the endpoints detect that a NAT is present, they will move further IKE communication from port 500 to port 4500. Changing the UDP port was originally done to prevent bad interactions with NAT devices that tried to support \"IPsec passthrough.\" This feature caused more harm than good, and by moving to a new port, the IPsec passthrough modifications performed by NAT devices were avoided. Currently, no NAT devices perform IPsec passthrough. Once an IPsec SA has been negotiated, the hosts will also enable UDP or TCP encapsulation of ESP packets to facilitate traversing the NAT over a single port. This avoids two problems. The first problem is that NAT devices commonly only support UDP and TCP, meaning that IPsec (ESP) packets would not be dropped by some NAT devices. The second problem is that the NAT device needs to keep a port mapping between the internal device's ports that are used and how these ports are mapped onto the NAT.# CURRENT_PAGE_RAW_OCR_TEXT"
          }
        ]
      },
      {
        "title": "Device's Public-Facing Ports",
        "content": [
          {
            "text": "It is easiest if a device behind the NAT device only needs one port mapping for IKE and IPsec (ESP) traffic. The host behind NAT will also send one-byte keepalive packets to ensure that the NAT device does not expire its NAT port mapping if the VPN does not produce any traffic for some time. Otherwise, if the remote IPsec host starts sending traffic towards the NAT device, the NAT device would no longer remember which internal device to forward that traffic to, and the IPsec connection would no longer function."
          },
          {
            "text": "Some cloud providers issue an ephemeral or semi-static public IP address to some virtual machines inside their cloud. The virtual machines are deployed with only an internal IP address. The cloud infrastructure uses NAT to translate the public IP address to the virtual machine's private IP address. This NAT will also trigger the NAT traversal mechanism of IKE. This poses another problem. If the IPsec tunnel is configured with the public IP address as the tunnel endpoint, the virtual machine cannot create packets with its public IP address as the source address, since this public IP address is not configured on the machine itself. Packets received after decryption are dropped because the operating system is not looking for packets with the public IP address. A common workaround is for such virtual machines to configure the public IP address on one of their network interfaces."
          }
        ]
      },
      {
        "title": "3.5 IKE Fragmentation",
        "content": [
          {
            "text": "IKE packets can be larger than the common ethernet MTU of 1500 bytes. If these packets are sent over the network, they will most likely be fragmented. Too often, those fragments will be dropped by a firewall, and the host will fail to receive the fragments for reassembly. This problem is avoided by using IKE fragmentation, which fragments the packets at the application layer instead of the network layer."
          },
          {
            "text": "IKEv2 fragmentation is specified in RFC 7383. The main difference with the IKEv1 vendor-specific implementations of fragmentation is that IKEv2 fragments are encrypted. This makes it harder for an attacker to interfere. Note that while the fragments are encrypted, the fragments are not (yet) authenticated because the IKE exchange has not yet completed. Once all fragments have been received, the original IKE packet can be reconstructed and processed as if it was received in one packet."
          },
          {
            "text": "IKEv2 fragmentation is supported for every exchange type except IKE_SA_INIT. Typically, only the IKE_AUTH exchange requires fragmentation, since that exchange includes the X.509 certificates. These certificates can be larger than 1500 bytes, especially when using RSA public keys that use a key size of 2048 bits or more."
          }
        ]
      },
      {
        "title": "3.6 Mobile IKE (MOBIKE)",
        "content": [
          {
            "text": "Devices such as mobile phones and laptops often have multiple network interfaces, which allows those devices to switch to cheaper and/or faster networks when available. Phones may use the# Current Page Raw OCR Text"
          }
        ]
      },
      {
        "title": "Local WiFi Network",
        "content": [
          {
            "text": "Local WiFi network at the office or at home and mobile networks (5G/LTE) at other locations. Switching also occurs when an existing network connection suddenly degrades. Switching networks changes the source IP address used by the device. VPN traffic is still sent to the old, no longer used IP address until the device establishes a new IPsec connection."
          }
        ]
      },
      {
        "title": "MOBIKE",
        "content": [
          {
            "text": "MOBIKE [38] addresses this issue. It assumes that an internal IP address is assigned by the VPN on the device using CPs. This internal IP address will remain with this device regardless of the outer IP address used by the device. Once a device switches between its network interfaces, it will send an INFORMATIONAL exchange packet with an UPDATE_SA_ADDRESS notification. This packet will be sent using the new IP address. The VPN server will be able to recognize the IPsec SA based on the SPI numbers, despite the fact that it is suddenly coming from a different IP address. Once decrypted and authenticated, the VPN server will notice the UPDATE_SA_ADDRESS payload and change the endpoint IP address (and port if encapsulation is used due to NAT). It will reply with a confirmation message. At this point, all IPsec SA traffic is sent and received using the client's new IP address. Since the VPN client's applications are only using the internal IP address assigned by the VPN server for communication to the remote access network, and this IP address does not change when the device itself changes its network interface and outer IP address, all existing connections remain intact. The applications are not even aware that the network interfaces have switched."
          },
          {
            "text": "A device that wakes up from battery saving mode will generally send a MOBIKE update whether or not its IP address changed. This ensures that any NAT state updates that have happened since the device went to sleep are reported back to the VPN server. For example, the NAT device might have terminated the unused NAT port mapping between the device and the VPN server. The MOBIKE packet will create a new fresh NAT port mapping entry, and the VPN server will immediately be able to update the client's IP address and port number and activate the updated VPN connection."
          },
          {
            "text": "MOBIKE allows for more complicated setups with multiple IP addresses. While MOBIKE can be used as a failover mechanism for the gateway-to-gateway architecture, care should be taken with such a deployment. If one of the endpoints is compromised, its state could be copied onto a (rogue) machine on the other side of the world, and a MOBIKE update message could be sent to redirect all traffic to the rogue location. The most secure option is to disable MOBIKE unless the IPsec configuration is for a remote access VPN client."
          }
        ]
      },
      {
        "title": "3.7 Post-quantum Pre-shared Keys (PPKs)",
        "content": [
          {
            "text": "It is unclear when a quantum computer will become available. Sufficiently large quantum computers will be able to break the finite field (classic) DH and ECDH key exchanges within the timeframe in which it would be expected that IPsec traffic should remain confidential. That is,# Key Exchange and Quantum Resistance"
          },
          {
            "text": "The key exchange could be broken in weeks or months, while the expectation of confidentiality would be in the timeframe of decades. Adversaries could store today's encrypted communications for later decryption using quantum computers. This problem is not unique to IKE. Other encryption protocols, such as TLS, suffer from the same problem. It is expected that in the near future, quantum-resistant algorithms will be standardized and deployed for IKE, TLS, and other protocols. Until then, some deployments of IKE and IPsec might use post-quantum pre-shared keys (PPKs) to strengthen the current algorithms against potential future attacks using quantum computers."
          },
          {
            "text": "With the exception of IKEv1 using very strong PSKs, all IKEv1 and IKEv2 configurations are vulnerable to quantum computers. IKEv2 supports PPKs as a countermeasure. For the purpose of defending against quantum computers, the PPK works similarly to the PSK in IKEv1 in that the PPK is mixed into the key derivation process in addition to the DH values. The PPK must be a cryptographically strong random key and is exchanged out of band. PPKs are identified by a static or ephemeral PPK Identity. This can be used to protect the identity of the connecting clients and facilitate the use of OTPs as the source of the PPK."
          },
          {
            "text": "IKEv2 allows the gradual migration of a network from not using PPK to using PPK. First, some hosts are configured with PPK, and when two hosts both support PPK and have each other's PPK ID with corresponding PPK, the hosts will use the PPK as an additional input to create the KEYMAT and SKEYSEED that are used as input to the PRFs that generate the keying material for the IKE and IPsec SAs. Once all hosts support PPK, their configurations can be updated to mandate PPK."
          },
          {
            "text": "While this protects the IPsec SAs (since their key material derivation depends on the PPK), the initial IKE SA DH process is not protected by the PPK and can still be broken by a quantum computer. This will lead to a loss of privacy of the IKE identities and other information exchanged during the initial IKE Exchange, such as the traffic selectors used for the first IPsec SA. This can be prevented if the IKE implementation allows for setting up a childless IKE SA (without IPsec) and then immediately rekeying the IKE SA. This rekeyed IKE SA is protected by the PPK, and IPsec SAs can then be set up using this new IKE SA without exposing any information to adversaries with quantum computers."
          },
          {
            "text": "PPKs shall have at least 128 bits of entropy."
          }
        ]
      }
    ]
  },
  {
    "title": "VPN Client Connection",
    "subsections": [
      {
        "content": "that the VPN client will need to initiate a connection with. Redirected messages sent in IKE_AUTH are only processed after both ends have authenticated each other. This allows a server to only send specific clients to another server (e.g., all clients of a certain customer in a multi-tenant deployment or some individual power users generating a lot of traffic). The (overloaded) servers are still required to perform full IKE exchanges to all connecting clients and then redirect them to different server hosts. Redirected messages sent in IKE_SA_INIT are not authenticated. Clients that accept such redirected messages should take the necessary precautions to prevent denial-of-service attacks. The advantage for the host performing the redirection is that it can redirect clients without performing a full IKE exchange. The disadvantage is that redirections in IKE_SA_INIT cannot select the specific clients for redirection by their IDs since the client ID has not yet been transmitted to the server. Redirected messages can be used to provide a redundant set of servers for the gateway-to-gateway deployment. A failing server can redirect clients to the other (backup) server. In such an architecture, it is recommended that redirected messages be limited for each endpoint based on preconfigured IP addresses."
      },
      {
        "title": "3.9 Differences Between IKEv2 and the Obsolete IKEv1",
        "content": [
          {
            "text": "The IKEv2 protocol builds on the lessons learned with IKEv1. IKEv2 is simpler, faster, and more secure. IKEv2 has some important new features, such as mobility support (MOBIKE), support for newer cryptographic algorithms, anti-distributed denial-of-service (DDoS) support, and server redirection support. It is recommended that existing IKEv1 installations be upgraded to IKEv2."
          },
          {
            "text": "For those familiar with IKEv1, the main differences between IKEv1 and IKEv2 are:"
          },
          {
            "text": "IKEv1 was designed to be a far more general-purpose key exchange protocol, but many extraneous features were not used. IKEv2 no longer has these features.\nSome IKEv1 protocol extensions are now part of the IKEv2 core specification, such as IKE fragmentation, NAT traversal, and liveness detection (formerly called dead peer detection [DPD]). This means that these features are always available in IKEv2.\nIKEv1 has a large number of exchange types to choose from (e.g., main mode, aggressive mode, revised mode, etc.). With IKEv2, there is no choice of exchange methods, so this no longer needs to be explicitly configured.\nThe IKEv2 exchange has anti-DDoS protection using cookies.\nWhen an IKEv1 endpoint uses the wrong PSK to encrypt a message, the other endpoint is unable to decrypt the encrypted message. For the endpoint receiving this erroneous message, it has no way to distinguish this error from other problems such as packet corruption.\n\nIn IKEv1, both endpoints are responsible for retransmissions, which leads to conflicting retransmits and denial-of-service vectors. In IKEv2, only the exchange initiator is responsible for retransmissions.\n```# Responsible for Retransmission\n\n\nIn IKEv1, the IKE SA can expire while the IPsec SA is still active, which could lead to strange scenarios with DPD. In IKEv2, every IPsec SA has an IKE SA. If the IKE SA expires, all IPsec SAs are terminated as well. This guarantees that every IPsec SA has a functional control channel, which was not the case with IKEv1.\n\n\nIn IKEv1, rekeying always requires a reauthentication of the two endpoints. Some proprietary extensions allowed rekeying without reauthentication. Reauthentication is not always desirable, especially with the use of OTPs or hardware tokens that requires the use of a PIN or fingerprint for activation by the user (such as a VPN client) since it would require human interaction to keep the IPsec connection alive. In IKEv2, rekeying and reauthentication are separate processes with their own lifetimes."
          },
          {
            "text": "In IKEv1, the transport mode and IP compression are negotiated, and a mismatched configuration would lead to a fatal IKE error. In IKEv2, the initiator can request the transport mode and IP compression, but if the responder does not confirm those requests, the IPsec SA is established in tunnel mode (or without compression).\n\n\nIn IKEv1, the IKE SA and IPsec SA can use different DH groups during key establishment (i.e., the DH group used to establish the IKE SA can be different from the DH group used to establish the IPsec SA). This is possible because the IKE and IPsec parameters are negotiated in two different message exchanges that take place at different times. In IKEv2, there is only one exchange of parameters, and the first IPsec SA is established using the IKE SA DH group. Subsequent IPsec SAs can perform an additional DH exchange, thus ensuring the property of PFS; that exchange can use a different group. However, when configuring multiple IPsec SAs, there is no guarantee which SA will be brought up first, either through an operator or by on-demand tunnel establishments. Therefore, in IKEv2, the DH group selected should be the same for the IKE SA and IPsec SAs.\n\n\nIn IKEv1, ESP encapsulation can only happen in UDP. IKEv2 can also use TCP and TLS encapsulation on any port. The TCP/TLS encapsulation cannot be negotiated and must be configured manually or via configuration provisioning. TCP port 4500 is often the default used. This might require updates to firewall rules.\n\n\nWhen migrating from IKEv1 to IKEv2, an upgrade of the algorithms used is strongly recommended. 3DES, MD5, SHA-1, and DH Groups 2 and 5 should not be used. Instead, AES-CBC with HMAC-SHA-2 or AES-GCM with either DH group 14 or an ECDH group (19, 20, or 21) should be used.\n\n\nIKEv2 traffic selector negotiations allow a narrowing of the proposed source and destination network ranges. This helps with creating multiple parallel IPsec SAs per traffic flow, which generally improves performance, as hardware (i.e., CPUs and network).# CURRENT_PAGE_RAW_OCR_TEXT"
          },
          {
            "text": "In IKEv1, both endpoints are responsible for retransmissions, which leads to conflicting retransmits and denial-of-service vectors. In IKEv2, only the exchange initiator is responsible for retransmissions.\n```# Responsible for Retransmission"
          },
          {
            "text": "In IKEv1, the IKE SA can expire while the IPsec SA is still active, which could lead to strange scenarios with DPD. In IKEv2, every IPsec SA has an IKE SA. If the IKE SA expires, all IPsec SAs are terminated as well. This guarantees that every IPsec SA has a functional control channel, which was not the case with IKEv1."
          },
          {
            "text": "In IKEv1, rekeying always requires a reauthentication of the two endpoints. Some proprietary extensions allowed rekeying without reauthentication. Reauthentication is not always desirable, especially with the use of OTPs or hardware tokens that requires the use of a PIN or fingerprint for activation by the user (such as a VPN client) since it would require human interaction to keep the IPsec connection alive. In IKEv2, rekeying and reauthentication are separate processes with their own lifetimes."
          },
          {
            "text": "In IKEv1, the transport mode and IP compression are negotiated, and a mismatched configuration would lead to a fatal IKE error. In IKEv2, the initiator can request the transport mode and IP compression, but if the responder does not confirm those requests, the IPsec SA is established in tunnel mode (or without compression)."
          },
          {
            "text": "In IKEv1, the IKE SA and IPsec SA can use different DH groups during key establishment (i.e., the DH group used to establish the IKE SA can be different from the DH group used to establish the IPsec SA). This is possible because the IKE and IPsec parameters are negotiated in two different message exchanges that take place at different times. In IKEv2, there is only one exchange of parameters, and the first IPsec SA is established using the IKE SA DH group. Subsequent IPsec SAs can perform an additional DH exchange, thus ensuring the property of PFS; that exchange can use a different group. However, when configuring multiple IPsec SAs, there is no guarantee which SA will be brought up first, either through an operator or by on-demand tunnel establishments. Therefore, in IKEv2, the DH group selected should be the same for the IKE SA and IPsec SAs."
          },
          {
            "text": "In IKEv1, ESP encapsulation can only happen in UDP. IKEv2 can also use TCP and TLS encapsulation on any port. The TCP/TLS encapsulation cannot be negotiated and must be configured manually or via configuration provisioning. TCP port 4500 is often the default used. This might require updates to firewall rules."
          },
          {
            "text": "When migrating from IKEv1 to IKEv2, an upgrade of the algorithms used is strongly recommended. 3DES, MD5, SHA-1, and DH Groups 2 and 5 should not be used. Instead, AES-CBC with HMAC-SHA-2 or AES-GCM with either DH group 14 or an ECDH group (19, 20, or 21) should be used."
          },
          {
            "text": "IKEv2 traffic selector negotiations allow a narrowing of the proposed source and destination network ranges. This helps with creating multiple parallel IPsec SAs per traffic flow, which generally improves performance, as hardware (i.e., CPUs and network).# CURRENT_PAGE_RAW_OCR_TEXT"
          }
        ]
      },
      {
        "title": "Interface Cards (NICs)",
        "content": [
          {
            "text": "Interface cards (NICs) can then handle multiple parallel streams at once. It is also used as a method for IP address assignment by the server. A client asks for 0.0.0.0/0, and this proposal is narrowed to the IP address given (e.g., 192.168.1.1/32)."
          },
          {
            "text": "In IKEv1 it is not always possible to detect different groups of clients early enough to select the right authentication mechanism or the right PSK. This complicates multi-tenant VPNs. In IKEv2, the initiator can optionally send the expected ID of the peer in the IDr payload. This allows the responder (i.e., the server) to always select the proper tenant group.\nIKEv1 with PSK has the side effect of offering quantum computing resistance. In IKEv2 this is no longer the case, but a separate RFC [43] specifies how to use PPKs to gain the same protection in IKEv2."
          }
        ]
      },
      {
        "title": "3.10 Manual Keying",
        "content": [
          {
            "text": "While it is possible to hard-code the IPsec information using out-of-band communication (called manual keying), this shall not be used. The IKE protocol handles a number of other security properties, none of which are enforced when using manual keying. Encryption keys would never be refreshed when a fixed key is manually input and used, so any compromise would allow an attacker to decrypt all previously monitored traffic under the fixed key. Some values, such as nonces, counters, and initialization vectors (IVs), shall never be used more than once. Otherwise, the encryption may become vulnerable (weaken)."
          },
          {
            "text": "The only time that manual keying might be acceptable is if another trusted entity, such as a security controller in the SDWAN paradigm, assumes these responsibilities. Another example is the 3GPP protocol, which negotiates the IPsec parameters between a cell tower and handset using a non-IKE protocol."
          },
          {
            "text": "Administrators sometimes mistakenly believe that manual keying is easier to set up than automated keying via IKE. However, manual keying is much harder to set up than IKE. Manual keying is typically only used for software testing and IPsec benchmark tests. This recommendation discourages the use of manual keying."
          }
        ]
      },
      {
        "title": "3.11 IKE Summary",
        "content": [
          {
            "text": "IPsec uses IKE to create security associations, which are sets of values that define the security of IPsec-protected connections. The first IPsec SA is created in conjunction with the IKE SA during the initial exchanges.\nThe IKE SA is used to securely communicate IPsec configuration, status, and management information, such as setting up additional IPsec SAs, rekey events, deletions, and other notifications.\nIKEv2 is faster, more versatile, and uses more modern cryptography compared to IKEv1. IKEv1 should not be used for new deployments, and existing deployments using IKEv1 should be converted to IKEv2 when possible."
          }
        ]
      },
      {
        "title": "4 The IPsec Protocols",
        "content": [
          {
            "text": "IPsec is a collection of protocols that assist in protecting communications over networks. This# CURRENT_PAGE_RAW_OCR_TEXT"
          }
        ]
      },
      {
        "title": "Section focuses on the primary component of IPsec\u2014ESP",
        "content": [
          {
            "text": "This section focuses on the primary component of IPsec\u2014ESP, which protects the confidentiality and integrity of data packets. The section also briefly covers the other IPsec components: the IP Payload Compression Protocol (IPComp) and the Authentication Header (AH) protocol. All of the parameters and cryptographic keys needed by the IPsec protocols are negotiated using the IKE protocol as described in Section 3."
          },
          {
            "subsection": "4.1 Encapsulating Security Payload (ESP)",
            "text": []
          },
          {
            "text": "ESP is the core IPsec security protocol. It has largely been unchanged since its second version, which was published as RFC 2406 in 1998 [46]. The current version (IPsec-v3) was specified in RFC 4303 in 2005 [24]. It contains only a few updates to the IPsec-v2 specification in RFC 2406. Since all of the changes to ESP are either backwards compatible or are new features that would need to be negotiated via IKE before they are enabled for ESP, there are no compatibility issues between IPsec implementations receiving and sending ESP packets. Regardless, practically all current implementations support IPsec-v3. Features only available in IPsec-v3 are:"
          },
          {
            "text": "Support for AEAD algorithms\nExtended Sequence Numbers (ESNs)\nEnhanced policy support (via Security Policy Database [SPD]/Security Association Database [SAD])\nPadding support\nDummy packet support"
          },
          {
            "text": "The use of padding and the capability of sending dummy messages increase TFC by making it harder for an eavesdropper who cannot decrypt the packets to deduce anything from the encrypted packet sizes or timings."
          },
          {
            "text": "ESP provides encryption and integrity protection. The outer header is not fully protected, allowing for routers that forward ESP packets to still modify certain flags, such as the Quality of Service (QoS) and Time to Live (TTL) values."
          },
          {
            "text": "ESP's encryption functionality can be disabled through the selection of the Null ESP encryption algorithm or the AES-GMAC AEAD algorithm. AES-GMAC is a variant of the AES-GCM algorithm, which provides integrity protection without encryption. ESP can be used to provide either encryption and integrity protection or only integrity protection. AH deployments should be migrated to these ESP algorithms. ESP supports AEAD and classic (non-AEAD) encryption with integrity methods."
          },
          {
            "subsection": "4.1.1 Tunnel Mode and Transport Mode",
            "text": []
          },
          {
            "text": "ESP has two modes: transport and tunnel. In tunnel mode (see Figure 7), a new packet is constructed containing the (original) IP packet being sent through the tunnel by: 1) placing an ESP header and trailer around the original IP header and its payload; 2) encrypting the original header, payload, and ESP trailer; 3) computing an integrity check value (ICV) over the ESP header and the encrypted data; 4) placing the ICV at the end of the packet being constructed; and 5) adding a new IP header to the beginning of the packet. The ICV computation does not include# The New IP Header"
          },
          {
            "text": "The new IP header lists the endpoints of the ESP tunnel (such as two IPsec gateways) as the source and destination of the packet and contains the entire, now-encrypted, original packet as its payload. Because of this, tunnel mode can be used with all VPN architectures described in Section 2.4. As shown in Figure 7, tunnel mode can encrypt and protect the integrity of both the data and the original IP header for each packet. Encrypting the original IP header and its payload protects their confidentiality; encrypting the original IP header conceals the nature of the communications, such as the actual source or destination of the packet, protocol, and ports used that would indicate which application is likely being used. The ICV is used to detect any changes to the data over which the ICV is computed."
          }
        ]
      },
      {
        "title": "ESP Tunnel Mode",
        "content": [
          {
            "text": "ESP tunnel mode is used for gateway-to-gateway deployments, remote access VPNs, and various network virtualization deployments. It is also required when the IPsec connection needs to traverse a NAT, which rewrites the outer IP address."
          }
        ]
      },
      {
        "title": "ESP Transport Mode",
        "content": [
          {
            "text": "ESP transport mode is often used for host-to-host deployments within data centers, local networks, and virtual machines where no NAT is deployed. In transport mode (see Figure 8), ESP uses the original IP header instead of creating a new one. The ESP payload and trailer are encrypted, and an ICV is computed over the ESP header and the encrypted data. Integrity protection is not provided for the IP header. The overhead of the transport mode is less than that of the tunnel mode because it does not have to create an entire new IP header. Transport mode is incompatible with NAT."
          },
          {
            "text": "For example, in each TCP packet, the TCP checksum is calculated on both the TCP and IP fields, including the source and destination addresses in the IP header. If NAT is being used, one or both of the IP addresses are altered, so NAT needs to recalculate the TCP checksum. If ESP is encrypting packets, the TCP header is encrypted; NAT cannot recalculate the checksum, so NAT fails. This is not an issue in tunnel mode; because the entire TCP packet is hidden, NAT will not attempt to recalculate the TCP checksum of the inner encrypted packet, only of the outer IP address which is not part of the ESP encryption. However, tunnel mode and NAT have other potential compatibility issues. Section 7.2.1 provides guidance on overcoming NAT-related issues."
          }
        ]
      },
      {
        "title": "4.1.2 Encryption with Separate Integrity Protection",
        "content": [
          {
            "text": "ESP uses symmetric cryptography to provide encryption for IPsec packets. Accordingly, both endpoints of an IPsec connection protected by ESP encryption must use the same key to encrypt and decrypt the packets. When an endpoint encrypts data, it divides the data into small blocks (for the AES algorithm, blocks of 128 bits each) and then performs multiple sets of cryptographic operations (known as rounds) using the data blocks and key. Encryption algorithms that work in this way are known as block cipher algorithms. When the other endpoint...# CURRENT_PAGE_RAW_OCR_TEXT"
          },
          {
            "text": "receives the encrypted data, it performs decryption using the same key and a similar process but with the steps reversed and the cryptographic operations altered. After encryption has been performed, the first step for providing integrity protection is to create a MAC on a message using a MAC algorithm and a secret key shared by the two endpoints. The MAC is added to the packet, and the packet is sent to the recipient. The recipient can then regenerate the MAC using the shared key and confirm that the two MACs match, thus determining whether the data has been modified. IPsec mostly uses an HMAC algorithm [47] for integrity protection, which uses approved hash functions. Examples of HMAC are HMACSHA256. Another common non-HMAC integrity algorithm is AES-CMAC-96 [48]. Federal agencies are required to use NIST-approved algorithms and FIPS-validated cryptographic modules. HMAC with a hash function from the SHA-2 family and AES-CMAC-96 are NIST-approved. However, AES-eXtended Cipher Block Chaining (AES-XCBC-96), for example, is not an approved algorithm."
          }
        ]
      },
      {
        "title": "4.1.3 AEAD Encryption with Built-In Integrity",
        "content": [
          {
            "text": "Encryption with separate integrity protection (as described in Section 4.1.2) requires two separate cryptographic processes over the data using two different secret keys. AEAD combines these two processes, which significantly increases performance. It also provides more constant-time processing when errors occur, resulting in a more robust error handling process that is less susceptible to timing attacks. The reverse process produces either the plaintext data or an error indication. For IKEv2 and ESP, AES-GCM is specified in [49] as an AEAD algorithm. Due to the way that IKEv1 handles the separation of encryption from data integrity protection in IKE packets, AEAD algorithms cannot be used in IKEv1. IKEv1 can, however, still negotiate AEAD algorithms for ESP."
          },
          {
            "text": "The nonce used by an AEAD algorithm must be unique for every encryption operation with the same secret key but does not need to be unpredictable. The nonce in IKE is built using an implicit part (the salt) and an explicit part (the IV). The implicit part is based on the keying material calculated from the DH key exchange and negotiated PRF, similar to how secret encryption keys are generated. This value is never transmitted and binds the encryption to the DH channel. The explicit part is transmitted and usually based on an increasing, and thus unique, counter. Reuse of the IV with the same secret key compromises the security of the data. Thus, these algorithms shall be used in conjunction with IKE and cannot be used with static or manual keys. An SA shall be terminated before the counter reaches its maximum possible value."
          }
        ]
      },
      {
        "title": "4.1.4 Common ESP Algorithms",
        "content": [
          {
            "text": "Examples of common algorithms used by ESP are AES-GCM [50] and AES-CBC [51] with HMAC-SHA-2. Most algorithms have limitations on the amount of data that can be safely encrypted with a single key and requirements for auxiliary parameters. Triple DES has been deprecated since 2019 and will be disallowed after 2023. It is much slower.# CURRENT_PAGE_RAW_OCR_TEXT"
          },
          {
            "text": "than AES-GCM and AES-CBC. Triple DES is also cryptographically weaker and requires more frequent rekeying to avoid birthday attacks due to its smaller block size of 64 bits. The HMAC-MD5 and HMAC-SHA-1 integrity algorithms are also no longer NIST-approved. For the latest cryptographic recommendations, see NIST SP 800-131A [18] and FIPS 140-3 [14]."
          }
        ]
      },
      {
        "title": "4.1.5 ESP Packet Fields",
        "content": [
          {
            "text": "ESP adds a header and a trailer around each packet's payload. As shown in Figure 9, each ESP header is composed of two fields:"
          },
          {
            "text": "SPI. Each IPsec SA (inbound and outbound) contains an SPI value, which acts as a unique identifier for the IPsec SA. The endpoints use these SPI values along with the destination IP address and (optionally) the IPsec protocol type (in this case, ESP) to determine which SA is being used and which decryption key should be used.\n\n\n(Extended) Sequence Number. Each packet is assigned a sequential number, and only packets within a sliding window of sequence numbers are accepted. This provides protection against replay attacks because duplicate packets will use the same sequence number. The use of sequence numbers also helps thwart denial-of-service attacks because old packets that are replayed will have sequence numbers outside of the window and will be dropped immediately without performing any more processing. Originally (in IPsec-v2), the sequence numbers for IPsec packets were defined as a 32-bit number. Current hardware can transmit 100 gigabits per second (Gbps), or about 150 million packets per second, meaning that the 32-bit sequence number space would be exhausted in 30 seconds. It would be impractical to rekey an IPsec SA every 30 seconds, so IPsec-v3 [24] introduced ESNs. If negotiated with IKE, the IPsec SA is installed with 64-bit sequence numbers. The ESP wire format is unchanged, however, and only the lower 32 bits of the sequence number are transmitted in the ESP packet. Each endpoint keeps track of the higher 32-bit value and performs all integrity calculations based on the entire 64-bit sequence number."
          },
          {
            "text": "SPI. Each IPsec SA (inbound and outbound) contains an SPI value, which acts as a unique identifier for the IPsec SA. The endpoints use these SPI values along with the destination IP address and (optionally) the IPsec protocol type (in this case, ESP) to determine which SA is being used and which decryption key should be used."
          },
          {
            "text": "(Extended) Sequence Number. Each packet is assigned a sequential number, and only packets within a sliding window of sequence numbers are accepted. This provides protection against replay attacks because duplicate packets will use the same sequence number. The use of sequence numbers also helps thwart denial-of-service attacks because old packets that are replayed will have sequence numbers outside of the window and will be dropped immediately without performing any more processing. Originally (in IPsec-v2), the sequence numbers for IPsec packets were defined as a 32-bit number. Current hardware can transmit 100 gigabits per second (Gbps), or about 150 million packets per second, meaning that the 32-bit sequence number space would be exhausted in 30 seconds. It would be impractical to rekey an IPsec SA every 30 seconds, so IPsec-v3 [24] introduced ESNs. If negotiated with IKE, the IPsec SA is installed with 64-bit sequence numbers. The ESP wire format is unchanged, however, and only the lower 32 bits of the sequence number are transmitted in the ESP packet. Each endpoint keeps track of the higher 32-bit value and performs all integrity calculations based on the entire 64-bit sequence number."
          },
          {
            "text": "The next part of the packet is the payload. It is composed of the encrypted payload data and the IV, which is not encrypted. This is helpful in deterring traffic analysis. The IV is used during encryption. Its value is different in every packet, so if two packets have the same content, the inclusion of the IV will cause the encryption of the two packets to have different results. This makes ESP less susceptible to cryptanalysis."
          },
          {
            "text": "To obfuscate the length and frequency of information sent over IPsec, the protocol allows for sending dummy data called traffic flow confidentiality (TFC) padding. TFC padding can be added to the unencrypted data before encryption, or it can be injected as a whole new packet with padding only being encrypted to a certain size between real encrypted data transmissions. An observer cannot tell if TFC is enabled and, more importantly, can no longer make any reasonable assumptions based on packet size or frequency. One common deployment of TFC is# CURRENT_PAGE_RAW_OCR_TEXT"
          },
          {
            "text": "To pad all packets to the maximum MTU value, resulting in all sent ESP packets having the exact same length. This would increase the amount of encrypted data sent, so on links where transmission costs depend on the amount of data sent (e.g., LTE/5G), there is a cost associated with using TFC."
          },
          {
            "text": "The third part of the packet is the ESP trailer, which contains at least two fields and may optionally include one more:"
          },
          {
            "text": "ESP Padding. An ESP packet may optionally contain padding, which is additional bytes of data that make the packet larger and are discarded by the packet's recipient. Because ESP uses block ciphers for encryption, padding may be needed so that the encrypted data is an integral multiple of the block size. Padding may also be needed to ensure that the ESP trailer ends on a multiple of four bytes.\n\n\nESP Padding Length. This number indicates the length of the padding in bytes. The Padding Length field is mandatory.\n\n\nNext Header. In tunnel mode, the outer (original) IP header is followed by an inner (new) IP header. The next payload is thus an IP packet, so the Next Header value is set to four, indicating IP-in-IP (one IP packet tunneled in another IP packet). In transport mode, the payload is usually a transport layer protocol, often TCP (protocol number 6) or UDP (protocol number 17). Every ESP trailer contains a Next Header value.\n\n\nICV. This is used to verify the integrity of the encrypted data. For AES-GCM and AES-Counter with CBC-MAC (AES-CCM), it consists of an 8, 12, or 16-byte ICV consisting solely of the Authentication Tag. For AES CCM, the ICV is encrypted. For AES-GCM and AES-CCM, the 16-byte ICV value is recommended by NIST and RFC 8247 [25]. The recipient of the packet can recalculate the ICV value to confirm that the portions of the packet other than the outermost IP header have not been altered in transit."
          },
          {
            "text": "ESP Padding. An ESP packet may optionally contain padding, which is additional bytes of data that make the packet larger and are discarded by the packet's recipient. Because ESP uses block ciphers for encryption, padding may be needed so that the encrypted data is an integral multiple of the block size. Padding may also be needed to ensure that the ESP trailer ends on a multiple of four bytes."
          },
          {
            "text": "ESP Padding Length. This number indicates the length of the padding in bytes. The Padding Length field is mandatory."
          },
          {
            "text": "Next Header. In tunnel mode, the outer (original) IP header is followed by an inner (new) IP header. The next payload is thus an IP packet, so the Next Header value is set to four, indicating IP-in-IP (one IP packet tunneled in another IP packet). In transport mode, the payload is usually a transport layer protocol, often TCP (protocol number 6) or UDP (protocol number 17). Every ESP trailer contains a Next Header value."
          },
          {
            "text": "ICV. This is used to verify the integrity of the encrypted data. For AES-GCM and AES-Counter with CBC-MAC (AES-CCM), it consists of an 8, 12, or 16-byte ICV consisting solely of the Authentication Tag. For AES CCM, the ICV is encrypted. For AES-GCM and AES-CCM, the 16-byte ICV value is recommended by NIST and RFC 8247 [25]. The recipient of the packet can recalculate the ICV value to confirm that the portions of the packet other than the outermost IP header have not been altered in transit."
          }
        ]
      },
      {
        "title": "4.1.6 How ESP Works",
        "content": [
          {
            "text": "Reviewing and analyzing actual ESP packets can provide a better understanding of how ESP works. Figure 10 shows the bytes that compose an actual ESP packet and their American Standard Code for Information Interchange (ASCII) representations. The ESP packet only contains four sections (ignoring the link layer): IP header, ESP header, encrypted data (payload and ESP trailer), and (optionally) authentication data information. It is not possible to determine if this packet was generated in transport mode or tunnel mode by examining the encrypted data. However, because the IP header is unencrypted, the IP protocol field in the header does reveal which IPsec protocol the payload uses (in this case, ESP). As shown in Figure 7 and Figure 8, the unencrypted fields in both modes (tunnel and transport) are the same. Although it is difficult to tell from Figure 10, the ESP header fields are not encrypted. Figure 11 shows a network traffic capture made with the tcpdump tool of encrypted traffic generated by the ping command, followed by an IKE session which is followed by another ping that is now.# CURRENT_PAGE_RAW_OCR_TEXT"
          }
        ]
      },
      {
        "title": "protected by ESP",
        "content": [
          {
            "text": "Each direction uses its own negotiated SPI value for its packets, which corresponds to an ESP connection being composed of two one-way connections, each with its own SPI. Both hosts initially set the sequence number to 1, and both incremented the number to 2 for their second packets. The tcpdump tool labels IKE packets as \"isakmp\"\u2014a legacy name from the IKEv1 protocol."
          }
        ]
      },
      {
        "title": "4.2 ESP Encapsulation",
        "content": [
          {
            "text": "ESP packets cannot traverse a NAT device in all circumstances. If an IPsec connection uses transport mode, changing the IP address on the packets will invalidate the integrity checks imposed by IPsec. The NAT device cannot rewrite the ICV because it does not have access to the keying material needed to do so. For all intents and purposes, the NAT device is a malicious actor that IPsec protects against."
          },
          {
            "text": "The ESP protocol has no ports. If multiple clients send ESP from behind the same NAT router, it would be difficult to track the ESP packets to the respective clients as they would all have the same destination IP\u2014that of the NAT device. While SPI numbers are uniquely generated for each IPsec host, there is no guarantee that two hosts behind the same NAT will not ultimately pick the same SPI number for an IPsec SA. Furthermore, NAT routers often do not understand or translate anything other than the UDP and TCP protocols, causing ESP packets to be dropped by the NAT device."
          },
          {
            "subsection": "4.2.1 UDP Encapsulation of ESP",
            "text": []
          },
          {
            "text": "To overcome the transport issues of the ESP protocol, ESP can be encapsulated in UDP (ESPinUDP). The NAT device can rewrite the IP address of the outer UDP packet and track multiple clients by the UDP port number. For historical reasons, when IKE detects a NAT during the negotiation, it switches the IKE negotiation from UDP port 500 to UDP port 4500. It uses a regular UDP packet header followed by a four-byte header with all zeroes (Non-ESP Marker) following the UDP header. Then the IKE header follows."
          },
          {
            "text": "ESPinUDP also uses port 4500 to ensure that the NAT device only has one NAT mapping for all traffic (ESP and IKE). Following the regular UDP packet header, the ESP header follows. The first four bytes of the ESP header is the SPI number, which cannot be 0. Thus, an implementation receiving a packet on port 4500 can determine whether the packet is an ESPinUDP packet or an IKE packet, depending on whether or not it sees the SPI number of the non-ESP marker."
          },
          {
            "text": "Usually, the kernel receiving an ESPinUDP packet will simply strip the UDP header away without bothering with the UDP checksum (which not all NAT routers properly recalculate) and process the remaining ESP data as if it was received as an ESP packet without encapsulation. If the kernel detects an IKE packet, it will send this packet to the IKE process for processing by the IKE daemon."
          },
          {
            "text": "Starting with IKEv2, even if no NAT was detected, endpoints need to support# Receiving ESP and ESPinUDP Packets"
          },
          {
            "text": "Receiving ESP and ESPinUDP packets on all of their IPsec SAs. Each endpoint may decide when to use encapsulation and when not to. IKEv2 also allows for initiating a new IKE_SA_INIT on UDP port 4500, bypassing UDP port 500 completely."
          }
        ]
      },
      {
        "title": "4.2.2 TCP Encapsulation of ESP",
        "content": [
          {
            "text": "Implementations supporting TCP encapsulation [53], where ESP packets are wrapped into a TCP stream, can also choose to use TCP. This provides a much-needed method to prevent IPsec from being easily filtered and blocked. A lack of TCP encapsulation was one of the reasons why SSL VPNs came into existence, as these could not be easily blocked by blocking the IPsec protocols (UDP port 500 and 4500 and protocol ESP). TCP encapsulation ports cannot be negotiated, as this would require that the negotiations start on the well-known port susceptible to blocking. Therefore, the TCP port has to be preconfigured manually or via the IPsec client provisioning system."
          },
          {
            "text": "The ESP in TCP encapsulation uses an ASCII prefix tag of \"IKETCP\" so that an additional layer can be used, such as TLS. In that case, encrypted packets are encapsulated using a TCP connection that uses TLS. The packet processor can read the prefix and detect the start of an IKE/ESP stream, in which case it can send this traffic to the proper handler. Since restrictive networks often still (have to) allow access to HTTPS websites, using TLS on port 443 to protect (or really, hide) the TCP stream containing the encapsulated ESP packets will yield the best results. However, networks are often only misconfigured to drop all UDP traffic. Moving to ESP encapsulation on TCP port 4500 without TLS framing will usually be enough to be able to establish IPsec connections."
          },
          {
            "text": "Implementations are encouraged to regularly try to go back to UDP encapsulation. TCP encapsulation means there are possibly two TCP layers involved in a packet: the TCP connection being encrypted and the TCP connection carrying the ESP packet. These two TCP layers will both independently determine retransmissions. Especially when there is packet loss, these two TCP streams will badly interfere with each other."
          }
        ]
      },
      {
        "title": "4.3 IP Payload Compression Protocol (IPComp)",
        "content": [
          {
            "text": "ESP can be deployed with IPComp. Before a packet is encrypted, the packet will be considered for compression. If the packet is very small already, such as an ICMP message, no compression is done, and the packet is encrypted as is; otherwise, the packet is compressed. However, various compression algorithms do not guarantee that an attempted compression does not end up being larger than the original. If this turns out to be the case, the original packet is encrypted without compression. If the compressed result is smaller, the compressed packet is encrypted. On the receiving end, the packet is decrypted, and if it was compressed, it will be decompressed. However, applications that send large amounts of data usually already compress their data. At# CURRENT_PAGE_RAW_OCR_TEXT"
          },
          {
            "text": "that point, attempting to compress already compressed data will not yield smaller packets, and a host will ultimately waste CPU cycles at the IPsec layer attempting futile compression. As such, IPsec level compression has not seen widespread use. This might change in the near future with the emergence of IoT devices and other battery-powered devices that use mobile data (LTE/5G). These devices save battery power by transmitting fewer bytes, even if that reduction requires more CPU power for compression. For non-IoT-based IPsec, NIST does not recommend using IPComp due to the risk of weakening security and the introduction of complexity to the encryption function. It is also not universally implemented since its status was always optional."
          }
        ]
      },
      {
        "title": "4.4 Authentication Header (AH)",
        "content": [
          {
            "text": "As with ESP, AH can be used in tunnel mode and transport mode. It offers only integrity algorithms and provides no confidentiality. The ESP protocol can use null encryption (ESP algorithm number 12) with an integrity algorithm, such as HMAC-SHA-2, to accomplish the same as AH. Alternatively, ESP can use an AEAD algorithm, such as AES-GMAC (ESP algorithm number 21), to offer integrity without confidentiality to replace AH. NIST discourages the use of AH in this publication. The IETF has specified that AH is an optional IPsec protocol, which means it is not mandatory to implement and might not be available with all IPsec implementations. It is recommended that null encryption with the ESP protocol be used instead of the AH protocol when encryption is not desired. Some implementations support the legacy IPsec-v2 ESP without authentication in combination with AH. This is usually referred to as AH+ESP. This combined mode (ESP for encryption and AH for integrity) is no longer recommended [25] since it provides no advantage over regular ESP with authentication. Regular ESP with authentication also reduces the effective MTU compared to AH+ESP, due to the additional overhead of an AH header plus an ESP header versus just an ESP header with authentication."
          }
        ]
      }
    ]
  },
  {
    "title": "CURRENT_PAGE_RAW_OCR_TEXT",
    "subsections": [
      {
        "content": "In tunnel mode, ESP provides encryption (or null encryption) and integrity protection for an encapsulated IP packet, as well as integrity protection for the ESP header of the outer (constructed) IP packet.\nIn transport mode, ESP provides encryption (or null encryption) and integrity protection for the payload of the IP packet, as well as integrity protection for the ESP header. Transport mode is not compatible with NAT. Transport mode can only be used for host-to-host deployments. It is commonly used for large-scale host-to-host mesh deployments within an administrative domain without NAT.\nESP in tunnel mode is the most commonly used IPsec mode because it can encrypt the entire original IP packet, which conceals the true source and destination of the packet. ESP in tunnel mode is a requirement for gateway-to-gateway communications. ESP in tunnel mode can be encapsulated in UDP and TCP, making it compatible with NAT.\nESP can add padding to packets and send dummy packets, further complicating attempts to perform traffic analysis.\nESP can use IPComp but rarely does because the gains made from data compression depend strongly on the type of traffic sent. Applications sending a lot of data typically compress their data before providing it to the lower layers for transmission. Applying IPComp to already compressed data would waste CPU power.\nAH has been obsoleted and should not be implemented or deployed. If encryption is undesirable, ESP with null encryption (ESP-NULL) or AES-GMAC should be used instead of AH."
      },
      {
        "title": "5 Deployment of IPsec Using IKE",
        "content": [
          {
            "text": "This section describes the interactions between the IKE and IPsec subsystems. The interaction depends on the implementation. This section focuses on the standard protocols used to communicate between IKE and IPsec. Although some devices have their own proprietary method of communication, in general, the concepts explained in this section will apply to those proprietary implementations as well."
          },
          {
            "text": "The IKE protocol is usually implemented as an application running on the operating system, whereas the IPsec protocol is generally implemented in the kernel of the operating system. Some devices implement the IPsec subsystem as a program running on the operating system kernel, but for the remainder of this section, it is assumed that IPsec is implemented in the operating system kernel."
          },
          {
            "text": "The communication between IKE and IPsec is usually implemented using the PF_KEYv2 or NETLINK protocol. Linux uses NETLINK with the XFRM application programming interface (API), whereas BSD-based systems use PF_KEYv2."
          },
          {
            "text": "This section puts IKE and IPsec components together to illustrate how IPsec sessions are set up and executed. Each example includes the use of IKE to establish SAs."
          },
          {
            "subsection": "5.1 IPsec States and Policies",
            "text": []
          },
          {
            "text": "Each IPsec SA has a state containing information such as the SPI numbers and the encryption keys and algorithms used as well as a policy containing the source and destination addresses and ports used for matching traffic that is covered by the IPsec SA for encryption/decryption. While\n```# CURRENT_PAGE_RAW_OCR_TEXT"
          },
          {
            "text": "Each state must have a policy, not all policies need to have a state. For example, on-demand IPsec connections have a policy that allows the kernel to detect that an outgoing packet should trigger an IKE negotiation. Once the IKE SA has been established and an IPsec SA has been negotiated, the IKE daemon will install an IPsec state with corresponding policies. During the negotiation, the kernel can drop the packet, cache the packet for later transmission, or send the packet as is without encrypting it. Usually, UDP packets are dropped, since their unreliable nature requires that applications sending these packets need to know when to transmit their packets anyway. TCP packets are usually cached because TCP retransmissions are usually very slow, and it would make the on-demand tunnel very slow if the first TCP packet was always lost. Leaking packets in cleartext only occurs when the network considers the IPsec protection optional instead of mandatory."
          },
          {
            "text": "Once an IPsec SA has been established between two hosts, all traffic that falls within the IPsec SA policy must be IPsec-protected. If, for some reason, unencrypted traffic is received, it is assumed to have been forged, and the traffic will be dropped."
          }
        ]
      },
      {
        "title": "5.1.1 The Security Association Database (SAD)",
        "content": [
          {
            "text": "The kernel maintains a state for each IPsec SA. An IPsec connection between two hosts consists of a pair of IPsec SAs\u2014one for inbound and one for outbound traffic. These IPsec states are contained in the SAD. Figure 12 shows an example of an IPsec SA using an AEAD algorithm. If a non-AEAD algorithm is used, such as AES-CBC with HMAC-SHA-1, the SA will contain the encryption and integrity keys separately. Figure 13 illustrates this. Note that this example uses FreeBSD, which calls the AES algorithm by its original candidate name, Rijndael."
          },
          {
            "text": "The IPsec SA state information consists of:"
          },
          {
            "text": "The SPI that uniquely identifies the IPsec SA\nIP addresses of the local and remote hosts that send and receive IPsec packets\nCryptographic algorithms and their key material for encryption and integrity\nA link to the associated security policy (sometimes called reqid)\nThe mode (tunnel or transport)\nThe encapsulation state (transport protocol, port numbers, and optional framing)\nThe current and maximum byte and packet counters allowed\nThe current and maximum timers for idleness and age allowed\nAn anti-replay context such as the current sequence number\nA link to the IPComp state, if present\nFlags indicating various properties (TFC padding, etc.)"
          },
          {
            "text": "The maximum counters and lifetimes have a soft and hard value. When the soft value is reached, the kernel will notify the IKE daemon so that it can take preventative action. When the hard value is reached, the IPsec SA is deleted by the kernel, and the IKE daemon is notified. Each time a packet is encrypted or decrypted, this state is updated appropriately."
          }
        ]
      },
      {
        "title": "5.1.2 The Security Policy Database (SPD)",
        "content": [
          {
            "text": "The kernel maintains a list of IPsec policies in the SPD. The policy describes the nature of the traffic that matches a policy rule and links it to the state used to encrypt or decrypt the packet.# Policies without States"
          },
          {
            "text": "Policies without states are used for on-demand IPsec connections. Figure 14 shows examples of two policies corresponding to the SAs in Figure 12."
          }
        ]
      },
      {
        "title": "IPsec Security Policy Information",
        "content": [
          {
            "text": "The IPsec security policy information consists of:"
          },
          {
            "text": "The IP addresses of the IPsec gateways\nThe source IP addresses allowed in the classless inter-domain routing (CIDR) format\nThe destination IP addresses in CIDR format\nThe transport protocol covered (0 for all)\nThe source and destination port ranges (0 for all)\nA link to the associated SA state\nDirection (inbound, outbound, or forward)\nThe priority of the policy compared to other policy rules\nIPsec protocol (ESP, AH, IPComp)\nMode (transport or tunnel)\nIPComp information"
          },
          {
            "text": "Using the SPD and SAD, packets are processed for encryption and decryption, and all of the security policies are applied. If a policy violation is detected, the packet is dropped (e.g., when an encrypted packet is decrypted into a packet with a source address that is not allowed by the security policy of the SA). A policy can also point to a non-IPsec SA target. Commonly implemented targets are PASS (never encrypt with IPsec), DROP, REJECT (DROP and send an ICMP message), and HOLD (cache the packet until an IPsec SA has been established)."
          },
          {
            "text": "Looking at the SAD and SPD entries of the previous figures, it can be seen that the host with IP address 198.51.100.1 is allowed to send ESP packets to the host with IP 203.0.113.1. The encrypted IP packet included can only have the source IP address 192.168.13.6 but can have any destination IP address. AES-GCM is used as the AEAD encryption algorithm. In other words, there is a VPN client running on 198.51.100.1 that started a VPN connection to the VPN server on 203.0.113.1 and received the internal IP address 192.168.13.6."
          },
          {
            "text": "The IP address family of the IPsec host does not need to match the IP address family of the included encrypted IP packets. Figure 15 shows policies for two IPsec gateways using IPv6 addresses that are used to connect two IPv4 subnets with each other."
          },
          {
            "text": "The output of the commands to inspect the current SAD and SPD differs by vendor. Figure 16 shows the SAD and SPD entries for an IPv6 in IPv4 IPsec connection in tunnel mode using the ipsecctl command on OpenBSD."
          }
        ]
      },
      {
        "title": "5.1.3 SAD Message Types",
        "content": [
          {
            "text": "Regardless of the implementation, the following types of messages are sent between the IKE and IPsec subsystems:"
          },
          {
            "text": "IKE to IPsec:\nAdd, update, or remove an IPsec SA state\nAdd, update, or remove an IPsec SA policy\nGet IPsec SA information (byte counters, idleness)\n\nRequest a list of supported IPsec cryptographic algorithms\n\n\nIPsec to IKE:\n\nPacket notification (with source/destination packet header information)\nInvalid SPI notification (IPsec packet received without matching SA with SPI)\nIPsec SA deleted (due to max life or max counter)"
          },
          {
            "text": "Request a list of supported IPsec cryptographic algorithms"
          },
          {
            "text": "IPsec to IKE:"
          }
        ]
      }
    ]
  },
  {
    "title": "CURRENT_PAGE_RAW_OCR_TEXT",
    "subsections": [
      {
        "content": "would direct it to gateway B. Gateway B would modify the packet appropriately and send it to gateway A. Gateway A would process and validate the packet to restore the original IP address, then send the packet to endpoint A."
      },
      {
        "content": "Assuming that the IPsec connection between the gateways is sustained, eventually the IKE or IPsec SAs will approach one of the SA lifetime thresholds (maximum time or maximum bytes transmitted) as determined by the local policy on the respective gateways. The gateway with the shortest lifetime first determines whether the maximum SA lifetime is approaching and initiates the rekeying process using the existing IKE SA. If the IPsec SA is being rekeyed, both ends install the new inbound and outbound IPsec SA before removing the old inbound and outbound IPsec SA. Once valid encrypted traffic is received on the new inbound IPsec SA, the old inbound IPsec SA will be deleted. This ensures that there is no interruption of the traffic flow during IPsec SA rekeying. If the IKE SA is being rekeyed, both ends replace the IKE SA, and all IPsec SAs belonging to the old IKE SA are attached to the new IKE SA."
      },
      {
        "title": "5.3 Procurement Considerations for IPsec Products",
        "content": [
          {
            "text": "IPsec VPN products vary in functionality, including protocol and algorithm support. They also vary in breadth, depth, and completeness of features and security services. Management features, such as status reporting, logging, and auditing, should provide adequate capabilities for the organization to effectively operate and manage the IPsec VPN and extract detailed usage information. In the case of mesh encryption, too much logging can also be a concern."
          },
          {
            "text": "Traditionally, the management of IPsec products from different vendors has been problematic. Some recommendations and considerations include the following:"
          },
          {
            "text": "Ensure that the cryptographic and networking capacity can accommodate the expected number of hosts and throughput.\nThe Simple Network Management Protocol (SNMP) only provides a rudimentary and outdated interface for IKE and IPsec management. The IETF is working on a replacement management protocol using the YANG data model language with ZEROCONF, which should provide a non-proprietary management interface that can be used across all vendors.\nAEAD algorithms, such as AES-GCM for IPsec (ESP), significantly improve the performance of any IPsec product.\nThe IPsec VPN high availability, scalability, and redirection features should support the organization's requirements for automatic failover (i.e., a secondary IPsec server is used as a spare that will automatically take over the IPsec services of a failing IPsec primary server) or, alternatively, support a deployment scenario where two IPsec servers perform load balancing for one logical IPsec service. State and information sharing are recommended to keep the IPsec server deployment process transparent to the user.\nIPsec VPN authentication should provide the necessary support for the organization's current and future authentication methods and leverage existing authentication.\n```# Databases"
          },
          {
            "text": "IPsec VPN authentication should also be tested to ensure interoperability with existing authentication methods. For remote access VPNs, support for EAP-TLS is an important consideration. For host-to-host and mesh encryption deployments, public key and certificate-based authentication is important."
          },
          {
            "text": "IPsec support within virtual machines or containers is usually provided by the operating system or container technology. This may require a different management system from physical IPsec gateway products. IPsec hardware offload needs careful consideration to ensure that the hardware offload capability is available within the virtualization technology without a performance penalty. In multi-tenant virtualization deployments, it might not be appropriate to use hardware acceleration, and the ability to disable hardware support should be available.\n\n\nMany IoT devices are severely resource-constrained, requiring a very small footprint of supported algorithms and random-access memory (RAM) usage. These devices tend not to support certificate authentication and usually support one or a few encryption and integrity algorithms, such as AES-CCM. IPsec gateways that will be used to connect IoT devices should be selected carefully to ensure algorithm compatibility.\n\n\nIPsec products should be evaluated to ensure that they provide the level of granularity needed for access controls. Access controls should be capable of applying permissions to users, groups, and resources, as well as integrating with endpoint security controls. These considerations vary depending on the architecture that the IPsec product will be used for. Remote access VPNs need granularity at the user or device level, whereas host-to-host deployments could require access controls based on the IP address before accepting a connection based on a proof of identity to prevent exposure to denial-of-service attacks."
          },
          {
            "text": "IPsec support within virtual machines or containers is usually provided by the operating system or container technology. This may require a different management system from physical IPsec gateway products. IPsec hardware offload needs careful consideration to ensure that the hardware offload capability is available within the virtualization technology without a performance penalty. In multi-tenant virtualization deployments, it might not be appropriate to use hardware acceleration, and the ability to disable hardware support should be available."
          },
          {
            "text": "Many IoT devices are severely resource-constrained, requiring a very small footprint of supported algorithms and random-access memory (RAM) usage. These devices tend not to support certificate authentication and usually support one or a few encryption and integrity algorithms, such as AES-CCM. IPsec gateways that will be used to connect IoT devices should be selected carefully to ensure algorithm compatibility."
          },
          {
            "text": "IPsec products should be evaluated to ensure that they provide the level of granularity needed for access controls. Access controls should be capable of applying permissions to users, groups, and resources, as well as integrating with endpoint security controls. These considerations vary depending on the architecture that the IPsec product will be used for. Remote access VPNs need granularity at the user or device level, whereas host-to-host deployments could require access controls based on the IP address before accepting a connection based on a proof of identity to prevent exposure to denial-of-service attacks."
          }
        ]
      },
      {
        "title": "6 Troubleshooting IPsec VPNs",
        "content": [
          {
            "text": "This section provides information on troubleshooting IPsec VPNs."
          },
          {
            "subsection": "6.1 IKE Policy Exceptions",
            "text": []
          },
          {
            "text": "Some IKE and IPsec interactions need careful attention to prevent the two subsystems from interfering with each other. Usually, these are handled by the IKE implementation. If an IPsec implementation insisted that all communication between two hosts be encrypted with IPsec, those two hosts would never be able to send non-IPsec packets, including IKE packets. Without allowing IKE packets, no IPsec SA can be negotiated and installed, and the two hosts would never be able to communicate. Similarly, if one host crashes and restarts, it needs to be able to send IKE packets that are not IPsec-encrypted, yet the remote endpoint still has a policy that only allows encrypted traffic to be received."
          },
          {
            "text": "To work around this, IPsec implements a policy exception for UDP port 500 and 4500 packets and will skip processing these via the regular SPD processing. If the kernel# CURRENT_PAGE_RAW_OCR_TEXT"
          }
        ]
      },
      {
        "title": "does not override",
        "content": [
          {
            "text": "IKE packets for IPsec processing, the IKE daemon needs to have a policy specifically for the IKE ports used with the highest preference\u2014higher than the IPsec SA processing policy preference. If TCP is used, UDP ports 500 and 4500 also need to have such a policy exception. Practically all IKE daemons perform this task on startup."
          }
        ]
      },
      {
        "title": "6.2 IPv6 Neighbor Discovery Policy Exception",
        "content": [
          {
            "text": "A more subtle requirement is the need to exclude IPv6 neighbor discovery. If two hosts in the same subnet have established an IPsec SA over IPv6, and one of these hosts crashes and reboots, that host will send an unencrypted neighbor host discovery ICMP packet in an attempt to find the other host on the local network. If the host that did not crash drops the unencrypted ICMP packet, the two hosts will not be able to set up a new IPsec SA. If the host that did not crash performs DPD, it might find out in a few minutes that it needs to renegotiate the IPsec SA. Otherwise, communication will be blocked until the IPsec SA rekey or expiry timer runs out. This could be an outage that lasts anywhere from 1-8 hours. Unfortunately, not all IKE daemons and IPsec implementations install the IPv6 neighbor discovery policy exception. The recommendation is to test this scenario when using a new IKE/IPsec implementation."
          },
          {
            "text": "If a kernel receives a packet with an SPI for which it has no IPsec SA, it can send a message to the IKE process containing the IP address of the host that sent the IPsec packet. Such an IKE process may be able to recognize the peer based on its (static) IP address and initiate a new IKE exchange to try to set up a new IPsec SA that replaces the obsoleted IPsec SA on the host that did not crash. Not all kernels implement this mechanism to inform the IKE process."
          }
        ]
      }
    ]
  },
  {
    "title": "CURRENT_PAGE_RAW_OCR_TEXT",
    "subsections": [
      {
        "content": "produced.\nIf an administrator controls both endpoints that will be configured for IPsec, it is often the case that this administrator is located behind one of the gateways and is using a secure remote login tool, such as a web interface or SSH connection, to configure the remote endpoint. If a configuration mistake is made or a partial configuration is accidentally activated, the IPsec hosts will drop all non-IPsec traffic and lock out the administrator's remote session. To prevent this problem, use a third host to indirectly log in to the remote IPsec endpoint for configuration."
      }
    ]
  },
  {
    "title": "CURRENT_PAGE_RAW_OCR_TEXT",
    "subsections": [
      {
        "content": "if the local IPv6 range is used for remote access clients. The responder authenticates the initiator first and fully establishes the IPsec SA before the initiator receives the IKE_AUTH response packet. If the initiator determines that the responder failed to authenticate itself, the initiator can only notify the responder of this by immediately deleting the IKE SA since the responder believes this is a fully established IKE SA and IPsec SA. This sometimes confuses administrators when debugging a problem because from the responder's point of view, this was a successful\u2014but very short\u2014IPsec connection."
      },
      {
        "title": "6.5 Routing-Based VPNs Versus Policy-Based VPNs",
        "content": [
          {
            "text": "IPsec implementations need to inspect packet streams to determine when a packet should be encrypted and when it should be transmitted unencrypted. One method is to use the routing table. If a route is pointing to a specific IPsec device, the IPsec implementation processes the packet based on its SPD/SAD rules. However, using routes can be fragile. Another subsystem could change the routing to accidentally or maliciously bypass the IPsec device, thus bypassing all encryption policies."
          },
          {
            "text": "Another issue of routing-based policies is that administrators often use a single IPsec policy covering all possible IPv4 addresses (0.0.0.0/0) to all possible IPv4 addresses (0.0.0.0/0). Once the tunnel is established, routing is used to determine which packets to send over the IPsec connection. If a remote branch extends its network to use another subnet, such as 192.0.2.0/24, the only change needed is for the local branch to add a route for that IP range into the IPsec device. Firewall rules to limit the subnets allowed are omitted to allow this easy type of deployment, but this introduces a security problem as well as a compatibility problem. If the routes into the IPsec devices on both ends do not match, traffic will be encrypted in one direction but not in the other. At best, the IPsec gateway expecting encrypted packets will drop the unencrypted packets, and network connectivity will fail. Worse, the IPsec gateway could mistakenly route the unencrypted (and possibly modified) packets onto its local network."
          },
          {
            "text": "Policy-based VPNs that cover only specific subnets rather than every address (0.0.0.0/0) are a better solution and are recommended over routing-based VPNs despite the additional management overhead required. Depending on the implementation, policy-based VPNs can be a bit harder to debug since it might not be obvious to the administrator where in the IP stack a packet is taken to be processed by the IPsec subsystem. This can lead to unexpected issues in hub-spoke deployments. For example, if a host with LAN IP address 10.0.2.1 and public IP 192.0.2.1 creates an IPsec tunnel to a remote host on IP 192.0.2.2 to cover traffic between 10.0.2.0/24 and 10.0.0.0/8, such an IPsec gateway might lose access to its own LAN since a packet with destination 10.0.2.13 will be sent over the IPsec tunnel because it\n``````markdown\nfalls within the destination IPsec policy range of 10.0.0.0/8. Routing-based VPNs do not have this issue because LAN packets do not pass through the routing table and instead find the target host to send the packet to via ARP. One common implementation processes the packets for IPsec after the network monitoring hooks are consulted. This leads to debugging tools, such as the tcpdump tool, seeing the packet as leaving the host unencrypted, while, in fact, the packet is encrypted after it is shown to the network debugging tool."
          }
        ]
      },
      {
        "title": "6.6 Firewall Settings",
        "content": [
          {
            "text": "The most common network issue when setting up IPsec is that a firewall on the VPN server or the network is blocking the IKE ports UDP 500 and 4500. If an IPsec connection works for simple ping commands but not when an application is trying to use the IPsec connection, the cause is most likely due to broken path MTU discovery. While this problem is not directly related to IPsec, it is often triggered because of the extra overhead of the ESP header making each 1500-byte original packet larger than 1500 bytes after the ESP header is added. The ESP packets would fragment, and, too often, some stateful router or firewall mistakenly drops these packets."
          },
          {
            "text": "Problems with the Maximum Segment Size (MSS) can be encountered when the ESP packet contains a TCP packet. For TCP to work properly, it needs to be able to send ICMP packets with the \"packet too big\" notification, but ICMP is often blocked. Some IPsec policies might only allow TCP packets and prohibit ICMP packets. This also commonly manifests itself as an administrator who can log in over the IPsec connection using the SSH protocol, but as soon as the administrator tries to actually use this session, the connection freezes. Decreasing the MTU size of the IPsec interface can work around this issue. For TCP, a common workaround is to set a smaller TCP MSS size that ensures that packets are not bigger than the path MTU. This method is called TCP MSS clamping. Most implementations also allow the setting of a fixed value independent of the discovered path MTU. Common fixed values include 1340 or even 1200."
          }
        ]
      },
      {
        "title": "7 IPsec Planning and Implementation",
        "content": [
          {
            "text": "This section focuses on the planning and implementation of IPsec in an enterprise. As with any new technology deployment, IPsec planning and implementation should be addressed in a phased approach. A successful deployment of IPsec can be achieved by following a clear, step-by-step planning and implementation process. The use of a phased approach for deployment can minimize unforeseen issues and identify potential pitfalls early in the process. This model also allows for the incorporation of advances in new technology, as well as adapting IPsec to the ever-changing enterprise. This section explores each of the IPsec planning and implementation phases in depth, as follows:\n```# CURRENT_PAGE_RAW_OCR_TEXT"
          }
        ]
      },
      {
        "title": "1. Identify Needs",
        "content": [
          {
            "text": "The first phase of the process involves identifying the need to protect network communications; determining which computers, networks, and data are part of the communications; and identifying related requirements (e.g., minimum performance criteria). This phase also involves determining how that need can best be met (e.g., IPsec, TLS, SSH) and deciding where and how the security should be implemented."
          }
        ]
      },
      {
        "title": "2. Design the Solution",
        "content": [
          {
            "text": "The second phase involves all facets of designing the IPsec solution. For simplicity, the design elements are grouped into five categories: architectural considerations, authentication methods, cryptography policy, performance, and packet filters."
          }
        ]
      },
      {
        "title": "3. Implement and Test a Prototype",
        "content": [
          {
            "text": "The next phase involves implementing and testing a prototype of the designed solution in a lab or test environment. The primary goals of testing are to evaluate the functionality, performance, scalability, and security of the solution and to identify any issues with the components, such as interoperability issues."
          }
        ]
      },
      {
        "title": "4. Deploy the Solution",
        "content": [
          {
            "text": "Once the testing is completed and all issues are resolved, the next phase includes the gradual deployment of IPsec throughout the enterprise."
          }
        ]
      },
      {
        "title": "5. Manage the Solution",
        "content": [
          {
            "text": "After the IPsec solution has been deployed, it is managed throughout its lifecycle. Management includes maintenance of the IPsec components and support for operational issues. The lifecycle process is repeated when enhancements or significant changes need to be incorporated into the solution. Organizations should also implement other measures that support and complement IPsec implementations. These measures help to ensure that IPsec is implemented in an environment with the technical, management, and operational controls necessary to provide adequate security for the IPsec implementation. Examples of supporting measures include the following:\n- Establish and maintain control over all entry and exit points for the protected network, which helps to ensure its integrity.\n- Ensure that all IPsec endpoints (gateways and hosts) are secured and maintained properly, which should reduce the risk of IPsec compromise or misuse.\n- Revise organizational policies as needed to incorporate appropriate usage of the IPsec solution. Policies should provide the foundation for the planning and implementation of IPsec. Appendix B contains an extensive discussion of IPsec-related policy considerations."
          }
        ]
      },
      {
        "title": "7.1 Identify Needs",
        "content": [
          {
            "text": "The purpose of this phase is to identify the need to protect communications and determine how that need can best be met. The first step is to determine which communications need to be protected (e.g., all communications between two networks, certain applications involving a particular server). The next step is to determine what protection measures (e.g., providing confidentiality, assuring integrity, authenticating the source) are needed for each type of# Communication"
          },
          {
            "text": "It is also important to identify other general and application-specific requirements, such as performance, and to think about future needs. For example, if it is likely that other types of communications will need protection in a year, those needs should also be considered."
          },
          {
            "text": "After identifying all of the relevant needs, the organization should consider the possible technical solutions and select the one that best meets the identified needs. Although IPsec is typically a reasonable choice, other protocols such as TLS or SSH may be equally good or better in some cases. See Section 8 for descriptions of such protocols and guidance on when a particular protocol may be a viable alternative to IPsec. In some cases, IPsec is the only option\u2014for example, if a gateway-to-gateway VPN is being established with a business partner that has already purchased and deployed an IPsec gateway for the connection. Another possibility is that the solution may need to support a protocol that is only provided by IPsec."
          },
          {
            "text": "Assuming that IPsec is chosen as the solution's protocol, the Identify Needs phase should result in the following:"
          },
          {
            "text": "Identification of all communications that need to be protected (e.g., servers, client hosts, networks, applications, data) and the protection that each type of communication needs (preferably encryption, integrity protection, and peer authentication)\nSelection of an IPsec architecture (e.g., gateway-to-gateway, remote access VPN, host-to-host, mesh encryption)\nSpecification of performance requirements (normal and peak loads)"
          }
        ]
      },
      {
        "title": "7.2 Design the Solution",
        "content": [
          {
            "text": "Once the needs have been identified, and it has been determined that IPsec is the best solution, the next phase is to design a solution that meets the needs. This involves five major components, which are described in more detail starting in Section 7.2.1:"
          },
          {
            "text": "Architecture. Designing the architecture of the IPsec implementation includes host placement (for host-to-host architectures) and gateway placement (for remote access and gateway-to-gateway architectures), IPsec client software selection (for host-to-host and remote access architectures), and host address space management considerations (for host-to-host and remote access architectures).\n\n\nCryptography for Authentication. The IPsec implementation must have an authentication method selected, such as the use of a digital signature or PSK. Only NIST-approved methods and algorithms shall be used. See NIST SP 800-131A [18].\n\n\nCryptography for Key Exchange, Confidentiality, and Integrity. The algorithms for DH key exchange, encryption, and integrity protection must be selected, as well as the key lengths for algorithms that support multiple key lengths. Only NIST-approved methods and algorithms shall be used. See NIST SP 800-131A [18].\n\n\nPerformance. Components of the IPsec implementation may need to take performance into consideration, such as tuning their configurations, using particular algorithms, or enabling particular options.\n\n\nPacket Filter. The packet filter determines what types of traffic should be# CURRENT_PAGE_RAW_OCR_TEXT"
          },
          {
            "text": "Architecture. Designing the architecture of the IPsec implementation includes host placement (for host-to-host architectures) and gateway placement (for remote access and gateway-to-gateway architectures), IPsec client software selection (for host-to-host and remote access architectures), and host address space management considerations (for host-to-host and remote access architectures)."
          },
          {
            "text": "Cryptography for Authentication. The IPsec implementation must have an authentication method selected, such as the use of a digital signature or PSK. Only NIST-approved methods and algorithms shall be used. See NIST SP 800-131A [18]."
          },
          {
            "text": "Cryptography for Key Exchange, Confidentiality, and Integrity. The algorithms for DH key exchange, encryption, and integrity protection must be selected, as well as the key lengths for algorithms that support multiple key lengths. Only NIST-approved methods and algorithms shall be used. See NIST SP 800-131A [18]."
          },
          {
            "text": "Performance. Components of the IPsec implementation may need to take performance into consideration, such as tuning their configurations, using particular algorithms, or enabling particular options."
          },
          {
            "text": "Packet Filter. The packet filter determines what types of traffic should be# CURRENT_PAGE_RAW_OCR_TEXT"
          },
          {
            "text": "permitted,\nwhat should be denied, and what protection and compression measures (if any) should be applied to each type of permitted traffic (e.g., ESP tunnel using AES for encryption and HMAC-SHA256 for integrity protection; Lempel-Ziv-Stac [LZS] for compression). The decisions made regarding cryptography and packet filters are all documented in the IPsec policy. In its simplest form, an IPsec policy is a set of rules that govern the use of the IPsec protocol. It specifies the data to secure and the security method to use to secure that data. An IPsec policy determines the type of traffic that is allowed through IPsec endpoints and generally consists of a packet filter and a set of security parameters for traffic that matches the packet filter. Those parameters include the authentication and encryption scheme and tunnel settings. When communications occur, each packet filter can result in the establishment of one or more IPsec SAs that enable protected communications satisfying the security policy for that packet filter. Other decisions should also be made during the design phase, such as setting IKE and IPsec SA lifetimes and identifying which DH group number is best. In addition to meeting the organization's cryptographic requirements of NIST SP 800-131A [18] and FIPS 140 [13][14], design decisions should incorporate the organization's logging and data management strategies, incident response and recovery plans, resource replication and failover needs, and current and future network characteristics, such as the use of wireless, NAT, and IPv6. Section 7.2.6 covers these considerations and design decisions in more detail."
          }
        ]
      }
    ]
  },
  {
    "title": "Firewall",
    "subsections": [
      {
        "content": "or router) may put too high of a load on the device during peak usage, causing service disruptions. A possible alternative is to offload the cryptographic operations to a specialized hardware device, such as a network card with built-in cryptographic functions. Organizations should also review their network architecture to determine if bottlenecks are likely to occur due to network devices (e.g., routers, firewalls) that cannot sustain the processing of peak volumes of network traffic that include IPsec-encapsulated packets. For remote access architectures, the choice of DH group is important because it is the most computationally demanding part of IKE."
      },
      {
        "title": "Traffic Examination",
        "content": [
          {
            "text": "If IPsec-encrypted traffic passes through a firewall, the firewall cannot determine what protocols the packets' payloads contain, so it cannot filter the traffic based on those protocols. Intrusion detection systems encounter the same issue: they cannot examine encrypted traffic for attacks. However, it is generally recommended to design the IPsec architecture so that a firewall and intrusion detection software can examine the unencrypted traffic. Organizations most commonly address this by using their internet firewalls as VPN gateways or placing VPN gateway devices just outside their internet firewalls. A full mesh encryption bypasses all network-based firewalls and intrusion detection systems because those systems can only accept or reject the encrypted stream without being able to inspect the data that has been encrypted. This could mean a reduction of security. This is discussed in greater detail in [57]."
          }
        ]
      },
      {
        "title": "Traffic Not Protected by IPsec",
        "content": [
          {
            "text": "Organizations should carefully consider the threats against network traffic after it has been processed by the receiving IPsec gateway and sent without IPsec protection across additional network segments. For example, an organization that wants to place its VPN gateway outside of its internet firewalls should ensure that the traffic passing between the IPsec gateway and the internet firewalls has sufficient protection against breaches of confidentiality and integrity."
          }
        ]
      },
      {
        "title": "Gateway Outages",
        "content": [
          {
            "text": "The architecture should take into consideration the effects of IPsec gateway outages, including planned maintenance outages and unplanned outages caused by failures or attacks. For example, if the IPsec gateway is placed inline near the internet connection point, meaning that all network traffic passes through it, a gateway failure could cause a loss of all internet connectivity for the organization. Also, larger IPsec implementations may use a gateway management server; a server failure could severely impact the management of all gateways. Generally, if the network is designed to be redundant, the IPsec gateways and management servers should also be designed to be redundant.\n```# CURRENT_PAGE_RAW_OCR_TEXT"
          }
        ]
      },
      {
        "title": "NAT",
        "content": [
          {
            "text": "NAT provides a mechanism to use private addresses on the internal network while using public addresses to connect to external networks. NAT can map each private address to a different public address, while the network address port translation (NAPT) variant of NAT can map many private addresses to a single public address, differentiating the original addresses by assigning different public address ports. NAT is often used by enterprises, small offices, and residential users that do not want to pay for more IP addresses than necessary or wish to take advantage of the security benefits and flexibility of having private addresses assigned to internal hosts."
          },
          {
            "text": "Unfortunately, as described in Section 4, there are known incompatibilities between IPsec and NAT because NAT modifies the IP addresses in the packet, which directly violates the packet integrity assurance provided by IPsec. However, there are a few solutions to this issue, including:"
          },
          {
            "text": "Perform NAT before applying IPsec. This can be accomplished by arranging the devices in a particular order or by using an IPsec gateway that also performs NAT. For example, the gateway can perform NAT first and then IPsec for outbound packets. This is sometimes required because an IPsec service provider with multiple customers cannot build tunnels to each customer using the same internal IP addresses and thus requires their customers to use specific RFC 1918 [41] IP addresses.\n\n\nUse UDP or TCP encapsulation of ESP packets. Encapsulation requires tunnel mode. Encapsulation adds a UDP or TCP header to each packet, which provides an IP address and UDP/TCP port that can be used by NAT (including NAPT). This removes conflicts between IPsec and NAT in most environments. IKE negotiates the use of encapsulation. During the IKE initial exchanges, both endpoints perform NAT discovery to determine if NAT services are running between the two IPsec endpoints. NAT discovery involves each endpoint sending a hash of its original source address(es) and port to the other endpoint, which compares the original values to the actual values to determine if NAT was applied. IKE then moves its communications from UDP port 500 to port 4500 in order to avoid inadvertent interference from NAT devices that perform proprietary alterations of IPsec-related activity. Detection of NAT and the use of encapsulation can also cause the host behind the NAT device to send keepalive packets to the other endpoint, which should keep the NAPT port-to-address mapping from being lost. Although all IKEv2 implementations must support UDP encapsulation, TCP encapsulation is a recent addition that has not yet reached universal support in IPsec devices."
          },
          {
            "text": "Perform NAT before applying IPsec. This can be accomplished by arranging the devices in a particular order or by using an IPsec gateway that also performs NAT. For example, the gateway can perform NAT first and then IPsec for outbound packets. This is sometimes required because an IPsec service provider with multiple customers cannot build tunnels to each customer using the same internal IP addresses and thus requires their customers to use specific RFC 1918 [41] IP addresses."
          },
          {
            "text": "Use UDP or TCP encapsulation of ESP packets. Encapsulation requires tunnel mode. Encapsulation adds a UDP or TCP header to each packet, which provides an IP address and UDP/TCP port that can be used by NAT (including NAPT). This removes conflicts between IPsec and NAT in most environments. IKE negotiates the use of encapsulation. During the IKE initial exchanges, both endpoints perform NAT discovery to determine if NAT services are running between the two IPsec endpoints. NAT discovery involves each endpoint sending a hash of its original source address(es) and port to the other endpoint, which compares the original values to the actual values to determine if NAT was applied. IKE then moves its communications from UDP port 500 to port 4500 in order to avoid inadvertent interference from NAT devices that perform proprietary alterations of IPsec-related activity. Detection of NAT and the use of encapsulation can also cause the host behind the NAT device to send keepalive packets to the other endpoint, which should keep the NAPT port-to-address mapping from being lost. Although all IKEv2 implementations must support UDP encapsulation, TCP encapsulation is a recent addition that has not yet reached universal support in IPsec devices."
          }
        ]
      }
    ]
  },
  {
    "title": "Support for the Following:",
    "subsections": [
      {
        "content": "IKEv2\nIKEv1 (if communicating to legacy equipment)\nIKEv2 fragmentation\nIKEv2 encapsulation (UDP, TCP, or TCP-TLS)\nIKEv2 PPK\nParticular encryption, integrity protection, and compression algorithms\nParticular authentication methods, such as EAP-TLS, RSA, and ECDSA\nMultiple simultaneous tunnels. However, a host shall not have more than 1 tunnel at any given time.\nAuthentication support for hardware tokens utilizing Open Authorization (OAuth), OTP, or Fast Identity Online (FIDO)\nFlexible X.509 certificates and optional IPsec Extended Key Usage (EKU) restrictions\nCRL and/or OCSP support\nCertificate uniform resource indicator (URI) and raw keys for embedded clients\nDNSSEC provisioning of enterprise trust anchors"
      }
    ]
  },
  {
    "title": "CURRENT_PAGE_RAW_OCR_TEXT",
    "subsections": [
      {
        "content": "Interfaces. Due to its security complications and risks, split tunneling is strongly discouraged."
      },
      {
        "content": "As described in Section 7.2.6, not allowing split tunneling is also helpful in preventing the IPsec clients' hosts from being compromised. If a user mistakenly tries to connect to a malicious site, the traffic would be forced to go through the VPN where an enterprise firewall or proxy server could filter malicious traffic. Some organizations prefer split tunneling because it prevents non-enterprise traffic from reaching the enterprise. It also reduces the internet bandwidth capacity needed by the enterprise to support its remote VPN clients. There may also be legal reasons why an enterprise prefers not to handle traffic unrelated to its organization."
      },
      {
        "content": "There are other factors that may differentiate IPsec clients. For example, one client may provide substantially better performance or consume less of the host's resources. Another consideration is the security of the client software itself, such as how frequently vulnerabilities are identified and how quickly patches are available. Client interoperability with other IPsec implementations is also a key concern; some client implementations only interoperate with their own vendor's gateway implementation or with a limited number of other vendors' gateway implementations. It is critical to ensure that the selected client will interoperate with each gateway implementation that it might encounter. Section 7.3.1 discusses this topic in more detail."
      },
      {
        "content": "Organizations should also carefully consider how clients can be provisioned with IPsec client software and configuration settings, including policies. Many clients offer different features that can make client deployment, configuration, and management easier. For example, an administrator might be able to remotely set policy for clients rather than manually visiting each host. Some clients offer administrators the ability to lock out or disable certain configuration options or functionality so that users cannot inadvertently or intentionally circumvent the intended security. If administrators cannot distribute pre-configured IPsec clients or remotely control IPsec configuration settings, the administrators might need to manually configure each IPsec client or rely on users to follow instructions and configure the clients themselves. The latter approach is often challenging for non-technical users."
      },
      {
        "title": "7.2.1.3 Host Address Space Management",
        "content": [
          {
            "text": "In remote access VPN architectures where the hosts are outside of the organization (e.g., mobile devices, remote workers), the VPN client will receive an additional IP address from the organization's address space assigned as a virtual IP address to each external IPsec host. The client will then establish an IPsec connection that uses its real IP address in the external packet headers (so that the IPsec-encapsulated packets can be routed across public networks) and its virtual IP address in the internal packet headers (so that the packets can be routed across the organization's internal networks and treated as internally generated)."
          },
          {
            "text": "Virtual addresses can be assigned from an address pool that resides on the VPN server. The VPN\n```# CURRENT_PAGE_RAW_OCR_TEXT"
          }
        ]
      },
      {
        "title": "DHCP Relay Protocol and IP Address Management",
        "content": [
          {
            "text": "The server can also use the DHCP relay protocol or a AAA service, such as RADIUS or Diameter, to obtain an IP address. A local pool can provide an easier indication that the IP address accessing a local resource is originating from a VPN client or is a client connecting from a certain region. It is important to ensure that any addresses managed by the IPsec gateway are excluded from the ranges that other internal DHCP servers can assign to avoid address conflicts. Some vendors provide internal address assignment and authentication using proprietary functionality. This may present compatibility issues depending on the products being used."
          }
        ]
      },
      {
        "title": "Remote Access VPN Deployment",
        "content": [
          {
            "text": "When deploying a remote access VPN in a data center or cloud where the only service offered is the VPN server without any other local resources, non-routable IP addresses, such as those defined in RFC 1918 [41], can be used for the address pool of virtual IPs for the VPN clients. The VPN server then uses NAT to translate these IP addresses to its own public IP address. One potential issue with such a deployment is that some websites limit the number of users or connections coming from a single IP address. If dozens or hundreds of website users appear to all come from one VPN server public IP address, the website might block the IP address because it assumes that it is a malicious entity that obtained the credentials of many users. Using multiple public IP addresses on such a VPN server deployment could mitigate this problem."
          }
        ]
      },
      {
        "title": "IKE Authentication",
        "content": [
          {
            "subsection": "Authentication Methods",
            "text": []
          },
          {
            "text": "The endpoints of a host-to-host and gateway-to-gateway IPsec architecture typically use the same authentication method to validate each other. Validation for remote access VPNs tend to use different mechanisms to authenticate each other, such as when the server is authenticated using a machine certificate, and clients are authenticated using EAP-TLS. IPsec implementations typically support a number of authentication methods. The most common methods are certificate-based digital signatures or raw public keys, EAP, and PSK. When using IKEv1, a group PSK combined with a username and password is also common. This section discusses the primary advantages and disadvantages of these methods."
          },
          {
            "subsection": "PSK Usage",
            "text": []
          },
          {
            "text": "PSKs should only be used for gateway-to-gateway scenarios that cross an administrative domain and only when based on generating strong and sufficiently long random PSKs with at least 112 bits of entropy. Using a public-key key pair (with or without certificates) based on RSA, DSA, or ECDSA is preferred over using PSKs, but if the implementations that need to interoperate do not share the same public key-based authentication method, PSKs are an appropriate alternative. Within an administrative domain, PSKs should not be used. For remote access VPN scenarios, EAP-TLS or machine certificate authentication should be used."
          },
          {
            "subsection": "PSKs Configuration",
            "text": []
          },
          {
            "text": "To use PSKs, the IPsec administrator needs to create a strong random secret key or password string that is then configured in both IPsec devices (the endpoints) of an IPsec connection.# PSKs and Key Management"
          },
          {
            "text": "PSKs are the simplest authentication method to implement but are also, by far, the least secure. Administrators need to find IPsec products that provide key management capabilities for PSKs or implement their own key management mechanisms, such as generating, storing, deploying, auditing, and destroying keys. Proper key management can be quite resource intensive. Although it is easiest to create a single key that all endpoints share, this causes problems when a host should no longer have access; the key then needs to be changed on all other hosts. PSKs should also be updated periodically to reduce the potential impact of a compromised key. Another issue is that the key must be kept secret and transferred over secure channels. Individuals with access to an endpoint are almost always able to gain access to the PSK. Depending on the key type, this could grant access from one, some, or all IP addresses. Using the same key for a group of endpoints also reduces accountability since anyone within the group can impersonate another member of the group. Therefore, NIST discourages the use of a PSK for more than two entities."
          },
          {
            "text": "Because of scalability and security concerns, PSK authentication is generally an acceptable solution only for small-scale implementations with known IP addresses or small IP address ranges. The use of a single PSK for a group of hosts is strongly discouraged for all but the most highly controlled environments, such as a group of secure routers. PSKs are generally not recommended for remote access clients that have dynamic IP addresses because the keys cannot be restricted to a particular IP address or small range of IP addresses. PSKs are also frequently used during initial IPsec testing and implementation because of their simplicity. After the IPsec implementation is operating properly, the authentication method can be changed."
          }
        ]
      },
      {
        "title": "7.2.2.2 Certificate-based Digital Signatures",
        "content": [
          {
            "text": "Certificates for IPsec are typically used in \"machine certificate\" and EAP-TLS-based authentication. The certificate owner produces a digital signature of the IKE exchange that proves its possession of the certificate's private key and authenticates the IKE session. A certificate identifies each device, and each device is configured to use certificates. User-specific certificates may be used instead of device-specific certificates, but some remote access VPN configurations do not allow a single user to log onto multiple devices simultaneously, so it is always better to generate a certificate per device rather than per user."
          },
          {
            "text": "Two IPsec endpoints will trust the validity of the presented peer certificate if a CA that they both trust has signed their certificates. The certificates must be securely stored in the local certificate store on the IPsec hosts and gateways or on a secure hardware token. Using a certificate-based method allows much of the key administration to be offloaded to a central certificate server but still requires IPsec administrators to perform some key management activities, such as provisioning hosts with credentials, either through IPsec vendor-provided features or IPsec.# Administrator-Created Capabilities"
          },
          {
            "text": "Many organizations implement a public key infrastructure (PKI) for managing certificates for IPsec VPNs and other applications, such as secure email and web access. Certificates can be issued to limit their use using EKU attributes. Some IPsec hosts insist on IPsec-specific EKUs, while others accept the TLS-based EKUs (serverAuth or clientAuth) and some ignore all EKUs. The IETF PKI standard for IKE EKUs is specified in RFC 4945 [60]. A certificate issued for secure email might not be usable for IPsec on some of the VPN gateways deployed in an organization. Issuing certificates per device instead of per user avoids this issue and has the additional advantage that if a device is lost or stolen, not all of the user's VPN access will need to be revoked."
          },
          {
            "text": "Although the certificate authentication method scales well to large implementations and provides a much stronger security solution than PSKs, it does have some disadvantages. While certificates can be revoked and transmitted to the VPN servers via CRLs [61] in bulk or on demand via OCSP [62], these mechanisms typically provide no option for temporarily disabling a certificate. Additional complications can occur when the connection to the OCSP server itself is down or, worse, requires an IPsec tunnel to be negotiated that needs to use that OCSP server. Nonstandard solutions using a AAA server or a pluggable authentication module (PAM authentication) are usually added for such use cases."
          },
          {
            "text": "Another potential problem with the certificate authentication method involves packet fragmentation. Packets in an IKE negotiation are typically relatively small and do not need to be fragmented. By adding certificates to the negotiation, packets may become so large that they need to be fragmented, which is not supported by some IPsec implementations."
          }
        ]
      },
      {
        "title": "7.2.2.3 Raw Public Key Digital Signatures",
        "content": [
          {
            "text": "Raw public key digital signatures work the same way as certificate-based digital signatures, except that instead of trusting a certificate (directly or indirectly via a CA), the trust is placed in the public key itself. Keys are usually represented in base64 format or using just the SPKI part of a certificate."
          },
          {
            "text": "Public keys can be distributed to the endpoints via trusted provisioning software or can be fetched on demand from DNSSEC or a directory service (e.g., Lightweight Directory Access Protocol [LDAP]) based on the ID presented during the IKE exchange. Instead of specifying the validity period in a certificate, these publishing services can simply remove the key when it is no longer needed. The public key for a particular ID specified in IKE resides in the DNS or directory service under that ID name. Revocation is accomplished by removing the public key from the publishing service's database."
          },
          {
            "text": "For resource-constrained embedded devices that authenticate using a single, hard-coded public key, a certificate by itself can be too large to be contained or operated on and serves no purpose since certificate validation is not performed.# One disadvantage of raw public keys"
          },
          {
            "text": "One disadvantage of raw public keys is that there are not as many tools that support these because most IKE implementations have been written to be used with certificates or PSKs."
          }
        ]
      },
      {
        "title": "7.2.2.4 EAP",
        "content": [
          {
            "text": "EAP support is included in IKEv2. Both older and newer EAP methods are supported. EAP can be used as the only authentication method or as a second authentication method. Often, different authentication methods are used: the server is authenticated using certificate-based authentication, and the client (typically a laptop or mobile device) is authenticated using an EAP method. EAP authentication allows additional types of authentications to be used, such as a username with a password (EAP-MSCHAPv2), a user (not host) certificate (EAP-TLS), or an EAP method supporting two-factor authentication. EAP authentication is mostly used for laptops and mobile phones."
          }
        ]
      },
      {
        "title": "7.2.3 Cryptography for Confidentiality and Integrity Protection and for Key Exchange",
        "content": [
          {
            "text": "Setting the cryptographic policy for confidentiality and integrity protection and for key exchange involves choosing encryption and integrity protection algorithms, key lengths, DH groups for key exchange, and IKE and ESP lifetimes. For up-to-date policies and advice on these settings, see NIST SP 800-131A [18] and FIPS 140 [13][14] as well as the recommendations of the IETF for IKE [25] and ESP [63]. Note that these documents will be updated over time or be obsoleted for newer publications."
          },
          {
            "text": "The IKE protocol sends just a few packets per hour, so it makes sense to be extra cautious and pick strong algorithms with large enough keys and, specifically, a strong DH group. Approved DH groups are identified in NIST SP 800-56A [64]. The bulk of the CPU power of an IPsec host will be spent on IPsec, not IKE. In IKE, the most CPU-intensive operation is the DH calculation. When an IPsec host has hundreds or thousands of IKE (re)connections, choosing the right DH group becomes very important."
          },
          {
            "text": "The use of strong key sizes is recommended for IKE. The performance impact of larger key sizes is minimal because IKE traffic is negligible compared to IPsec traffic. For IPsec (ESP), the key size can have a significant impact on performance. In general, use larger key sizes for IPsec if performance is not an issue. For ESP, the choice of algorithms for confidentiality and integrity protection should also take performance into account. Using an AEAD algorithm that can provide both confidentiality and integrity protection in a single operation, such as AES-GCM, will give better performance than using non-AEAD algorithms that require separate operations (e.g., AES-CBC for encryption and HMAC for integrity protection). It is important to estimate the processing resources that the cryptographic computations will require during peak usage."
          },
          {
            "text": "It is uncommon to use 192-bit AES keys, and this key length is optional in [25]. It is worth# CURRENT_PAGE_RAW_OCR_TEXT"
          },
          {
            "text": "Mentioning as well that in the future, an adversary with a quantum computer may be able to reduce the key strength of an AES key by a factor of two, in which case a 256-bit AES key may effectively provide around 128 bits of security in the quantum computer world."
          }
        ]
      },
      {
        "title": "AES-GCM and AES-CBC",
        "content": [
          {
            "text": "AES-GCM (an AEAD algorithm) is often offloaded to hardware, making it significantly faster than AES-CBC (a non-AEAD algorithm) in combination with an HMAC. The CPU is typically the hardware component most affected by cryptographic operations. In some cases, a hardware-based cryptographic engine with a customized CPU (also known as a cryptographic accelerator) may be needed for greater throughput, but this may limit the algorithm options."
          }
        ]
      },
      {
        "title": "Export Restrictions and IPsec Components",
        "content": [
          {
            "text": "Another potential issue is export restrictions involving the use of encryption algorithms in certain countries. In addition, some IPsec components may not provide support for a particular algorithm or key size. For integrity checking of non-AEAD algorithms, most IPsec implementations offer HMAC-SHA-1 or HMAC-SHA-2. Even though HMAC-SHA-1 is still a NIST-approved option, the HMAC-SHA-2 algorithms are recommended because they have stronger security than HMAC-SHA-1. HMAC-MD5 has never been a NIST-approved algorithm and shall not be used."
          }
        ]
      }
    ]
  },
  {
    "title": "7.2.4 High Speed and Large Server Considerations",
    "subsections": [
      {
        "content": "While network devices such as routers and firewalls will already be optimized for network performance, generic operating systems will require tuning for optimized network performance. Enough RAM should be made available to the network stack. CPU power saving and throttling should be disabled, and on non-uniform memory access (NUMA) systems, further optimizations might be possible. Consult the hardware vendor for specific instructions."
      },
      {
        "title": "Network Card Settings",
        "content": [
          {
            "text": "Network card settings can also have a large impact on throughput. Check that the network card's transmit queue (txqueuelen) is set large enough to accommodate the amount of traffic. Check the network card settings for TCP segmentation offload (TSO), generic segmentation offload (GSO), checksum offloading, and virtual local area network (VLAN) settings. If using a network card with IPsec hardware acceleration support, follow the vendor's instructions on how to optimize the host."
          }
        ]
      }
    ]
  },
  {
    "title": "Hardware and Virtualization",
    "subsections": [
      {
        "content": "This needs to be enabled in the Basic Input/Output System (BIOS). For example, on Intel systems, ensure that Intel Virtualization Technology for Directed I/O (Intel VT-d) is enabled. Ensure that the virtualization is not emulating a slightly different CPU than the real hardware because it will not be able to use the hardware virtualization instructions of the CPU and instead will have to perform full emulation in software."
      },
      {
        "content": "Ideally, when not using IPsec, the system should be able to utilize line-speed unencrypted traffic. A popular network tool to perform network performance tests is iperf. Once the system is performing well without IPsec, IPsec can be enabled."
      },
      {
        "content": "IPsec hosts that are busy will spend the bulk of their computational resources on encrypting and decrypting ESP traffic. The performance of the algorithms for IKE is less important since there are far fewer IKE packets than ESP packets in most deployments of IPsec VPNs."
      },
      {
        "title": "7.2.4.1 ESP Performance Considerations",
        "content": [
          {
            "text": "If the host's CPU usage is the limiting factor, it is particularly important to use the right algorithms. Using an AEAD algorithm for encryption and integrity protection is much faster than using two non-AEAD algorithms. The best algorithm choice will likely be AES-GCM because modern CPUs have hardware support for it. Both 256-bit and 128-bit AES keys currently provide strong protection, so when CPU load becomes an issue, one could consider switching from 256-bit to 128-bit keys, provided that this is allowed by the deployment policy. Otherwise, 256-bit keys are recommended."
          },
          {
            "text": "If the host is running a few high-speed IPsec SAs, it could be that multiple CPUs on the host are not utilized properly to spread the cryptographic load of a single IPsec SA over multiple CPUs. When multiple CPUs are used for a single IPsec SA, there will be an increase in out-of-order packets being sent, and the replay window will need to be increased to accommodate this at both endpoints. IPsec replay protection can be disabled to test if that is the limiting factor for the server performance. This is less of a concern on busy servers that act as a remote access VPN since these will be serving many users' IPsec SAs per CPU. For high-speed IPsec SAs, it is also important to use ESNs to avoid excessive rekeying."
          },
          {
            "text": "If the application is sending packets close to the MTU size, using ESP encryption (which adds a few bytes in size compared to the unencrypted packet size) might lead to fragmentation, which will reduce performance. If the IPsec SA is a connection within a data center or over a dedicated fiber cable, it might be possible to increase the MTU size (e.g., to 9000 bytes) to prevent fragmentation. The MTU of the internal-facing network card can also be reduced to force the LAN to send packets that are smaller than 1500 bytes so that once the host encrypts the packet to send it out over the external interface, the ESP packet will not exceed an MTU of 1500 bytes."
          },
          {
            "text": "TCP MSS clamping can be used on both IPsec endpoints to ensure that TCP sessions will use a...\n```# CURRENT_PAGE_RAW_OCR_TEXT"
          }
        ]
      },
      {
        "title": "lower MTU that prevents fragmentation.",
        "content": [
          {
            "subsection": "7.2.4.2 IKE performance considerations",
            "text": []
          },
          {
            "text": "While IKE performance in most cases does not matter, it does matter for remote access VPN servers that have a continuous stream of clients connecting and disconnecting. If IKE uses too much of the CPU resources, ESP processing times will be impacted as well. If a remote access VPN server is too busy and has degraded to the point where an IKE session takes more than a few seconds to establish, the server will completely collapse under the load. IKE clients usually time out after 5 to 10 seconds and will start a new IKE attempt. This will put even more load on the already loaded server. That is, the load based on the number of IKE clients connecting will slowly rise until it hits a breaking point. If the IKE REDIRECT [44] extension is supported, the server can be configured to start redirecting clients to another server before it becomes too busy. See Section 3.8 for more information."
          },
          {
            "text": "The most computationally expensive part of IKE is the DH calculation that is performed during a key exchange. DH implemented using ECP groups (elliptic curve group modulo a prime) takes fewer resources than the use of finite field groups (i.e., modular exponential or MODP groups), such as DH group 14. The DH 19, DH 20, and DH 21 ECP groups are also considered more secure than the MODP groups [65]. DH groups 1, 2, 5, and 22 are not NIST-approved because these groups do not supply the minimum of 112 bits of security. See NIST SP 800-56A [64] for further information about approved DH groups."
          },
          {
            "text": "MOBIKE should be enabled on remote access VPN servers. Mobile devices will switch between WiFi and mobile data. Without MOBIKE, this requires a new IKE session for each network switch, which will increase the number of DH calculations that need to be supported. IKE clients on unreliable WiFi can result in many IKE sessions being reset and restarted. When MOBIKE is used, an encrypted informational exchange message is sent to modify the existing IKE and ESP sessions to use the new IP address of the other interface and avoid starting new sessions with new, expensive DH group calculations."
          },
          {
            "text": "Liveness probes can be used by a server to detect remote clients that have vanished without sending a delete notification. The timer for these probes should not be set too short or else the server will need to send frequent IKE packets with DPD probes for idle IKE clients. If the timeout value is set very short (on the order of a few seconds), there is the additional risk of IKE clients on unreliable networks not receiving the DPD probes. The server will disconnect the IKE client when a response to the probe is not returned. That client will experience packet loss and declare the IPsec connection dead. This will lead to the creation of another new IKE session and an increased load on the VPN server. In general, keeping a few IKE and IPsec states alive for vanished VPN clients takes very little memory and no CPU resources. A reasonable# DPD"
          },
          {
            "text": "The timeout value is in the range of 10 to 60 minutes. The IKE SA and IPsec SA lifetimes are not negotiated. Each endpoint decides when it wants to rekey or expire an existing SA. Using longer IKE SA and IPsec SA lifetimes can reduce the amount of IKE rekeying required. IKE rekeying and IPsec rekeying with PFS require a new DH calculation as well, so extending the IKE and IPsec lifetimes can help reduce the server load."
          },
          {
            "text": "Increased lifetimes must not result in keys encrypting too much data. The upper limit on the amount of data that can be safely encrypted depends on the specific encryption algorithm used. Another option on busy servers with many remote access users is to support IKE session resumption. A mobile device that is going to sleep can send the server a sleep notification to prevent DPD-based disconnections. The server and client keep the cryptographic state of the IKE session. When the device wakes up, it can send an encrypted session resumption request. This avoids the need for a new IKE session with the expensive DH calculation to establish a new connection; the server is triggered via a DPD timeout to delete the IKE and IPsec SA if the sleep period exceeds the timeout period."
          },
          {
            "text": "If a provisioning system is used to generate and install configurations for the IKE clients, optimized settings could be pushed automatically to all IKE clients to ensure optimal performance. This would avoid manual configurations that, when performed by inexperienced users, could result in less optimized settings because the user did not enable or disable certain features."
          },
          {
            "text": "Enabling IKE debugging can cause a lot of data to be logged. That in itself can cause a significant performance impact on the system. Always check to see if debugging has accidentally been left enabled on systems experiencing a high workload."
          }
        ]
      },
      {
        "title": "7.2.4.3 IKE DDoS Attack Considerations",
        "content": [
          {
            "text": "DDoS attacks are a separate issue of concern. Such attacks also put an additional load on the server, but the characteristics are different from a legitimate user load. An attack from an authenticated user with valid credentials is assumed to be a readily solvable problem\u2014simply revoke the user's access to the VPN infrastructure. One exception to this is when anonymous IPsec is in use because in that case, the connection cannot be terminated or prevented based on the user credentials. Vendors of IPsec equipment supporting anonymous IPsec connections should take countermeasures by, for example, limiting the number of IPsec SA requests that are accepted or by limiting the number of rekeys or anonymous connections allowed based on an IP address."
          },
          {
            "text": "IKEv2 has built-in protection against DDoS attacks, but IKEv1 does not. When the number of incomplete IKE sessions (sometimes called half-open IKE SAs) reaches a threshold, indicating a possible DDoS attack, IKEv2 can enable DDoS COOKIES. Each new IKE_SA_INIT request# CURRENT_PAGE_RAW_OCR_TEXT"
          },
          {
            "text": "will be answered with a reply that only contains a COOKIE based on a local secret and the client's IP address and port. The client will have to resend its original IKE_SA_INIT request with the COOKIE added to the request. The server can calculate the value of the COOKIE without needing to store any state in memory for the original IKE_SA_INIT request. The IKE server will only perform the expensive DH calculations after the client has retransmitted its IKE_SA_INIT packet with the COOKIE, proving to the server that the client was not simply a spoofed IP packet."
          },
          {
            "text": "Additionally, IKEv1 can be coerced into an amplification attack. With IKEv1, the responder and initiator are each responsible for retransmission when a packet is lost. A malicious user can send a single spoofed IKEv1 packet to an IKEv1 server and cause that IKEv1 server to send several retransmit packets to the spoofed IP address. Some IKEv1 implementations defend against this by never responding more than once to an initial IKEv1 request, but this can break legitimate IKEv1 clients using aggressive mode when there is actual packet loss happening."
          }
        ]
      },
      {
        "title": "7.2.5 Packet Filter",
        "content": [
          {
            "text": "The purpose of the packet filter is to specify how each type of incoming and outgoing traffic should be handled\u2014whether the traffic should be permitted or denied (usually based on IP addresses, protocols, and ports) and how permitted traffic should be protected (if at all). By default, IPsec implementations typically provide protection for all traffic. In some cases, this may not be advisable for performance reasons. Encrypting traffic that does not need protection or is already protected (e.g., encrypted by another application) can be a significant waste of resources. For such traffic, the packet filter could specify the use of the null encryption algorithm for ESP, which would provide integrity checks and anti-replay protection, or the packet filter could simply pass along the traffic without any additional protection at all and fully depend on the application to provide data integrity. One caveat is that the more complex the packet filter becomes, the more likely it is that a configuration error may occur, which could permit traffic to traverse networks without sufficient protection."
          },
          {
            "text": "An issue related to packet filters is that certain types of traffic are incompatible with IPsec. For example, IPsec cannot negotiate security for multicast and broadcast traffic. This means that some types of applications, such as multicast-based video conferencing, may not be compatible with IPsec. Attempting to use IPsec to secure such traffic often causes communication problems or impairs or breaks application functionality. Other traffic, such as multicast DNS (mDNS) and DNS Service Discovery (DNS-SD) broadcast requests, should not be forwarded to other networks because they have no meaning or relevance beyond the local network. For example, ICMP error messages are often generated by an intermediate host such as a router, not by a# Tunnel Endpoint"
          },
          {
            "text": "Because the source IP address of the error message is the intermediate host's address, these ICMP packets do not have confidentiality or integrity protection, and the receiving host cannot make security policy decisions based on unprotected packets. Packet filters should be configured to not apply IPsec protection to types of traffic that are incompatible with IPsec; rather, they should let the traffic pass through unprotected if that does not compromise security."
          },
          {
            "text": "If the IPsec gateway cannot block broadcasts and other traffic that should not be passed through it, it may also be effective to configure firewalls or routers near the IPsec gateway to block that particular type of traffic."
          }
        ]
      },
      {
        "title": "7.2.6 Other Design Considerations",
        "content": [
          {
            "text": "A particularly important consideration in design decisions is the identification and implementation of other security controls. Organizations should have other security controls in place that support and complement the IPsec implementation. For example, organizations should configure packet filtering devices (e.g., firewalls, routers) to restrict direct access to IPsec gateways. Organizations should have policies in place regarding the acceptable use of IPsec connections and software. Organizations may also set minimum security standards for IPsec endpoints, such as mandatory host hardening measures and patch levels, and specify security controls that must be employed by every endpoint."
          },
          {
            "text": "For endpoints outside of the organization's control\u2014such as systems belonging to business partners, users' home computers, and public internet access networks\u2014organizations should recognize that some of the endpoints might violate the organization's minimum security standards. For example, some of these external endpoints might be compromised by malware and other threats; malicious activity could then enter the organization's networks from the endpoints through their IPsec connections. To minimize risk, organizations should restrict the access provided to external endpoints as much as possible and also ensure that policies, processes, and technologies are in place to detect and respond to suspicious activity. Organizations should be prepared to identify users or endpoint devices of interest and disable their IPsec access rapidly as needed."
          },
          {
            "text": "IPsec packet filters can be helpful in limiting external IPsec endpoints' access to the organization. Using packet filters to limit acceptable traffic to the minimum necessary for untrusted hosts, in addition to other network security measures (e.g., firewall rulesets, router access control lists), should be effective in preventing certain types of malicious activity from reaching their targets. Administrators may also need to temporarily suspend access for infected hosts until appropriate host security measures (e.g., antivirus software update, patch deployment) have resolved any infection-related issues. Another option in some environments is to...# Automatically Quarantine Each Remote Host"
          },
          {
            "text": "Automatically quarantine each remote host that establishes an IPsec connection, checking its host security control settings and then deciding if it should be permitted to use the organization's networks and resources. It is advisable to perform these checks, not only for hosts connecting to the organization's VPN from external locations but also for mobile systems connecting to the organization's internal network that are also sometimes connected to external networks."
          }
        ]
      }
    ]
  },
  {
    "title": "IPsec Design Considerations",
    "subsections": [
      {
        "title": "Traffic Analysis",
        "content": [
          {
            "text": "Having larger packets increases bandwidth usage and the endpoints' processing load for encrypting and decrypting packets, so organizations should only use extra padding if traffic analysis is a significant threat (in most cases, it is not) and cost is not an important factor."
          }
        ]
      },
      {
        "title": "Perfect Forward Secrecy (PFS)",
        "content": [
          {
            "text": "Because the PFS option provides stronger security, it should be used unless the additional computational requirements of the additional DH key exchanged would pose a problem. For IPsec servers with permanent IPsec tunnels, this is usually not an issue, but a remote access VPN with thousands of users might experience an additional workload if PFS is enabled on all VPN clients."
          }
        ]
      }
    ]
  },
  {
    "title": "7.2.7 Summary of Design Decisions",
    "subsections": [
      {
        "content": "Table 2 provides a checklist that summarizes the major design decisions made during the first two phases of the IPsec planning and implementation process."
      }
    ]
  },
  {
    "title": "7.3 Implement and Test Prototype",
    "subsections": [
      {
        "content": "After the solution has been designed, the next step is to implement and test a prototype of the design. This could be done in one or more environments, including lab, test, and production networks. Aspects of the solution to evaluate include the following:"
      },
      {
        "content": "Connectivity. Users can establish and maintain connections that use IPsec for all types of traffic that are intended to be protected by IPsec and cannot establish connections for traffic that IPsec is intended to block. It is important to verify that all of the protocols that need to flow through the connection can do so. This should be tested after the initial SA negotiation as well as after the original SAs have expired and new IKE and IPsec SAs have been negotiated. (During testing, it may be helpful to temporarily shorten the SA lifetimes so that renegotiation occurs more quickly.) Connectivity testing should also evaluate possible fragmentation-related issues for IKE (e.g., certificates) and ESP (e.g., TCP flow issues).\n\n\nProtection. Each traffic flow should be protected in accordance with the information gathered during the Identify Needs phase. This should be verified by monitoring network traffic and checking IPsec endpoint logs to confirm that the packet filter rules are ensuring that the proper protection is provided for each type of traffic.\n\n\nAuthentication. Performing robust testing of IKE authentication is important because if authentication services are lost, IPsec services may be lost as well. Authentication solutions, such as using digital signatures, may be complex and could fail in various ways. See Section 7.2.2 for more information on IKE authentication.\n\n\nApplication Compatibility. The solution should not break or interfere with the use of existing software applications. This includes network communications between application components, as well as IPsec client software issues (e.g., a conflict with host-based firewall or intrusion detection software).\n\n\nManagement. Administrators should be able to configure and manage the solution effectively and securely. This includes all components, including gateways, management servers, and client software. For remote access architectures, it is particularly important to evaluate the ease of deployment and configuration. For example, most implementations do not have fully automated client configuration; in many cases, administrators need to manually configure each client. Another concern is the ability of users to alter IPsec settings, causing connections to fail and requiring administrators to manually reconfigure the client or causing a security breach.\n\n\nLogging. The logging and data management features should function properly in accordance with the organization's policies and strategies.\n\n\nPerformance. The solution should be able to provide adequate performance during normal and peak usage. Performance issues are among the most common IPsec-related...\n```# Problems"
      },
      {
        "content": "Connectivity. Users can establish and maintain connections that use IPsec for all types of traffic that are intended to be protected by IPsec and cannot establish connections for traffic that IPsec is intended to block. It is important to verify that all of the protocols that need to flow through the connection can do so. This should be tested after the initial SA negotiation as well as after the original SAs have expired and new IKE and IPsec SAs have been negotiated. (During testing, it may be helpful to temporarily shorten the SA lifetimes so that renegotiation occurs more quickly.) Connectivity testing should also evaluate possible fragmentation-related issues for IKE (e.g., certificates) and ESP (e.g., TCP flow issues)."
      },
      {
        "content": "Protection. Each traffic flow should be protected in accordance with the information gathered during the Identify Needs phase. This should be verified by monitoring network traffic and checking IPsec endpoint logs to confirm that the packet filter rules are ensuring that the proper protection is provided for each type of traffic."
      },
      {
        "content": "Authentication. Performing robust testing of IKE authentication is important because if authentication services are lost, IPsec services may be lost as well. Authentication solutions, such as using digital signatures, may be complex and could fail in various ways. See Section 7.2.2 for more information on IKE authentication."
      },
      {
        "content": "Application Compatibility. The solution should not break or interfere with the use of existing software applications. This includes network communications between application components, as well as IPsec client software issues (e.g., a conflict with host-based firewall or intrusion detection software)."
      },
      {
        "content": "Management. Administrators should be able to configure and manage the solution effectively and securely. This includes all components, including gateways, management servers, and client software. For remote access architectures, it is particularly important to evaluate the ease of deployment and configuration. For example, most implementations do not have fully automated client configuration; in many cases, administrators need to manually configure each client. Another concern is the ability of users to alter IPsec settings, causing connections to fail and requiring administrators to manually reconfigure the client or causing a security breach."
      },
      {
        "content": "Logging. The logging and data management features should function properly in accordance with the organization's policies and strategies."
      },
      {
        "content": "Performance. The solution should be able to provide adequate performance during normal and peak usage. Performance issues are among the most common IPsec-related...\n```# Problems"
      },
      {
        "content": "It is important to consider not only the performance of the primary IPsec components but also that of intermediate devices, such as routers and firewalls. Encrypted traffic often consumes more processing power than unencrypted traffic, so it may cause bottlenecks. Because IPsec headers and tunneling increase the packet length, intermediate network devices might also need to fragment the packets, possibly slowing network activity. In many cases, the best way to test the performance of a prototype implementation under fully loaded conditions is to use simulated traffic generators on a live test network to mimic the actual characteristics of the expected traffic as closely as possible. Testing should incorporate a variety of applications that will be used with IPsec, especially those that are most likely to be affected by network throughput or latency issues, such as VoIP. Addressing performance problems generally involves upgrading or replacing hardware, offloading cryptographic calculations from software-based cryptographic modules to hardware-based cryptographic modules, or reducing processing needs (e.g., using a more efficient encryption algorithm or only encrypting sensitive traffic)."
      },
      {
        "title": "Security of the Implementation",
        "content": [
          {
            "text": "The IPsec implementation itself may contain vulnerabilities and weaknesses that attackers could exploit. Organizations with high security needs may want to perform extensive vulnerability assessments against the IPsec components. At a minimum, the testers should update all components with the latest patches and configure the components following sound security practices. Section 7.3.2 presents some common IPsec security concerns."
          }
        ]
      },
      {
        "title": "Component Interoperability",
        "content": [
          {
            "text": "The components of the IPsec solution must function together properly. This is of greatest concern when a variety of components from different vendors may be used. Section 7.3.1 contains more information on interoperability concerns."
          }
        ]
      }
    ]
  },
  {
    "title": "7.3.1 Component Interoperability",
    "subsections": [
      {
        "content": "Another facet of testing to consider is the compatibility and interoperability of the IPsec components. Although there have been improvements in the industry, especially with IKEv2-based IPsec implementations, some vendors make it difficult to interoperate with or manage other IPsec devices. Because many vendors offer IPsec clients and gateways, implementation differences among products and the inclusion of proprietary solutions can lead to interoperability problems. Although IPsec vendors use the term \"IPsec compliant\" to state that they meet the current IETF IPsec standards, they may implement the standards differently.```markdown"
      }
    ]
  },
  {
    "title": "Interoperability Issues",
    "subsections": [
      {
        "content": "which can cause subtle problems that are difficult to diagnose. Some products also provide support for components (e.g., encryption algorithms) that are not part of the IPsec standards; this is done for various reasons, including enhancing ease-of-use, providing additional functionality, and addressing weak or missing parts of the standards."
      },
      {
        "title": "Examples of Compatibility Issues",
        "content": [
          {
            "text": "The endpoints support different encryption algorithms, compression algorithms, or authentication methods.\nOne endpoint requires the usage of a proprietary feature for proper operation.\nThe endpoints may encode or interpret certain digital certificate fields or data differently.\nThe endpoints default to different parameters, such as DH group 14 versus DH group 19.\nThe endpoints implement different interpretations of ambiguous or vaguely worded standards, such as performing SA rekeying in different ways.\nMost gateway implementations interoperate with other vendors' implementations, but many client implementations only interoperate with their own vendor's gateway implementation."
          }
        ]
      }
    ]
  },
  {
    "title": "IPsec Traffic Management",
    "subsections": [
      {
        "content": "To send IPsec-protected traffic to a peer that is no longer available. If no traffic is sent through an SA for a preconfigured period of time, some implementations will delete the SA, even if the negotiated lifetime has not elapsed. DPD messages can be sent to ensure that an otherwise unused IPsec SA is kept alive. This can avoid NAT mapping timeouts and the deletion of inactive SAs."
      },
      {
        "title": "Vendor ID",
        "content": [
          {
            "text": "One endpoint may depend on a proprietary custom vendor ID IKE payload to enable a feature that is either absent or inconsistently implemented. This has led some vendors to include vendor IDs of other vendors in their product to gain compatibility with the other vendor. This can lead to unexpected side effects when one vendor adds a different customization that is activated when the same vendor ID value is seen."
          }
        ]
      }
    ]
  },
  {
    "title": "7.3.2 Security of the Implementation",
    "subsections": [
      {
        "content": "Another topic to keep in mind during testing is the security of the IPsec implementation itself. IPsec was built with careful thought and consideration for security; however, no protocol or software is completely bulletproof. Security concerns regarding IPsec include the following:"
      },
      {
        "content": "Some IPsec implementations store PSKs in plaintext on the system. This can be accessed by legitimate users and anyone else who gains access to the system. The use of such implementations should be avoided if unauthorized physical access to the system is a concern. However, if it is necessary to use such a product, be sure to apply the appropriate system hardening measures and deploy host-based firewalls and intrusion detection software.\nIPsec allows some traffic to pass unprotected, such as broadcast, multicast, IKE, and Kerberos traffic. Attackers could potentially use this knowledge to their advantage to send unauthorized malicious traffic through the IPsec filters. Be sure to carefully monitor the traffic that is passing through the IPsec tunnel as well as the traffic that is bypassing.\n```# CURRENT_PAGE_RAW_OCR_TEXT"
      },
      {
        "content": "it. For example, network-based intrusion detection system or intrusion prevention system devices can typically be configured to alert when non-tunneled traffic appears."
      },
      {
        "content": "Periodically, vulnerabilities are discovered in IPsec implementations. Organizations such as the United States Computer Emergency Readiness Team (US-CERT) notify vendors of new vulnerabilities and, at the appropriate time, notify the public of the issues and the recommended resolutions, such as installing vendor-supplied patches. Information on known vulnerabilities is provided by various online databases, including the National Vulnerability Database (NVD) and the Common Vulnerabilities and Exposures (CVE) database."
      },
      {
        "title": "7.4 Deploy the Solution",
        "content": [
          {
            "text": "Once testing is complete and any issues have been resolved, the next phase of the IPsec planning and implementation model involves deploying the solution. A prudent strategy is to gradually migrate existing network infrastructure, applications, and users to the new IPsec solution. The phased deployment provides administrators the opportunity to evaluate the impact of the IPsec solution and resolve issues prior to enterprise-wide deployment. Most of the issues that can occur during IPsec deployment are the same types of issues that occur during any large IT deployment. Typical issues that are IPsec-specific are as follows:"
          },
          {
            "text": "Encrypted traffic can negatively affect services such as firewalls, intrusion detection, QoS, remote monitoring (RMON) probes, and congestion control protocols.\nUnexpected performance issues may arise, either with the IPsec components themselves (e.g., gateways) or with intermediate devices, such as routers.\nIPsec may not work properly on some production networks because of firewalls, routers, and other intermediate, packet-filtering devices that block IPsec traffic. The devices might have been misconfigured for IPsec traffic or not configured at all (e.g., if the IPsec implementers were not aware of the existence of a device). Misconfigured devices are more likely to be an issue with organizations that use a wider variety of network devices or have decentralized network device administration and management. In such environments, the changes needed to permit IPsec could vary widely among devices.\nThe environment may change during the deployment. For example, IPsec client software may be broken by a new operating system update. This issue can be handled rather easily in a managed environment, but it can pose a major problem if users have full control over their systems and can select their own client software."
          }
        ]
      },
      {
        "title": "7.5 Manage the Solution",
        "content": [
          {
            "text": "The last phase of the IPsec planning and implementation model lasts the longest. Managing the solution involves maintaining the IPsec architecture, policies, software, and other components of the deployed solution. Examples of typical maintenance actions are testing and applying patches to IPsec software, deploying IPsec to additional remote sites, configuring additional user laptops as IPsec clients, performing key management duties (e.g., issuing new# CURRENT_PAGE_RAW_OCR_TEXT"
          }
        ]
      },
      {
        "title": "Credentials, Revoking",
        "content": [
          {
            "text": "Credentials for compromised systems or departing users, and adapting the policies as requirements change. It is also important to monitor the performance of the IPsec components so that potential resource issues can be identified and addressed before the components become overwhelmed. Another important task is to perform testing periodically to verify that the IPsec controls are functioning as expected. Any new hardware, software, or significant configuration changes start the process again at the Identify Needs phase. This ensures that the IPsec solution lifecycle operates effectively and efficiently."
          },
          {
            "text": "Another aspect of managing the IPsec solution is handling operational issues. For example, a common problem is poor performance caused by undesired fragmentation or by not utilizing enough resources (e.g., other available CPUs or sufficient memory) to perform networking tasks. When troubleshooting IPsec connections, a network sniffer, such as tcpdump or Wireshark, can be helpful. A sniffer allows the administrator to analyze the communications as they take place and correct problems. IPsec gateway logs and client logs may also be valuable resources during troubleshooting; firewall and router logs may validate whether the IPsec traffic is reaching them, passing through them, or being blocked."
          }
        ]
      },
      {
        "title": "7.6 Summary",
        "content": [
          {
            "text": "This section has described a phased approach to IPsec planning and implementation and highlighted various issues that may be of significance to implementers. The following summarizes the key points from this section:"
          },
          {
            "text": "The use of a phased approach for IPsec planning and implementation can help to achieve successful IPsec deployments. The five phases of the approach are as follows:\nIdentify Needs \u2013 Identify the need to protect network communications and determine how that need can best be met.\nDesign the Solution \u2013 Make design decisions in five areas: architectural considerations, authentication methods, cryptographic policy, performance, and packet filters.\nImplement and Test a Prototype \u2013 Test a prototype of the designed solution in a lab or test environment to identify any potential issues.\nDeploy the Solution \u2013 Gradually deploy IPsec throughout the enterprise.\n\nManage the Solution \u2013 Maintain the IPsec components and resolve operational issues. Repeat the planning and implementation process when significant changes need to be incorporated into the solution.\n\n\nThe placement of an IPsec gateway has potential security, functionality, and performance implications. Specific factors to consider include device performance, traffic examination, gateway outages, and NAT.\n\n\nAlthough IPsec clients that are built into operating systems may be more convenient than deploying third-party client software, third-party clients may offer features that built-in clients do not.\n\n\nWhen IPsec hosts are located outside of the organization's networks, it may be desirable to assign them virtual internal IP addresses to provide compatibility with existing IP.# Address-Based Security Controls\n\n\nAuthentication options include PSKs, digital signatures, and (in some implementations) external authentication services, such as EAP and the Generic Security Services Application Program Interface (GSSAPI)/Kerberos. An authentication solution should be selected based primarily on its ease of maintenance, scalability, and security.\n\n\nCryptographic algorithms and key lengths that are considered secure for current practice should be used for encryption and integrity protection. AES-GCM with a 128-bit key or 256-bit key is recommended for encryption and integrity. DH ECP groups and the MODP group 14 (2048) are recommended for IKE for key establishment. More than one algorithm can be specified in each case to ease the transition to new, updated algorithms.\n\n\nPacket filters should apply appropriate protections to traffic and not protect other types of traffic for performance or functionality reasons."
          },
          {
            "text": "Packet filters should apply appropriate protections to traffic and not protect other types of traffic for performance or functionality reasons.\n\n\nSpecific design decisions include IKE and IPsec SA lifetimes, DH group numbers, extra packet padding, and the use of PFS. When IPsec is going to be used with third parties, design decisions should take the capabilities of those third parties into account as long as their capabilities are using NIST-approved algorithms and methods. Additional design considerations include current and future network characteristics, incident response, log management, redundancy, and other security controls already in place.\n\n\nTesting of the prototype implementation should evaluate several factors, including connectivity, protection, IKE authentication, application compatibility, management, logging, performance, the security of the implementation, component interoperability, and default settings.\n\n\nExisting network infrastructure, applications, and users should gradually be migrated to the new IPsec solution. This provides administrators with an opportunity to evaluate the impact of the IPsec solution and resolve issues prior to enterprise-wide deployment.\n\n\nAfter implementation, the IPsec solution needs to be maintained by, for example, applying patches and deploying IPsec to additional networks and hosts. Operational issues also need to be addressed and resolved.\n\n\nOrganizations should implement technical, operational, and management controls that support and complement IPsec implementations. Examples include having control over all entry and exit points for the protected networks, ensuring the security of all IPsec endpoints, and incorporating IPsec considerations into organizational policies."
          },
          {
            "text": "Manage the Solution \u2013 Maintain the IPsec components and resolve operational issues. Repeat the planning and implementation process when significant changes need to be incorporated into the solution."
          },
          {
            "text": "The placement of an IPsec gateway has potential security, functionality, and performance implications. Specific factors to consider include device performance, traffic examination, gateway outages, and NAT."
          },
          {
            "text": "Although IPsec clients that are built into operating systems may be more convenient than deploying third-party client software, third-party clients may offer features that built-in clients do not."
          },
          {
            "text": "When IPsec hosts are located outside of the organization's networks, it may be desirable to assign them virtual internal IP addresses to provide compatibility with existing IP.# Address-Based Security Controls"
          },
          {
            "text": "Authentication options include PSKs, digital signatures, and (in some implementations) external authentication services, such as EAP and the Generic Security Services Application Program Interface (GSSAPI)/Kerberos. An authentication solution should be selected based primarily on its ease of maintenance, scalability, and security."
          },
          {
            "text": "Cryptographic algorithms and key lengths that are considered secure for current practice should be used for encryption and integrity protection. AES-GCM with a 128-bit key or 256-bit key is recommended for encryption and integrity. DH ECP groups and the MODP group 14 (2048) are recommended for IKE for key establishment. More than one algorithm can be specified in each case to ease the transition to new, updated algorithms."
          },
          {
            "text": "Packet filters should apply appropriate protections to traffic and not protect other types of traffic for performance or functionality reasons."
          },
          {
            "text": "Specific design decisions include IKE and IPsec SA lifetimes, DH group numbers, extra packet padding, and the use of PFS. When IPsec is going to be used with third parties, design decisions should take the capabilities of those third parties into account as long as their capabilities are using NIST-approved algorithms and methods. Additional design considerations include current and future network characteristics, incident response, log management, redundancy, and other security controls already in place."
          },
          {
            "text": "Testing of the prototype implementation should evaluate several factors, including connectivity, protection, IKE authentication, application compatibility, management, logging, performance, the security of the implementation, component interoperability, and default settings."
          },
          {
            "text": "Existing network infrastructure, applications, and users should gradually be migrated to the new IPsec solution. This provides administrators with an opportunity to evaluate the impact of the IPsec solution and resolve issues prior to enterprise-wide deployment."
          },
          {
            "text": "After implementation, the IPsec solution needs to be maintained by, for example, applying patches and deploying IPsec to additional networks and hosts. Operational issues also need to be addressed and resolved."
          },
          {
            "text": "Organizations should implement technical, operational, and management controls that support and complement IPsec implementations. Examples include having control over all entry and exit points for the protected networks, ensuring the security of all IPsec endpoints, and incorporating IPsec considerations into organizational policies."
          }
        ]
      }
    ]
  },
  {
    "title": "CURRENT_PAGE_RAW_OCR_TEXT",
    "subsections": [
      {
        "content": "Advantageous than IPsec. Some alternatives have specifications and implementations, but some of the alternatives are implementations with some documentation that does not provide a full specification."
      },
      {
        "content": "If only one or two applications need protection, a network-layer control may be excessive. Transport layer protocols, such as TLS, are most commonly used to provide security for communications with individual HTTP-based applications, although they are also used to provide protection for communication sessions of other types of applications, such as SMTP, Post Office Protocol (POP), IMAP, and FTP. Because all major web browsers include support for TLS, users who wish to use web-based applications that are protected by TLS normally do not need to install any client software or reconfigure their systems. Web-based systems have gained considerable integration support that reaches outside of the browser. One common example is the virtual network drive, where the browser takes on the role of a file manager application to securely transmit files."
      },
      {
        "title": "8.1 Data Link Layer VPN Protocols",
        "content": [
          {
            "text": "Data link layer VPN protocols function below the network layer in the TCP/IP model. These types of VPNs are also known as layer 2 VPNs (L2VPNs). This means non-IP network protocols can also be used with a data link layer VPN. Most VPN protocols (including IPsec) only support IP, so data link layer VPN protocols may provide a viable option for protecting networks running non-IP protocols. (As the name implies, IPsec is designed to provide security for IP traffic only.) Protection at the link layer means that the security added is limited to the devices that share this link layer, such as an Ethernet-based LAN or WiFi network. However, various virtual link layers now exist to facilitate network virtualization, allowing a link layer VPN protocol to secure nodes in different physical (and virtual) locations. Since confidentiality and integrity happen at the link layer, deploying a link layer VPN protocol requires no specific support in the application. However, this also means that the application is generally not aware of the link layer protection and cannot make decisions based on whether the communication is secure or not."
          },
          {
            "subsection": "8.1.1 WiFi Data Link Protection",
            "text": []
          },
          {
            "text": "All devices that support WiFi technology support a number of link layer protocols that provide confidentiality and integrity protection. Wireless connections broadcast their data, so from the start, there has been a push to send data using confidentiality and integrity protection. The initial security protocol was Wired Equivalent Privacy (WEP), which was deprecated in 2004 in favor of Wi-Fi Protected Access (WPA). WEP uses 40-bit or 128-bit RC4 PSKs and is easily broken, whereas WPA2 uses AES-CCM. The Enterprise versions of WPA use IEEE 802.1X for authentication instead of a PSK. WPA supports a number of EAP extensions, such as EAP-TLS, EAP-MSCHAPv2, and EAP-Subscriber Identity Module (EAP-SIM). In WPA3, the PSK is replaced by Password Authenticated Key Exchange (PAKE), which offers more.\n```# Protection"
          },
          {
            "text": "against the use of weak passwords. WPA3 also offers PFS. The strength of the link layer protection for WiFi depends strongly on the configuration and the implementation of the various 802.11 standards. WiFi encryption only protects the data from the wireless device to the wireless access point. It is good practice to consider WiFi encryption to be insufficient and to not trust the access point. Devices on a WiFi network should use a remote access VPN like IPsec to communicate with resources on the wired network. This is especially true for WiFi access points belonging to third parties, such as restaurants and hotels."
          }
        ]
      },
      {
        "title": "8.1.2 Media Access Control Security (MACsec)",
        "content": [
          {
            "text": "Media Access Control Security (MACsec) is an industry standard defined in IEEE 802.1AE. It creates point-to-point security associations within an Ethernet network. MACsec is the Ethernet version of WiFi WPA security. It uses AES-GCM with 128-bit keys for confidentiality and integrity. It protects regular IP traffic, as well as ARP, IPv6 Neighbor Discovery (ND), and DHCP. For key exchange and mutual authentication, MACsec uses the IEEE 802.1X extension MACsec Key Agreement (MKA) protocol. New devices have to authenticate themselves to the authentication server before being able to join the network, and communication with other hosts on the network is encrypted between each pair of hosts. This allows MACsec to be used with virtual network technologies, such as Virtual eXtensible LAN (VXLAN) and Generic Network Virtualization Encapsulation (GENEVE)."
          },
          {
            "text": "MACsec can protect two machines via a switch even if the switch itself does not support MACsec. However, if the switch supports MACsec, each individual Ethernet port of the switch can become a node in the MACsec network for devices connected to those ports that do not support MACsec natively. In that case, all traffic between this device and the LAN is encrypted, except from the Ethernet port to the actual device."
          },
          {
            "text": "The Ethernet packet change to support MACsec is similar to the change of an IP packet to support IPsec. The Ethernet header is extended with the SecTAG header, which contains the equivalent to the ESP SPI number and Sequence Number. This is followed by the (now encrypted) original payload, followed by the ICV. To a switch that does not support MACsec, the SecTAG and ICV look like just part of the regular Ethernet frame payload. Similar to IPsec, MACsec can be configured to use manual keying. It suffers from all of the same problems as IPsec manual keying: no PFS and no protection from reusing the same counters as nonces for AES-GCM."
          }
        ]
      },
      {
        "title": "8.2 Transport Layer VPN Protocols (SSL VPNs)",
        "content": [
          {
            "text": "Transport layer VPNs are what people usually think of when describing a VPN. The host obtains a new virtual interface configured with one or more IP addresses. Packets to and from this virtual interface use a transport protocol to encapsulate the packets securely to the remote endpoint of.# the VPN"
          },
          {
            "text": "The packets are then further routed, just like packets that arrived on a physical network interface. The most common IPsec alternative is the SSL VPN. Although these are still called SSL VPNs, they now use the TLS protocol rather than the older SSL protocol. This can be TLS [21] based on TCP or DTLS [70] based on UDP. The advantage is that the SSL VPN's traffic is much harder to block as it can run on any (preconfigured) port number. Usually, it is run over port 443 (HTTPS) since most networks pass on this traffic without attempting any kind of deep packet inspection. When using TCP, it can suffer from severe performance degradation due to dueling TCP layers when there is congestion or packet loss; DTLS does not have this problem. SSL VPNs are usually implemented as an application, resulting in significantly lower performance compared to kernel-based VPNs, such as IPsec or WireGuard. NIST provides specific guidance for SSL VPN deployments in NIST SP 800-113, Guide to SSL VPNs [71]."
          }
        ]
      },
      {
        "title": "8.2.1 Secure Socket Tunneling Protocol (SSTP)",
        "content": [
          {
            "text": "Secure Socket Tunneling Protocol (SSTP) is the Microsoft version of an SSL VPN. It uses SSL/TLS over port 443 and can use TCP or UDP as the underlying protocol. It uses the SSTP protocol to run a Point-to-Point Protocol (PPP) session that handles the IP assignment and IP encapsulation. Microsoft calls this a Point-to-Site VPN, which is another name for a remote access VPN. It supports the standard encryption and integrity algorithms that SSL/TLS supports."
          }
        ]
      },
      {
        "title": "8.2.2 OpenConnect",
        "content": [
          {
            "text": "OpenConnect originated as an open-source replacement implementation for the Cisco AnyConnect SSL VPN client using the Cisco proprietary AnyConnect protocol. OpenConnect is now a protocol specification and a client and server implementation. While it remains backwards compatible with Cisco AnyConnect, it has added its own features and has been submitted to the IETF as a draft to become an Informational RFC [72]. It uses DTLS but can fall back to TLS over TCP when needed. The server is authenticated via a machine certificate. Clients can authenticate using a user/password, certificate, or Kerberos (GSSAPI). The OpenConnect client also supports other proprietary SSL VPN protocols that are similar to Cisco AnyConnect, such as Palo Alto GlobalProtect and Juniper SSL-VPN. OpenConnect is a relatively new SSL VPN and has not been deployed as much as other SSL VPNs."
          }
        ]
      },
      {
        "title": "8.2.3 OpenVPN",
        "content": [
          {
            "text": "OpenVPN is a popular SSL VPN protocol/implementation that was originally written in 2001. It uses SSL or TLS over any preconfigured port and can use TCP or UDP as the transport protocol. The supported algorithms are the common SSL/TLS algorithms. For authentication, it supports certificates, PSKs, and usernames with corresponding passwords. It can act as a link layer VPN or as a transport layer VPN. The server can send the client commands to be executed, which# CURRENT_PAGE_RAW_OCR_TEXT"
          }
        ]
      },
      {
        "title": "OpenVPN",
        "content": [
          {
            "text": "means that a compromised server can compromise all of its clients. OpenVPN has a larger attack surface because the entire protocol runs as a user process and has had various vulnerabilities in the past. It is one of the more widely used SSL VPNs."
          }
        ]
      }
    ]
  },
  {
    "title": "8.5 Obsoleted and Deprecated VPN Protocols",
    "subsections": [
      {
        "content": "A number of commonly used VPN protocols are no longer suitable for use. Some of these were designed for dial-up internet connections. Some used encryption techniques that were broken or have become too weak to withstand current computational attacks. Early VPN protocols were implemented on top of PPP. These solutions were built as extensions to secure modem-based connections and are no longer appropriate to deploy, both from architectural and cryptographic points of view. The protocols listed in this section must not be used."
      },
      {
        "title": "8.5.1 Point-to-Point Tunneling Protocol (PPTP)",
        "content": [
          {
            "text": "The Point-to-Point Tunneling Protocol (PPTP) uses Generic Routing Encapsulation (GRE,# IP Protocol 47"
          },
          {
            "text": "The GRE tunnel is used to send PPP packets. Similar to the ESP protocol, NAT routers often do not forward this protocol. PPTP uses TCP port 1723 as its control plane. It uses the Microsoft Point-to-Point Encryption (MPPE) mechanism at the PPP layer for encryption. MPPE uses the deprecated RSA RC4 algorithm with 40-bit or 128-bit keys [78]. For authentication, it can use the Password Authentication Protocol (PAP) [79] or Challenge-Handshake Authentication Protocol (CHAP) [80]. Microsoft created the Microsoft Challenge-Handshake Authentication Protocol version 1 (MS-CHAPv1) and version 2 (MS-CHAPv2) to provide stronger forms of authentication, but researchers have found serious weaknesses in MS-CHAP. The original version of PPTP contained serious security flaws. PPTP version 2 addressed many of these issues, but researchers have identified weaknesses with this version as well (in addition to the MS-CHAP issues). PPTP should not be used, and if it is used regardless of its weaknesses, it should be considered a plaintext protocol with no functional confidentiality or integrity protection."
          }
        ]
      },
      {
        "title": "8.5.2 Layer 2 Tunneling Protocol (L2TP)",
        "content": [
          {
            "text": "The Layer 2 Tunneling Protocol (L2TP) [81] is the successor to PPTP. Instead of using the GRE protocol, it encapsulates PPP packets inside UDP on port 1701. For confidentiality and integrity of the data plane, it depends on IPsec. Some implementations support encryption at the PPP layer, meaning that to enable IPsec support, one has to (confusingly) disable \"L2TP encryption.\" L2TP without IPsec is used by some ISPs as the replacement of PPTP connections, but this usage is not a VPN. L2TP VPNs all use IPsec in transport mode, commonly referred to as L2TP/IPsec. In addition to the PPP-provided authentication methods, L2TP can also use other methods, such as RADIUS [82], although it commonly uses the PPP-based MS-CHAPv2 for authentication of the PPP layer. IPsec is established using IKEv1, often using a weak group PSK, but it can be deployed using X.509 certificates as well. Even when deployed securely, L2TP/IPsec offers no advantage over IKEv2-based IPsec VPNs. It adds a number of unnecessary encapsulation layers that reduce the effective MTU and increase network issues related to packet fragmentation. Additionally, because it uses IPsec in transport mode, it works poorly behind NAT. Some vendors switch to tunnel mode when behind NAT, but not all L2TP/IPsec servers are configured to support tunnel mode."
          },
          {
            "text": "One advantage of L2TP/IPsec used to be that it was shipped as part of popular operating systems, which meant no separate VPN software needed to be purchased and installed. Up-to-date versions of those operating systems now support IKEv2-based IPsec VPNs. Additionally, L2TP/IPsec VPNs usually do not support AEAD algorithms, such as AES-GCM, which increases CPU usage compared to IKEv2-based IPsec VPNs. On mobile devices, this means using more battery power. L2TP/IPsec deployments should be migrated to IKEv2-based IPsec.# VPNs"
          }
        ]
      },
      {
        "title": "8.6 Summary",
        "content": [
          {
            "text": "Section 8 describes the main alternatives to IPsec. SSL VPNs are popular because they are not as easily blocked as IPsec VPNs, although this advantage will be negated once IKEv2-based IPsec implementations add support for TCP and TLS encapsulation as specified in [53]. Traditionally, SSL VPNs were easier to set up and use than IPsec VPNs, but IKEv2 configurations and provisioning systems have improved considerably, making IPsec VPNs as easy to set up and use as SSL VPNs. WireGuard is an interesting upcoming remote access VPN protocol, but at the moment, it has no support for NIST-approved algorithms."
          }
        ]
      },
      {
        "title": "9 Planning and Implementation Case Studies",
        "content": [
          {
            "text": "This section presents a few typical IPsec solution planning and implementation case studies. Each case study begins by describing a real-world security requirement scenario, such as protecting network communications between two offices. The case study then discusses possible solutions for the security requirement and explains why IPsec was selected over the alternatives. The next section of each case study discusses the design of the solution and includes a simple network diagram that shows the primary components of the solution (e.g., IPsec gateways and hosts, routers, switches). Each case study also provides some details of the implementation of the solution prototype, which include examples of configuring the solution using commonly available equipment and software, based on an implementation performed in a lab or production environment. Each case study ends with a brief discussion that points out noteworthy aspects of the implementation, indicates when another case study model may be more effective, and discusses variants on the case study scenario that might be of interest to readers."
          },
          {
            "text": "The case studies are not meant to endorse the use of particular products nor are any products being recommended over other products. Several common products were chosen so that the case studies would demonstrate a variety of solutions. Organizations and individuals should not replicate and deploy the sample configuration files or entries. They are intended to illustrate the decisions and actions involved in configuring the solutions, not to be deployed as-is onto systems."
          },
          {
            "text": "The case studies presented in this section are as follows:"
          },
          {
            "text": "Protecting communications between two local area networks (i.e., remote office, main office)\nProtecting wireless communications in a small office/home office environment\nProtecting communications between remote users (e.g., telecommuters, road warriors) and the main office's network\nProtecting a datacenter or cloud network using mesh encryption"
          },
          {
            "subsection": "9.1 Connecting a Remote Office to the Main Office",
            "text": []
          },
          {
            "text": "An organization with a single office location is planning the creation of a small remote office, which includes identifying any needs to protect network communications. To# CURRENT PAGE RAW OCR TEXT"
          },
          {
            "text": "Perform various job functions, most users at the remote office will need to access several information technology (IT) resources located at the main office, including the organization's email, intranet web server, databases, and file servers, as well as several business applications. Currently, email is the only one of these resources that can be accessed from outside of the main office (it is available through the internet using a web-based email client). Communications with most of the IT resources will involve transferring sensitive data (such as financial information) between systems. To support its mission, the organization needs to maintain the confidentiality and integrity of the data in a cost-effective manner. (At this time, the need is to protect communications initiated by remote office hosts to the main office network only; in the future, the solution might be extended to protect communications initiated by main office hosts to the remote office network.) The following sections describe how the organization evaluates its options, identifies a viable solution, creates a design, and implements a prototype."
          }
        ]
      },
      {
        "title": "9.1.1 Identifying Needs and Evaluating Options",
        "content": [
          {
            "text": "As described below, the organization considers a few options for providing access from the remote office to IT resources at the main office and protecting the data:"
          },
          {
            "text": "Data Link Layer Solution: Leased Line. The organization could establish a dedicated leased line between the remote office and the main office. This would provide a private communications mechanism for all of the network traffic between the offices. (If the organization were concerned about security breaches of the leased line, additional protection measures, such as a data link layer VPN protocol, could be used to provide another layer of security.) Unfortunately, because the remote office is geographically distant from the main office, a leased line would be prohibitively expensive.\n\n\nNetwork Layer Solution: Network Layer VPN. The organization could establish a network layer VPN between the remote office and main office. Connecting the remote office to the internet and establishing a VPN tunnel over the internet between the offices could provide access to the resources and protect the communications. The VPN could have a remote access architecture, which would reduce hardware costs (only one gateway needed) but increase labor costs (deploying and configuring clients on each remote office system). A gateway-to-gateway architecture would increase hardware costs and decrease labor costs. In effect, the VPN would be invisible to users. The two models also differ in terms of authentication. In a gateway-to-gateway VPN, the gateways would authenticate with each other; in a remote access VPN, each user would need to authenticate before using the VPN. A gateway-to-gateway VPN could also be configured to permit authorized users from the main office to access resources on the remote office's network.# CURRENT PAGE RAW OCR TEXT"
          },
          {
            "text": "Data Link Layer Solution: Leased Line. The organization could establish a dedicated leased line between the remote office and the main office. This would provide a private communications mechanism for all of the network traffic between the offices. (If the organization were concerned about security breaches of the leased line, additional protection measures, such as a data link layer VPN protocol, could be used to provide another layer of security.) Unfortunately, because the remote office is geographically distant from the main office, a leased line would be prohibitively expensive."
          },
          {
            "text": "Network Layer Solution: Network Layer VPN. The organization could establish a network layer VPN between the remote office and main office. Connecting the remote office to the internet and establishing a VPN tunnel over the internet between the offices could provide access to the resources and protect the communications. The VPN could have a remote access architecture, which would reduce hardware costs (only one gateway needed) but increase labor costs (deploying and configuring clients on each remote office system). A gateway-to-gateway architecture would increase hardware costs and decrease labor costs. In effect, the VPN would be invisible to users. The two models also differ in terms of authentication. In a gateway-to-gateway VPN, the gateways would authenticate with each other; in a remote access VPN, each user would need to authenticate before using the VPN. A gateway-to-gateway VPN could also be configured to permit authorized users from the main office to access resources on the remote office's network.# CURRENT PAGE RAW OCR TEXT"
          },
          {
            "text": "Although this is not a current need, it could be required in the future."
          }
        ]
      },
      {
        "title": "Transport Layer Solution: Web-Based Applications",
        "content": [
          {
            "text": "The organization could provide web-based access to all required IT resources and use the TLS protocol to secure the web-client to web-server communications. Alternatively, a terminal server that provides access to the resource and a web-based terminal server client for employees could be deployed. Regardless of which of these is deployed, all traffic generated would use the TLS protocol with HTTPS (transport layer security controls) to protect the confidentiality and integrity of data and authentication credentials. By connecting the remote office to the internet and making the web-based applications available from the internet, users at the remote office could use the required IT resources, and the communications would be protected. The main office's network perimeter could be configured to permit external access to the resources only from the remote office's IP address range, which would reduce the risk of external parties gaining unauthorized access to the resources. Users would need to be authenticated by the terminal server, the individual applications, or both the server and the applications."
          }
        ]
      },
      {
        "title": "Application Layer Solution: Application Modification",
        "content": [
          {
            "text": "The organization could purchase add-on software and modify existing applications to provide protection for data within each application. However, a brief review of the required IT resources shows that several of them are off-the-shelf applications that cannot be modified and cannot be protected by third-party application add-ons. Even if the applications could be deployed to protect their own communications, the applications would have to be directly accessible by remote users, which would significantly increase their exposure to threats. The organization is also concerned about the effectiveness of application layer controls in protecting data. Application layer controls may conceal information from network layer security controls, such as network-based intrusion detection systems\u2014necessitating the use of additional, host-based security controls that can monitor application layer activity. Having separate controls for each application also complicates or precludes centralized enforcement of security policies across multiple applications, as well as centralized authentication (unless each application supports the use of a third-party authentication server.)"
          },
          {
            "text": "The organization considers the network layer and transport layer options to be the most feasible for meeting its remote access needs. The data link layer and application layer solutions are too expensive compared to the network and transport layer solutions. Further investigation of the transport layer solution determines that it is not possible or practical to provide web-based interfaces for several of the desired IT resources. For example, some of the# Desired Applications"
          },
          {
            "text": "are off-the-shelf products that offer no web-based client. A terminal server solution could provide access, but this would require users to connect to the terminal server and authenticate before accessing any applications. Each host would also need the terminal server client to be installed and configured. Using an SSL-based VPN would only encrypt communication from the remote endpoint to the SSL VPN gateway and would not encrypt communication between the SSL VPN server and the resources within the internal network."
          },
          {
            "text": "After comparing the three remaining solutions (remote access network layer VPN, gateway-to-gateway network layer VPN, and terminal server transport layer VPN) and considering how each solution would be deployed in the organization's environment, the organization chooses the gateway-to-gateway network layer VPN. Its primary advantages are that it should be relatively easy for the organization to deploy and maintain, and it will be transparent to users. The organization expects to be able to configure the internet routers at the main office and remote office to act as VPN gateways, so no additional hardware will be needed. Also, each office already routes internally generated network traffic designated for another office's network to its internet router, so routing changes should only need to be made on the internet routers themselves. Another advantage of the gateway-to-gateway VPN is that in the future, users at the main office could use it to access resources at the remote office. There is no current need for this, but it is likely that as the remote office matures, this may become a necessity."
          }
        ]
      },
      {
        "title": "9.1.2 Designing the Solution",
        "content": [
          {
            "text": "The organization hopes to use its internet routers as endpoints for the VPN solution; see Figure 17. Both routers support IPsec, and IPsec should be able to adequately provide confidentiality and integrity for the transmitted data to meet the organization's needs, so the plan is to configure the routers to provide an IPsec tunnel. Based on the organization's performance requirements, the routers should be able to handle any additional load because they are currently lightly utilized. Figure 17 illustrates the planned design for the VPN architecture. The main office and remote office networks are on separate private networks, each with an IPv4 network. Each private network is connected to the internet through a router that provides NAT services. The plan is to establish an IPsec tunnel between the external interfaces of the two routers. Desktop computers on the remote office network send unencrypted information to the office's internet router. The router acts as a VPN gateway, encrypting the traffic and forwarding it to the destination router at the main office, which also acts as a VPN gateway. The main office router decrypts the traffic and forwards it to its final destination, such as a file server or email server. Responses from the servers to the desktops are returned through the tunnel between the gateways.# CURRENT_PAGE_RAW_OCR_TEXT"
          },
          {
            "text": "In this scenario, NAT is an important architectural consideration. If possible, the design should keep NAT services out of the IPsec tunnel path to avoid potential NAT-related incompatibilities and to simplify the design. This means that outgoing packets to the remote network that need to pass through the IPsec tunnel should be excluded from NAT."
          },
          {
            "text": "After designing the architecture, the network administrators next consider other elements of the design, including the following:"
          }
        ]
      },
      {
        "title": "Authentication",
        "content": [
          {
            "text": "Because the VPN is being established between only two routers, a strong PSK with at least 112 bits of entropy should provide adequate authentication with minimal effort (as compared to alternatives such as digital certificates). The routers will encrypt the PSK in storage to protect it."
          }
        ]
      },
      {
        "title": "IKE and ESP Algorithms",
        "content": [
          {
            "text": "Since 128-bit AES provides sufficiently strong encryption, it is initially chosen for ESP to prevent potentially overloading the gateways. The AES-GCM algorithm is a good choice for IKE and ESP because it is an AEAD algorithm that provides encryption and integrity in an efficient and more secure manner. It is preferred over the older combined algorithms with separate encryption and integrity algorithms, such as AES-CBC with HMAC-SHA256. The PRF used is HMAC-SHA256. The DH group chosen is DH 19, a modern and strong ECP group that provides 128 bits of security strength. PFS is enabled to ensure that a compromise of one of the routers will not cause all previously captured encrypted traffic to be vulnerable to decryption. A fallback proposal using AES-CBC with HMAC-SHA-2 is added to ensure maximum interoperability with other devices since not all devices support AES-GCM for IKE and ESP. The initiator must use a DH group that is also supported by the responder."
          }
        ]
      },
      {
        "title": "Packet Filters",
        "content": [
          {
            "text": "The network administrators work with the security staff to design packet filters that will permit only the necessary network traffic between the two networks and require adequate protection for the traffic. To make initial testing of the solution easier, the administrators decide that the packet filters should allow all IP-based communications from the remote office's hosts to the main office's hosts. Once initial testing has been completed, more restrictive packet filters will be added and tested. The packet filters should permit only the necessary communications and specify the appropriate protection for each type of communication."
          }
        ]
      }
    ]
  },
  {
    "title": "IPsec Solution Configuration and Testing",
    "subsections": [
      {
        "content": "Once the remote office network infrastructure is in place and internet connectivity has been established. If the testing causes a connectivity outage, the impact should be minimal. The network administrators perform the following steps to configure and test a prototype of the IPsec solution."
      },
      {
        "content": "Note that on Cisco IOS and IOS-XE, there are two methods for implementing IPsec VPNs: policy-based VPNs, which use crypto maps, and routing-based VPNs, which use tunnel interfaces. Steps 1 through 7 below are mandatory for both types of VPN implementations."
      },
      {
        "title": "1. Back up the routers.",
        "content": [
          {
            "text": "Backing up the router operating system and configuration files is a necessity since the prototype is being implemented on production equipment. Even in a test environment, performing a backup before making any changes is often very helpful because the routers can be restored quickly to their original, clean state."
          }
        ]
      },
      {
        "title": "2. Update the firmware of the routers.",
        "content": [
          {
            "text": "To ensure that no known bugs are left unfixed, the routers are updated to the latest firmware and assessed for regular operation without any other changes in configuration. One endpoint is updated and rebooted. Once the network is confirmed to be operating properly, the other endpoint's firmware is updated, and the router is rebooted. Once both routers are confirmed to be working properly on the latest firmware, the process of configuring the routers for IPsec can be started."
          }
        ]
      },
      {
        "title": "3. Verify the security of the routers.",
        "content": [
          {
            "text": "The network administrators should perform a vulnerability assessment to identify any existing security issues with the routers, such as unneeded user accounts or inadequate physical security controls. The administrators should then address all identified issues before proceeding, or the IPsec implementation may be compromised quickly."
          }
        ]
      },
      {
        "title": "4. Update the endpoints to support IPsec.",
        "content": [
          {
            "text": "This could involve patching the operating system, installing or enabling IPsec services, or making other changes to the endpoints so that they can support IPsec services. In this case, both endpoints happen to be Cisco routers, so the administrators double-check each router to confirm that it can support IPsec and the desired encryption algorithms."
          }
        ]
      },
      {
        "title": "5. Specify the IKE cryptographic algorithms.",
        "content": [
          {
            "text": "For the preferred proposal, use AES-GCM since it is an AEAD algorithm; specify a PRF. For the fallback proposal, use AES-CBC with HMAC-SHA256. It will use SHA-256 (in HMAC) for integrity protection as well. The following ECP DH group (19) is specified:"
          }
        ]
      },
      {
        "title": "6. Disable the default IKEv2 proposal.",
        "content": [
          {
            "text": "This proposal contains a base set of cryptographic primitives that can be disabled if not used."
          }
        ]
      }
    ]
  },
  {
    "title": "Easy Way to Create a Strong Random PSK",
    "subsections": [
      {
        "content": "A strong random PSK is to use the openssl command:"
      },
      {
        "content": "openssl rand -base64 64"
      },
      {
        "content": "Steps 8 through 11 are specific to using policy-based crypto maps; if using tunnel interfaces, skip to step 12."
      },
      {
        "title": "8. Specify the IPsec Mode and Cryptographic Algorithms",
        "content": [
          {
            "text": "The following configuration entry on each router specifies ESP tunnel mode, preferring AES-GCM over AES-CBC-128 encryption with HMAC-SHA256 integrity protection:"
          }
        ]
      },
      {
        "title": "9. Define the Packet Filters",
        "content": [
          {
            "text": "The following configuration entry tells the routers which packets should be permitted to use IPsec:"
          }
        ]
      },
      {
        "title": "10. Tie the IPsec Settings Together in a Crypto Map",
        "content": [
          {
            "text": "On Cisco routers, the settings created in steps 5, 6, and 7 need to be connected. This can be done through the following configuration settings, which create a crypto map called west-east:"
          }
        ]
      },
      {
        "title": "11. Apply the IPsec Settings to the External Interface",
        "content": [
          {
            "text": "Because the external interface of the router will provide IPsec services, the crypto map created in the previous step must be applied to the external interface. This is done through the following commands:"
          },
          {
            "text": "For routing-based VPNs, steps 12 to 16 are used, where Configuration Payload is utilized to exchange prefixes in the IKEv2 exchange. For policy-based VPNs, skip to step 17."
          }
        ]
      },
      {
        "title": "12. Advertise Prefixes via IKEv2 Configuration Payload",
        "content": [
          {
            "text": "Prefixes can be sent between devices in the IKEv2 exchange. These will then be populated in the routing table of the peer."
          }
        ]
      },
      {
        "title": "13. Specify the IKE Authentication Method",
        "content": [
          {
            "text": "In this case, each router needs to be configured to use a symmetric secret, as illustrated by the following configuration entries. Instead of using IP addresses as identifiers, FQDNs will be used. An easy way to create a strong, random PSK is to use the openssl command:"
          },
          {
            "text": "openssl rand -base64 64"
          }
        ]
      },
      {
        "title": "14. Specify the IPsec Mode and Cryptographic Algorithms",
        "content": [
          {
            "text": "The following configuration entry on each router specifies ESP tunnel mode, preferring AES-GCM over AES-CBC-128 encryption with HMAC-SHA256 integrity protection:"
          }
        ]
      },
      {
        "title": "15. Associate the Transform Sets to the IPsec Profile",
        "content": [
          {
            "text": "This will ensure that the tunnel will use the defined IPsec settings, including setting PFS to Group19."
          }
        ]
      },
      {
        "title": "16. Create a GRE Tunnel Interface that will be Protected by IKE and IPsec",
        "content": [
          {
            "text": "As soon as cryptography is enabled on this interface, the IKE session will begin. This tunnel interface will have an IPv4 and IPv6 address, providing dual stack functionality. TCP MSS clamping is used."
          },
          {
            "text": "There will be a single IPsec SA created with the traffic selectors being GRE (IP protocol 47) from the tunnel source to the tunnel destination. On the Cisco IOS, GRE encapsulation allows for any IP traffic to be sent with the IPsec SA."
          },
          {
            "text": "The remaining steps apply to both routing-based and policy-based VPNs."
          }
        ]
      }
    ]
  },
  {
    "title": "18. Apply the access control list",
    "subsections": [
      {
        "content": "The access control list is applied to the back-facing interface."
      }
    ]
  },
  {
    "title": "19. Enable the generation of syslog messages",
    "subsections": [
      {
        "content": "The following commands will enable syslog message generation for IKE and IPsec, providing visibility when the sessions start and end."
      }
    ]
  },
  {
    "title": "20. Review the configuration",
    "subsections": [
      {
        "content": "After configuring both routers, the administrators review the routers' configurations to ensure that all the necessary settings are in place. The following commands can be used to display the policies:"
      }
    ]
  },
  {
    "title": "21. Test the solution",
    "subsections": [
      {
        "content": "Administrators can test the solution by attempting to gain access to the main office resources from a desktop at the remote office. The test should also include the use of packet sniffers to monitor the network traffic at both offices and confirm that it is properly protected. If successful, the configuration could be updated to use AES 256-bit keys for ESP encryption. If the test is unsuccessful, the administrators should troubleshoot the problem, make any necessary corrections or changes, then test the solution again. Additional test actions should include implementing the restrictive packet filters, verifying them, and verifying that the correct algorithms are used. For example, some IPsec implementations have a fallback policy that causes weaker algorithms to be used if the user-selected settings cannot be negotiated successfully; this could provide inadequate protection for communications."
      },
      {
        "title": "9.1.4 Analysis",
        "content": [
          {
            "text": "Setting up an IPsec tunnel between internet routers can be effective in connecting remote offices with multiple users to another network. It can reduce costs because remote offices only need internet connectivity rather than a leased line. In addition, all traffic from the remote office could be routed through the main corporate firewall, which could decrease the costs and risks associated with the administration of multiple firewalls. To set up this type of implementation, both routers need to have a static IP address because the addresses would have to be entered into the IPsec configurations. In most cases, this is not an issue for the router at the main office. However, it may be a problem for locations such as home offices that often use DSL or cable modem services, which may offer only dynamic IP addresses. Remote access solutions may be more practical for such situations."
          },
          {
            "text": "In this case study, a gateway-to-gateway VPN was established between a remote office and the main office. An interesting variant on this scenario is a gateway-to-gateway VPN between the main office and the network of a business partner. In such a case, more stringent security measures may be needed to satisfy each organization's requirements for communication. The organizations should also establish a formal interconnection agreement that specifies the technical and security requirements for establishing, operating, and maintaining.\n```# Interconnection and Data Sharing"
          },
          {
            "text": "The interconnection, as well as document the terms and conditions for sharing data and information resources in a secure manner. Appendix B contains more information on interconnection agreements."
          }
        ]
      },
      {
        "title": "Gateway-to-Gateway VPN",
        "content": [
          {
            "text": "In a gateway-to-gateway VPN between the organization and a business partner, each organization typically has control over its own VPN gateway. Accordingly, the organizations need to identify an acceptable out-of-band method for provisioning each other's gateways with the necessary authentication information, such as PSKs or digital certificates."
          },
          {
            "text": "Another possible difference from the original scenario is that in the business partner scenario, both organizations should configure their packet filters to be as restrictive as possible from the beginning of the implementation. The organizations also need to coordinate their testing efforts and determine how a prototype for the solution can best be tested."
          }
        ]
      },
      {
        "title": "Extending Remote Locations",
        "content": [
          {
            "text": "The solution for one remote location can be extended with additional remote office locations. If one remote office needs to be able to communicate with other remote offices, another design decision needs to be made. Either each remote office can build an IPsec tunnel to other remote offices and bypass the main office, or each remote office can contact other remote offices via the main office. This latter setup is called hub-spoke."
          },
          {
            "subsection": "Advantages of Hub-Spoke Architecture",
            "text": []
          },
          {
            "text": "The advantage of the hub-spoke architecture is that the main office is the central hub that can dictate policies and inspect all traffic. If a remote office wants to communicate with another remote office, it involves two separate IPsec tunnels. The hub server decrypts the traffic from the first remote office, performs network inspection and packet filter restrictions on the network traffic, and then re-encrypts the traffic to send it via the second IPsec tunnel to the second remote office. Adding a branch does not require any other branches to be reconfigured for the new branch."
          },
          {
            "subsection": "Disadvantages of Hub-Spoke Architecture",
            "text": []
          },
          {
            "text": "The disadvantage of the hub-spoke architecture is that the main office requires significantly more bandwidth to facilitate all of the remote branches' traffic to each other. It might require an IPsec service with additional hardware acceleration network cards to be able to handle all of the IPsec traffic. It also becomes a single point of failure. When the branches communicate via their own IPsec connections, the branches are more independent of the main office. It does require more management since whenever a branch office is added or modified, all other branches need to have their IPsec configurations updated. Any network inspection configurations and packet filters can still be centrally managed but need to be pushed out to the branch locations."
          }
        ]
      },
      {
        "title": "Protecting Communications for Remote Users",
        "content": [
          {
            "text": "A system administrator of a federal agency has been granting SSH access to individual developers who sometimes work from home. While usable for remote logins via SSH, reaching# Various Reporting Servers"
          },
          {
            "text": "Various reporting servers required complicated port forwarding configurations for SSH that were prone to misconfiguration. It was decided that a proper remote access VPN should be deployed. It would allow the remote users to directly access the agency's servers from their browsers once connected to the VPN without needing SSH."
          },
          {
            "text": "The system administrator also learned that the WiFi at the office was using WPA2 security, which had seen a number of attacks and was no longer considered secure enough. However, the WiFi hardware vendor had no plans to support WPA3 for the hardware that they used. The system administrator wanted to treat the office WiFi as insecure and require the remote access VPN to connect to the office network, even from the office WiFi network."
          }
        ]
      },
      {
        "title": "9.2.1 Identifying Needs and Evaluating Options",
        "content": [
          {
            "text": "As described below, the federal agency may consider a few options for protecting the connections to their secure internal network for remote users as well as local WiFi users."
          },
          {
            "text": "Network Layer Solution: Network Layer VPN. The organization could establish network layer VPNs between the developers and the agency's main office. The VPN tunnels would provide access to the agency internal resources without the need to hop through a number of servers via SSH. The organization considers each possible network layer VPN architecture, as follows:\nA gateway-to-gateway VPN solution is not suitable because the developers work from a number of remote locations, such as co-sharing spaces, hotels, and coffee shops. The developers need access from their laptops and phones, not desktops at home.\n\nThe agency already has a flexible FreeBSD-based internet gateway. A remote access VPN solution for FreeBSD would allow the agency to use its existing gateway, eliminating additional hardware costs. Each remote device would need VPN client software installed, but the developers' laptops and phones already support IKEv2 remote access VPNs, so additional labor would be limited to supporting the developers in performing the configuration and troubleshooting issues. The agency would not even need to pay for additional VPN client licenses.\n\n\nTransport Layer Solution: Web-Based Access Solution. The agency could provide web-based access to resources. This could be accomplished by deploying secured web-based services. This solution would meet the requirement to protect the data in transit, but it would require the agency to deploy, secure, and maintain a public web server connected to the internet. Additionally, all HTTPS services would need to be reconfigured to require a new kind of authentication system since it is currently assumed that anyone who can reach the internal services is authorized to use the services.\n\n\nApplication Layer Solution: File Encryption. Instead of encrypting communications, an application layer solution could encrypt the data itself, which could then be transferred through non-encrypted communications. Using a public key from the agency, the external developers could encrypt their data and then transfer the data to the server over public networks. The data on the server could be decrypted by the developers as needed. Although file encryption is a reasonable solution for transferring files to the agency's server, it is not well-suited to protecting reports and other files that may be downloaded from the server by the external organizations. Such files would need to be...# CURRENT_PAGE_RAW_OCR_TEXT"
          },
          {
            "text": "The agency already has a flexible FreeBSD-based internet gateway. A remote access VPN solution for FreeBSD would allow the agency to use its existing gateway, eliminating additional hardware costs. Each remote device would need VPN client software installed, but the developers' laptops and phones already support IKEv2 remote access VPNs, so additional labor would be limited to supporting the developers in performing the configuration and troubleshooting issues. The agency would not even need to pay for additional VPN client licenses."
          },
          {
            "text": "Transport Layer Solution: Web-Based Access Solution. The agency could provide web-based access to resources. This could be accomplished by deploying secured web-based services. This solution would meet the requirement to protect the data in transit, but it would require the agency to deploy, secure, and maintain a public web server connected to the internet. Additionally, all HTTPS services would need to be reconfigured to require a new kind of authentication system since it is currently assumed that anyone who can reach the internal services is authorized to use the services."
          },
          {
            "text": "Application Layer Solution: File Encryption. Instead of encrypting communications, an application layer solution could encrypt the data itself, which could then be transferred through non-encrypted communications. Using a public key from the agency, the external developers could encrypt their data and then transfer the data to the server over public networks. The data on the server could be decrypted by the developers as needed. Although file encryption is a reasonable solution for transferring files to the agency's server, it is not well-suited to protecting reports and other files that may be downloaded from the server by the external organizations. Such files would need to be...# CURRENT_PAGE_RAW_OCR_TEXT"
          }
        ]
      },
      {
        "title": "Encrypted so",
        "content": [
          {
            "text": "that the external organizations could decrypt them. As developers join or leave the agency or other changes occur to the set of valid keys, all files would need to be encrypted using the new set of keys. The agency could establish a shared key for all external developers, but this would increase the risk of unauthorized access, reduce accountability, and still require considerable maintenance effort, such as distributing new keys in an out-of-band manner."
          },
          {
            "text": "After further investigations into security, ease of deployment, and cost, the agency selects the network layer VPN solution and chooses to use its existing remote access architecture. It is important to note that this solution only protects traffic between the external developers' laptops (at home or on the corporate WiFi) and the main office's VPN gateway; the traffic between the VPN gateway and the local servers is not encrypted unless the developers use the SSH protocol to provide encryption."
          }
        ]
      },
      {
        "title": "9.2.2 Designing the Solution",
        "content": [
          {
            "text": "The solution is based on the agency's existing FreeBSD internet router and will only require installing the additional strongSwan IPsec software to become an IPsec VPN gateway. The router is lightly utilized, so an additional VPN device is not needed for the external developers' usage. The strongSwan IPsec implementation supports EAP-TLS for authentication, which can use the same AAA backend as the WiFi WPA2 solution. Certificates can be easily added and revoked when developers join or leave the agency. The VPN requirement for the internal WiFi network can be rolled out as optional first and made mandatory later by deploying a packet filter on the firewall that connects the WiFi access point to only allow IKE and ESP packets from the WiFi clients."
          },
          {
            "text": "Figure 18 illustrates the planned design for the VPN architecture. The internal WiFi and the remote access clients are considered external (and insecure) networks and are on a different segment from the internal networks of the main office. The strategy is to establish an IPsec tunnel from the external devices to connect to the main office VPN router. Data sent between the developers' laptops and the VPN router will be encrypted, while data between the VPN router and the internal servers (A, B, and C) will not. The tunnel will stay intact until the external system or the VPN router manually terminates the tunnel, or the connection is inactive for a certain period of time. The VPN router and VPN client software on the developers' laptops support UDP encapsulation and MOBIKE, so remote clients that are on NAT networks or have multiple interfaces (WiFi and mobile data) can negotiate UDP encapsulation and MOBIKE to use the IPsec solution."
          },
          {
            "text": "After designing the architecture, the company considers other elements of the design and makes.# Several Decisions, Including the Following:"
          }
        ]
      },
      {
        "title": "Authentication",
        "content": [
          {
            "text": "In the actual deployment of the solution, the clients will be authenticated through digital certificates issued by the company's CA. The VPN router will be provisioned with a machine certificate. The certificates will be installed on the developers' laptops when these devices are locally present at the office. The IPsec client software will be configured to use the digital certificate as a user-based certificate since this would not require any administrator privileges. When a tunnel needs to be established, the client will send its user certificate using EAP-TLS to the VPN gateway for authentication as part of the IKE exchange. The strongSwan IPsec software in the VPN gateway will initially act as a AAA server. When the company extends the solution to multiple VPN gateways for remote access to a number of remote access locations, a separate AAA backend will be set up to handle the EAP-TLS authentication. The VPN gateway will send its certificate via IKE to the remote clients as a machine certificate, so the clients do not need to contact the AAA server to authenticate the VPN's server certificate. Instead, the client uses the CA certificate to validate the VPN gateway certificate and that this certificate matches the IKE ID of the VPN gateway."
          }
        ]
      },
      {
        "title": "Encryption and Integrity Protection Algorithms",
        "content": [
          {
            "text": "The VPN gateway supports multiple encryption algorithms for IKE and ESP, including AES-CBC and AES-GCM. Since not all IKEv2 clients support AES-GCM for IKE, the gateway will also allow AES-CBC with HMAC-SHA-2 for IKE. However, since most IKEv2 clients support AES-GCM for ESP, the server does not normally permit AES-CBC with HMAC-SHA-2 as a default for ESP because that would put an additional load on the server."
          }
        ]
      },
      {
        "title": "Packet Filters",
        "content": [
          {
            "text": "To restrict the external developers' usage as much as possible, the IPsec packet filters should be configured to only permit access to the development network over the VPN tunnel. This would ensure that the agency's internal network is minimally impacted by the remote VPN clients."
          }
        ]
      },
      {
        "title": "Split Tunneling",
        "content": [
          {
            "text": "The IPsec client configuration could offer split tunnel configurations. Since the developers' laptops are issued for agency use only, their configurations do not allow split tunneling. The split tunnel configuration would also not make sense on the corporate WiFi, since all traffic will always reach the corporate gateway first. Therefore, it makes sense to encrypt everything for the additional security it provides in case the native WiFi link layer security is compromised. For mobile phones, the IPsec configuration could allow split-tunnel configurations since the network traffic generated by different applications on a phone are usually isolated from each other, and the VPN could be provisioned in such a way that only the corporate application is allowed to send traffic over the corporate VPN tunnel."
          }
        ]
      },
      {
        "title": "9.2.3 Implementing a Prototype",
        "content": [
          {
            "text": "The VPN gateway administrator performs the following steps to configure and test a prototype of...# the IPsec solution between an external test system and the FreeBSD VPN gateway."
          }
        ]
      }
    ]
  },
  {
    "title": "Externally Located Test System to be an IPsec Client",
    "subsections": [
      {
        "content": "The steps performed to achieve this are as follows:"
      },
      {
        "content": "If required, install IKEv2 software on the device. On most phones and laptops, an IKEv2-based IPsec client comes pre-installed. Because some people inside the company use Android-based phones, and they do not have native support for IKEv2, the strongSwan IKEv2 client is installed on them.\n\n\nConfigure the IPsec clients. Each vendor's IPsec client has its own type of configuration. Clients that support provisioning can usually install a profile configuration file from universal serial bus (USB) media or an email attachment. Such profiles are usually encrypted by a password to ensure that the file can be sent over an insecure network. If provisioning is not supported, the configuration menu on the client will have an option to add a \"VPN configuration.\" This configuration will then ask for the remote VPN server's DNS name, the type of configuration required, and some optional information. Some IPsec clients have an option to import a certificate bundle, while other IPsec clients require the user to import certificates separately from the VPN connection. Certificates are usually transported using the PKCS#12 format, which has an encrypted bundle consisting of a certificate, private key, and CA certificate that are protected by symmetric key wrapping using a key derived from a strong password.\n\n\nTest the tunnel settings. Once the parameters have been entered, the administrator starts the VPN connection."
      },
      {
        "content": "If required, install IKEv2 software on the device. On most phones and laptops, an IKEv2-based IPsec client comes pre-installed. Because some people inside the company use Android-based phones, and they do not have native support for IKEv2, the strongSwan IKEv2 client is installed on them."
      },
      {
        "content": "Configure the IPsec clients. Each vendor's IPsec client has its own type of configuration. Clients that support provisioning can usually install a profile configuration file from universal serial bus (USB) media or an email attachment. Such profiles are usually encrypted by a password to ensure that the file can be sent over an insecure network. If provisioning is not supported, the configuration menu on the client will have an option to add a \"VPN configuration.\" This configuration will then ask for the remote VPN server's DNS name, the type of configuration required, and some optional information. Some IPsec clients have an option to import a certificate bundle, while other IPsec clients require the user to import certificates separately from the VPN connection. Certificates are usually transported using the PKCS#12 format, which has an encrypted bundle consisting of a certificate, private key, and CA certificate that are protected by symmetric key wrapping using a key derived from a strong password."
      },
      {
        "content": "Test the tunnel settings. Once the parameters have been entered, the administrator starts the VPN connection."
      },
      {
        "title": "9.2.3.3 Testing the Solution",
        "content": [
          {
            "text": "After completing the configuration of the VPN router and the external test clients, the VPN gateway administrator tests the solution to ensure that the external system can successfully establish a secure tunnel to the VPN router and transfer encrypted traffic through the tunnel. While ping commands are a good initial test to see if things appear to be working, they are not enough since these packets are unusually small and will not indicate whether a large TCP stream will work as well. Using a web browser to generate traffic is a better test. If the remote access server provides both IPv4 and IPv6 lease IP addresses to the VPN clients, both types should be verified to work properly. Traffic to both the corporate servers and the internet should be tested to ensure proper functioning of the (lack or presence of) split tunnel configuration. Tests should also ascertain that the VPN gateway will only negotiate IPsec tunnels for the approved algorithm(s) and will block traffic that is not encrypted. The administrator should monitor the VPN gateway's logs for errors that indicate problems with the connection. The gateway's log report generation tool can be useful when troubleshooting issues because it can indicate where connections are failing or where traffic is being dropped. The administrator also deploys a packet sniffer on the gateway or an external test device to confirm that the traffic is.\n```# CURRENT_PAGE_RAW_OCR_TEXT"
          }
        ]
      },
      {
        "title": "being protected.",
        "content": [
          {
            "text": "MOBIKE is tested by using a phone that has mobile data and WiFi connectivity. The phone establishes a VPN connection to the VPN server using the WiFi interface. The WiFi interface is then disabled. The VPN connection should still be working. Logs on the VPN server can be checked to see if the VPN client's public IP address changed through a MOBIKE message. Re-enabling WiFi should cause the VPN client to switch back to WiFi since that is usually the preferred connection and will be faster and cheaper."
          },
          {
            "subsection": "9.2.4 Analysis",
            "text": []
          },
          {
            "text": "IPsec tunnels established from external systems to a trusted gateway can be effective for protecting sensitive information from eavesdroppers. Providing secure remote access for laptops, phones, or other devices can be done using standard IKEv2 and IPsec software. Using the existing IPsec client software and IPsec gateway eliminates the need to purchase additional hardware or software and greatly reduces design and implementation time. Reusing the remote access VPN architecture to provide additional protection to the local WiFi network requires less reliance on the WiFi hardware manufacturers and security protocols. The WEP and WPA2 link layer security protocols have been cryptographically broken on a few occasions, requiring protocol updates that are not always possible on older hardware models. Using an IPsec solution provides confidence that the WiFi network cannot be abused or broken into to gain access to the corporate network since the WiFi network is as untrusted as any other host on the internet. Visitors to the office can be given guest internet access to the WiFi network using the link layer credentials without endangering the corporate network because access to the corporate network is not possible from the office WiFi network without using the IPsec remote access VPN."
          },
          {
            "subsection": "9.3 Remote Access to a Cloud Server Instance",
            "text": []
          },
          {
            "text": "An agency has outsourced some of its public-facing web pages to a cloud provider. A number of virtual machines are used to provide the service from the cloud. This private cloud uses private IP addresses. The agency has one public IP address that terminates at the cloud provider. The cloud provider allows the agency to forward specific protocols and ports to one of its virtual machines. The agency forwards TCP port 80 and TCP port 443 to one of the virtual machines running the HAProxy software configured as a service that load balances these connections to a number of virtual machine web servers. These web servers connect to another set of virtual machines running a database server. During peak seasons for this agency, the number of database and web servers can be increased to match demand. To update the database content on these virtual machines from the agency internal network, a VPN connection is desired. This would allow the database servers to be replicated from the agency's network to the private cloud. The virtual cloud is using the IPv4 private space IP network 10.0.2.0/24.# Cloud Provider Configuration"
          },
          {
            "text": "A cloud provider runs a virtual router on the IP address 10.0.2.254. Traffic for the cloud uses one of the cloud provider's public IP addresses, 192.1.2.78. This is the IP address for the agency's cloud webserver at cloud.example.gov. Web traffic using ports 80 and 443 to the IP address 192.1.2.78 uses NAT and is sent to the internal IP 10.0.2.2 running the HAProxy service. The agency itself uses the private space IP network 192.168.0.0/16 but only wants select parts of its network to have direct access to the private cloud, specifically 192.168.103.0/24 and 2001:db8:0:2::/64. While the agency could get public IPv6 addresses for its virtual private cloud, it decides it would be safer to use private space IPv6 addresses as well, similar to how it uses private space IPv6 at the agency network for its database servers and workstation machines. The IPv6 private cloud will use 2001:db8:0:1::/64."
          }
        ]
      },
      {
        "title": "9.3.1 Identifying Needs and Evaluating Options",
        "content": [
          {
            "text": "As there is no dedicated link between the agency and the cloud provider, link-based VPNs cannot be used. The agency also wants to keep the ability to move to another cloud provider, so it does not want to use the cloud provider's VPN solution. An additional advantage of using a virtual VPN server inside the private cloud is that all traffic inside the cloud provider's network but outside the private cloud itself would be encrypted. Only the virtual machines of the agency would be able to see the unencrypted traffic."
          },
          {
            "text": "Using a network layer VPN would allow the agency to extend the solution by adding IPsec VPN tunnels to other cloud providers or new physical locations. It could extend the solution to building more VPN tunnels to other physical locations or other cloud providers. A VPN tunnel could even be used to move a single server to another cloud provider without reconfiguring any other virtual servers in the private cloud."
          }
        ]
      }
    ]
  },
  {
    "title": "Current Page Raw OCR Text",
    "subsections": [
      {
        "content": "According to its own policy without the involvement of a CA."
      },
      {
        "title": "Encryption and Integrity Protection Algorithms",
        "content": [
          {
            "text": "Since both ends use the same enterprise Linux solution that supports Libreswan running a cryptographic module operating in FIPS mode, IKE and ESP options will be left with their default values. That means that the VPN will start out using AES-GCM with 256-bit keys for IKE and ESP, SHA-256 as the IKE PRF, and DH 14 with PFS. When NIST-approved algorithms change in the future, the Linux enterprise solution will update the Libreswan software, and the configuration on the VPN servers will be automatically updated to use the new, stronger algorithm requirements."
          }
        ]
      },
      {
        "title": "Packet Filters",
        "content": [
          {
            "text": "To restrict the VPN access to the cloud from the agency's internal network, only workstations and servers at some specific IP addresses will be allowed to access to the private cloud, such as only two IPv4 networks and one IPv6 network for the developer workstations using 192.168.100.0/24 and the database servers using the IPv4 range 192.168.103.0/24 and the IPv6 range 2001:db8:0:2::/64."
          }
        ]
      },
      {
        "title": "MTU and TCP Settings",
        "content": [
          {
            "text": "It is not known exactly how many layers of encapsulations are happening at the cloud provider or at the agency's internet service provider (ISP). It is known that a digital subscriber line (DSL) service adds at least one encapsulation using PPP at the data link layer. To prevent unnecessary fragmentation and possible flow issues on the database and remote SSH login connections that will use TCP, TCP MSS clamping will be used and the MTU for packets across the VPN will be slightly reduced."
          }
        ]
      }
    ]
  },
  {
    "title": "CURRENT_PAGE_RAW_OCR_TEXT",
    "subsections": [
      {
        "content": "servers, and placing it in the directory /etc/ipsec.d/\nCustomizing the left= entry on both servers as indicated in the configuration file below\nUpdating firewall rules to allow traffic from the subnets and exempt these IP destination ranges from being NAT'ed; adding a firewall rule for TCP MSS clamping\nEnabling IP forwarding on the cloud instance. The built-in rp_filter is disabled to avoid false positives; otherwise, the kernel will drop or try to redirect traffic due to the encrypted and decrypted traffic using the same (single) virtual ethernet card."
      },
      {
        "title": "9.3.4 Testing the Solution",
        "content": [
          {
            "text": "The administrator is at the office, so SSH is used to log in to a third-party host that is neither behind the office VPN nor within the private cloud. From that machine, SSH is used to log in to the cloud instance VPN server. Now, if the IPsec tunnels fail to come up due to a misconfiguration and drop all packets between the two locations, the administrator is not locked out from fixing the configuration."
          },
          {
            "text": "On both ends, start Libreswan: systemctl start ipsec\nOn one end, start the IPv4 connection manually: ipsec auto --up cloudoffice-ipv4\nIf the connection fails, it should show what happened. Consult the Libreswan documentation and Frequently Asked Questions (FAQ) if the error is unclear.\nOnce the connection is established, a ping from one of the workstations in the office can be used to test: ping 10.0.2.78.\nOnce confirmed to work, a database replication is started to test performance.\nByte counters on the tunnel are confirmed using the command ipsec trafficstatus\nNext, the IPv6 connection can be brought up and tested: ipsec auto --up cloudoffice-ipv6"
          },
          {
            "text": "After the tunnels are confirmed to be working correctly, the configuration is updated to automatically start the tunnels when the Libreswan IPsec service starts by changing auto=add to auto=start. The IPsec service is enabled to start at bootup on both gateways using the command systemctl enable ipsec."
          },
          {
            "text": "The port forwarding for SSH into the private cloud is disabled using the cloud management tools to prevent the virtual machines from being scanned by attackers on the internet. SSH access is still possible as long as the connections are made from the office through the VPN connection."
          }
        ]
      },
      {
        "title": "9.3.5 Analysis",
        "content": [
          {
            "text": "A private cloud can be safely accessed remotely by adding a virtual machine acting as a VPN gateway. The private cloud can be used and protected just like physical servers at a data center. Additionally, by requiring the use of the VPN, remote access control can be further limited to legitimate sources and prevent the cloud instances from being susceptible to port scanning attacks via port forwarding on the public IP through which the private cloud is reachable."
          },
          {
            "text": "In the future, the VPN configuration can be extended to connect to other private clouds or other data centers. It can also be extended to act as a remote access VPN for developers so they can safely connect to the private cloud from their laptops even if not at the office.\n```# CURRENT_PAGE_RAW_OCR_TEXT"
          },
          {
            "text": "Both IPv4 and IPv6 can be used, even if the cloud provider does not provide IPv6 itself. This allows the agency to be proactive and compliant to regulations that mandate IPv6 readiness on all their equipment."
          }
        ]
      }
    ]
  },
  {
    "title": "CURRENT_PAGE_RAW_OCR_TEXT",
    "subsections": [
      {
        "title": "Instances",
        "content": [
          {
            "text": "The solution should work across most of the global infrastructure."
          }
        ]
      },
      {
        "title": "Authentication",
        "content": [
          {
            "text": "Since certificates are already used to identify many services, the IPsec nodes will be authenticated using machine certificates signed by a private CA. At a later date, DNSSEC-based authentication using public keys will be evaluated, which will reduce the overhead of running a CA and remove the need for certificate renewal. A Federal agency shall use its authorized PKI to issue certificates for the IPsec peers, and these certificates shall be used for authentication."
          }
        ]
      },
      {
        "title": "Confidentiality and Integrity",
        "content": [
          {
            "text": "Since it is expected that some nodes will have hundreds of IPsec connections, it is important to pick the most optimum cryptography: AES-GCM with 128-bit keys for IKE and IPsec and DH group 19 to provide 128 bits of security strength for the key exchange."
          }
        ]
      },
      {
        "title": "Lifetime and Idletime",
        "content": [
          {
            "text": "Standard IKE SA and IPsec SA lifetimes are used. However, since these are not negotiated, individual managers can tune these later to optimum values, depending on their traffic patterns. Similarly, idletimes are set to 15 minutes to prevent the accumulation of too many idle IKE and IPsec sessions per host, and idletimes can be tuned at a later stage as well."
          }
        ]
      },
      {
        "title": "IPsec Mode",
        "content": [
          {
            "text": "All networks are already connected via IPsec gateways, so no NAT is deployed, and the IPsec connections can use the transport mode, resulting in a larger effective MTU than if an IPsec tunnel mode was used. Transport mode also prevents a node from creating a custom policy covering more than itself."
          }
        ]
      },
      {
        "title": "9.4.3 Implementing a Prototype",
        "content": [
          {
            "text": "To make a realistic deployment prototype, the company decides to use two networks normally reserved as staging servers at different data centers that test new code before it is deployed into production. These two networks are already connected in a gateway-to-gateway architecture."
          },
          {
            "text": "First, servers in network A and servers in network B will each be configured for mesh encryption to their local nodes only. Once the mesh IPsec encryption is functional in one network, and the mesh IPsec encryption is functional in the other network, the mesh will be extended to incorporate both networks in a single mesh configuration. This allows for further testing of IPsec-in-IPsec packets when a server from network A starts an IPsec connection to a server in network B."
          },
          {
            "text": "The open source Ansible software provisioning system is extended to create a PKCS#12 certificate for each new virtual machine that is created for network A and network B. If the existing CA infrastructure allows this, Ansible could use that infrastructure to create the CA-signed certificates.\nUsing a phased approach, create an IPsec configuration file. Then add it to the Ansible script to be installed on new virtual machines deployed in networks A and B.\nAs part of the new virtual machine provisioning, Libreswan is installed.\n```# Current Page Raw OCR Text"
          },
          {
            "text": "the generated file containing the PKCS#12 bundle with friendly_name \"provisioned-cert\" is imported into Libreswan using the ipsec import command."
          },
          {
            "text": "IPsec is enabled using the \"private-or-clear\" connection by adding the IP network ranges of the participating networks to the file /etc/ipsec.d/policies/private-or-clear: This will create an \"on-demand\" IPsec connection that is triggered by IP traffic. If the file clear-or-private is used instead, the IPsec connection is loaded but not triggered by traffic. However, it will respond to requests for IPsec connections from remote hosts."
          }
        ]
      },
      {
        "title": "9.4.4 Testing the Solution",
        "content": [
          {
            "text": "Traffic is generated and nodes are inspected using the ipsec trafficstatus command. Once the basic mesh encryption is working, more advanced scenarios are tested."
          },
          {
            "text": "A single IP address is added to the exception policy /etc/ipsec.d/policies/clear to confirm that communication only happens in cleartext.\nBoth network A and network B add each other's IP ranges to the policy file for IPsec in /etc/ipsec.d/policies/private-or-clear to test mesh encryption across the two networks.\nSome servers are tested with a policy in /etc/ipsec.d/policies/private, which mandates IPsec encryption.\nTCP streams are tested between network A and network B to confirm that there are no issues with double encryption (a VPN over another VPN) and packet sizes.\nAn on-demand IPsec connection is triggered, and no more traffic is sent between the nodes. The connection is monitored for possible termination due to idleness within the configured timeframe.\nSome servers are restarted or run without the IPsec capability for a limited time to ensure that traffic is still encrypted when possible and recovery of the IPsec capability leads to an encrypted traffic flow.\nTo harden against attacks where one compromised server takes over the IKE identity of another server while using its non-matching certificate, the dns-match-id option is enabled. After testing that the mesh connections still work, one host is configured with another host's certificate, and a mesh connection is attempted again. The connection is tested for proper rejection."
          }
        ]
      }
    ]
  },
  {
    "title": "10 Work in Progress# Future Directions of IPsec",
    "subsections": [
      {
        "content": "This section briefly discusses some of the future directions of IPsec. At this time, the IETF is working on various IKE and IPsec extensions. This section provides a brief discussion of the new standards under development and resources for additional information."
      },
      {
        "title": "10.1 Support for Multicast and Group Authentication",
        "content": [
          {
            "text": "Multicast traffic refers to sending a packet to an IP address that is designated as a multicast address; one or more hosts that are specifically interested in the communication then receive copies of that single packet. This differs from broadcast traffic, which causes packets to be distributed to all hosts on a subnet because multicast traffic will only be sent to hosts that are interested in or authorized to receive it. Multicasting is most often used to stream audio and video. For the sender, there are two primary advantages of using multicast. First, the sender only needs to create and send one packet instead of creating and sending a different packet to each recipient. Second, the sender does not need to keep track of who the actual recipients are. Multicasting can also be advantageous from a network perspective because it reduces network bandwidth usage."
          },
          {
            "text": "RFC 4301 [45] describes IPsec processing for multicast traffic. RFC 5374 [83] extends the IKEv1 protocol to apply to groups and multicast traffic. It defines a new class of SAs (Group Security Associations, GSAs) and additional databases used to apply IPsec protection to multicast traffic [84]. The secret key to these GSAs is distributed to the group members. Once a member leaves the group, any secret key shared with other members has to be replaced with a new group key unknown to the group member that just left. For large groups that always have members joining and leaving, this can be complicated."
          },
          {
            "text": "At the time of writing, IKEv2 does not support multicast traffic, but a draft document is under development to add this support [85]. It defines a new G-IKEv2 extension that conforms with the Multicast Group (MEC) Security Architecture [84] and the Multicast Security (MSEC) Group Key Management Architecture [86]. G-IKEv2 replaces Group Domain of Interpretation (GDOI) [87], which defines a similar group key management protocol for IKEv1."
          }
        ]
      },
      {
        "title": "10.2 Labeled IPsec",
        "content": [
          {
            "text": "Labeled IPsec is a mechanism to convey a security label or context that is associated with an IPsec stream. Both endpoints can apply further restrictions on the type of traffic allowed to be transmitted via the IPsec connection. Some vendors had a proprietary extension to IKEv1 to support labeled IPsec. The IETF is currently working on a draft to add this extension to IKEv2. The extension takes the form of an additional traffic selector with a security context that needs to be matched. This work is discussed in [88]."
          }
        ]
      },
      {
        "title": "10.3 ESP Implicit IV",
        "content": [
          {
            "text": "For IoT devices, as well as other battery-powered network devices, there is a desire to reduce the number of bytes sent over a network to save battery power. When IPsec is deployed using an# CURRENT_PAGE_RAW_OCR_TEXT"
          }
        ]
      },
      {
        "title": "AEAD and IV",
        "content": [
          {
            "text": "AEAD, such as AES-GCM, each packet contains an IV, also called a nonce. This value must be unique but may be predictable. The recommended implementation is to use a simple counter. However, the ESP protocol itself already has a counter, which is used to defend against replay attacks. A proposal is being developed by the IETF to define AES-GCM and AES-CCM variants that omit sending the AEAD IV and use the ESP replay counter instead. These variants are only defined for ESP algorithms, not the IKE algorithms. This work is discussed in [89]."
          }
        ]
      },
      {
        "title": "10.4 The Intermediate Exchange",
        "content": [
          {
            "text": "Classic DH key exchanges could become vulnerable to quantum computing attacks. There is a need to replace the DH key exchange with a quantum-safe key exchange. Current proposals for such algorithms all require the use of large public keys that need to be exchanged in IKE during the IKE_SA_INIT phase. During this phase of the exchange, IKEv2 fragmentation cannot yet be used because a confidential channel that can identify fragments as legitimate has not yet been established. A new intermediate exchange is placed between the IKE_SA_INIT and IKE_AUTH exchanges, which can support fragmentation. This work is discussed in [90]."
          }
        ]
      },
      {
        "title": "10.5 IPv4 and IPv6 Support in Remote Access VPNs",
        "content": [
          {
            "text": "The telecom networks (LTE/5G) can provide notifications about whether a network connection should be attempted with IPv4, IPv6, or both. However, IKEv2 does not offer a similar notification structure or rich enough error notification for clients to determine if they should attempt IPv4 or IPv6 only or address both families (IPv4 and IPv6) for use with IPsec. A new draft has been proposed to clarify this for better integration of 3GPP standards with IKEv2. This work is discussed in [91]."
          }
        ]
      }
    ]
  }
]