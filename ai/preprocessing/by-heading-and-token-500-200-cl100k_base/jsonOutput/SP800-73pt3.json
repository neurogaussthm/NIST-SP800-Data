[
  {
    "title": "Abstract",
    "subsections": [
      {
        "content": "FIPS 201 defines the requirements and characteristics of government-wide interoperable identity credentials. It specifies that these identity credentials must be stored on a smart card and that additional common identity credentials, known as derived PIV credentials, may be issued by a federal department or agency and used when a PIV Card is not practical. This document contains the technical specifications to interface with the smart card to retrieve and use the PIV identity credentials. The specifications reflect the design goals of interoperability and PIV Card functions. The goals are addressed by specifying a PIV data model, card edge interface, and application programming interface. Moreover, this document enumerates requirements for the options and branches in international integrated circuit card standards. The specifications go further by constraining interpretations of the normative standards to ease implementation, facilitate interoperability, and ensure performance in a manner tailored for PIV applications."
      }
    ]
  },
  {
    "title": "1. Introduction",
    "subsections": [
      {
        "content": "Homeland Security Presidential Directive-12 (HSPD-12) called for the adoption of a common identification standard to govern the interoperable use of identity credentials to allow physical and logical access to federally controlled facilities and information systems. In response, Federal Information Processing Standard (FIPS) 201 [FIPS201], Personal Identity Verification (PIV) of Federal Employees and Contractors, was developed to define reliable, government-wide identity credentials for use in applications such as access to federally controlled facilities and information systems. FIPS 201 supports multiple types of authenticators, including authenticators on smart cards (also known as PIV Cards) and derived PIV credential authenticators in various other form factors. This publication contains technical specifications to interface with PIV Cards to retrieve and use identity credentials. Other specifications, such as NIST Special Publication (SP) 800-157r1 (Revision 1), contain procedures and life cycle activities to issue, maintain, and use derived PIV credentials."
      },
      {
        "title": "1.1. Purpose",
        "content": [
          {
            "text": "FIPS 201 defines processes for binding identities to authenticators, such as the PIV Card and derived PIV credentials used in the federal PIV system. SP 800-73-5 contains the technical specifications to interface with the PIV Card to retrieve and use the identity credentials. The specifications reflect the design goals of interoperability and PIV Card functions. The goals are addressed by specifying a PIV data model, card edge interface, and application programming interface. Moreover, this document enumerates requirements for the options and branches in international integrated circuit (ICC) standards [ISO7816]. The specifications go further by\n```# Constraining Interpretations of the Normative Standards"
          },
          {
            "text": "to ease implementation, facilitate interoperability, and ensure performance in a manner tailored for PIV applications."
          }
        ]
      },
      {
        "title": "1.2. Scope",
        "content": [
          {
            "text": "SP 800-73-5 specifies the PIV data model, application programming interface (API), and card interface requirements necessary to comply with the use cases, as defined in Section 6 of FIPS 201 and further described in Appendix B of SP 800-73-5 Part 1. Interoperability is defined as the use of PIV identity credentials such that client-application programs, compliant card applications, and compliant ICCs CAN be used interchangeably by all information processing systems across federal agencies. SP 800-73-5 defines the PIV data elements' identifiers, structure, and format, as well as the client API and card command interface for use with the PIV Card."
          },
          {
            "text": "This document \u2014 SP 800-73-5, Interfaces for Personal Identity Verification: Part 3 \u2013 PIV Client Application Programming Interface \u2014 contains technical specifications for the PIV client application programming interface to the PIV Card."
          }
        ]
      },
      {
        "title": "1.3. Audience and Assumptions",
        "content": [
          {
            "text": "This document is intended for federal agencies and implementers of PIV systems. Readers are assumed to have a working knowledge of smart card standards and applications. Readers should also be aware of the following important content in SP 800-73-5 Part 1:"
          },
          {
            "text": "The front matter details configuration management recommendations and specifies NPIVP conformance testing procedures.\nAppendix G provides the full Revision History of SP 800-73.\nSection 1.3 specifies the effective date of SP 800-73-5."
          }
        ]
      },
      {
        "title": "1.4. Content and Organization",
        "content": [
          {
            "text": "All sections in this document are normative (i.e., mandatory for compliance) unless specified as informative (i.e., non-mandatory) and are structured as follows:"
          },
          {
            "text": "Section 1, Introduction, provides the purpose, scope, audience, and assumptions of the document and outlines its structure.\nSection 2, Overview: Concepts and Constructs, describes both the PIV Card Application and the PIV client API. This section is informative.\nSection 3, Client Application Programming Interface, describes the set of entry points accessible by client applications through the PIV Middleware to interact with the PIV Card.\nAppendix A contains the list of acronyms used in this document. This section is informative.\nAppendix B contains the Glossary of terms used in this document. This section is informative.\nAppendix C explains the notation in use in this document. This section is informative."
          }
        ]
      },
      {
        "title": "2. Overview: Concepts and Constructs",
        "content": [
          {
            "text": "SP 800-73-5 Parts 2 and 3 define two interfaces to an ICC that contain the PIV Card Application: a low-level card command interface (SP 800-73-5 Part 2) and a high-level client API (Part 3). SP# CURRENT_PAGE_RAW_OCR_TEXT"
          },
          {
            "text": "800-73-5 Part 3 (this document) is optional, and NIST Personal Identity Verification Program (NPIVP) conformance testing for PIV Middleware in accordance with SP 800-73 Part 3 is discontinued since endpoints support high-level client APIs natively at the time of this publication."
          },
          {
            "text": "The information processing concepts and data constructs on both interfaces are identical and MAY be referred to generically as the information processing concepts and data constructs on the PIV interfaces without specific reference to the client API or the card command interface. The client API provides task-specific programmatic access to these concepts and constructs, and the card command interface provides communication access. The client API is used by client applications using the PIV Card Application. The card command interface is used by software that implement the client API (middleware)."
          },
          {
            "text": "The client API is thought of as being at a higher level than the card command interface because access to a single entry point on the client API may cause multiple card commands to traverse the card command interface. In other words, it may require more than one card command on the card command interface to accomplish the task represented by a single call on an entry point of the client API."
          },
          {
            "text": "The client API is a program execution, call/return style interface, whereas the card command interface is a communication protocol, command/response style interface. Because of this difference, the representation of the PIV concepts and constructs as bits and bytes on the client API may be different from the representation of these same concepts and constructs on the card command interface."
          }
        ]
      },
      {
        "title": "3. Client Application Programming Interface",
        "content": [
          {
            "text": "Table 1 lists the entry points on the PIV client API. This section references object identifiers (OIDs), which are defined and can be found in SP 800-73-5 Part1, Table 3."
          },
          {
            "text": "If both the PIV Middleware and the PIV Card support secure messaging, then all non-card management functionality of the PIV Card MAY be accessed over either the contact or contactless interface of the card. In order to perform non-card management functionality that would otherwise be limited to the contact interface, the client application must first establish a virtual contact interface by calling the pivEstablishSecureMessaging function and using the pivLogIntoCardApplication function to submit the pairing code to the card. If the client application does not have another means of determining whether communication with the PIV Card is over a contact or contactless interface, it MAY use the pivGetData function to attempt to read a mandatory data object (e.g., such as the X.509 Certificate for PIV Authentication or the security object) that has an access rule for read of \"Always.\" However, that is only accessible over the contact and virtual contact interfaces (see SP 800-73-5 Part1, Table 2). If the# CURRENT_PAGE_RAW_OCR_TEXT"
          },
          {
            "text": "If the return code from pivGetData is PIV_SECURITY_CONDITIONS_NOT_SATISFIED, then the communication with the card is over a contactless interface."
          }
        ]
      }
    ]
  },
  {
    "title": "Identity Module in the Mobile Phone",
    "subsections": [
      {
        "content": "At +1 617 555 0123. When used as an argument to the pivConnect entry point on the PIV client API described in this section, an '8x' series data object with zero length and a '9x' series data object request the return of all available card readers of the described type on the described node. Thus, '7F 21 04 81 00 90 00' would request a list of all available PC/SC card readers on the host on which the client application was running."
      },
      {
        "title": "CDLength",
        "content": [
          {
            "text": "Length of the card description parameter."
          }
        ]
      },
      {
        "title": "cardHandle",
        "content": [
          {
            "text": "The returned opaque identifier of a communication channel to a particular ICC and, hence, of the card itself. cardHandle is used in all other entry points on the PIV client API to identify which card the functionality of the entry point should be applied to."
          }
        ]
      },
      {
        "title": "Return Codes:",
        "content": [
          {
            "text": "PIV_OK\nPIV_CONNECTION_DESCRIPTION_MALFORMED\nPIV_CONNECTION_FAILURE\nPIV_CONNECTION_LOCKED"
          },
          {
            "subsection": "3.1.3. pivDisconnect",
            "text": []
          },
          {
            "text": "Purpose: Disconnect the PIV API from the PIV Card Application and the ICC that contains the PIV Card Application."
          },
          {
            "text": "Prototype:\nc\nstatus_word pivDisconnect(\nIN handle cardHandle\n);"
          },
          {
            "text": "Parameters:\n- cardHandle Opaque identifier of the card to be acted upon as returned by pivConnect. The value of cardHandle is undefined upon return from pivDisconnect."
          },
          {
            "text": "Return Codes:\n- PIV_OK\n- PIV_INVALID_CARD_HANDLE\n- PIV_CARD_READER_ERROR"
          },
          {
            "text": "If secure messaging has been established, then the PIV Middleware SHALL zeroize the secure messaging session keys."
          }
        ]
      }
    ]
  },
  {
    "title": "PIV_INSUFFICIENT_BUFFER",
    "subsections": [
      {
        "content": "If the length of application properties is longer than the buffer allocated by the client application, then the PIV Middleware SHALL return PIV_INSUFFICIENT_BUFFER but SHALL still set APLength to the length of the application properties."
      },
      {
        "title": "3.2.2. pivEstablishSecureMessaging",
        "content": [
          {
            "text": "Purpose: Establish secure messaging with the PIV Card Application."
          },
          {
            "text": "Prototype:\nc\nstatus_word pivEstablishSecureMessaging(\nIN handle cardHandle,\n);"
          },
          {
            "text": "Parameters:\n- cardHandle Opaque identifier of the card to be acted upon as returned by pivConnect"
          },
          {
            "text": "Return Codes:\n- PIV_OK\n- PIV_INVALID_CARD_HANDLE\n- PIV_CARD_READER_ERROR\n- PIV_SM_FAILED"
          },
          {
            "text": "After successful execution of the key establishment protocol, the PIV Middleware SHALL perform all subsequent GET DATA, VERIFY, and GENERAL AUTHENTICATE commands over secure messaging with the exception of any subsequent uses of the GENERAL AUTHENTICATE command to perform the key establishment protocol."
          }
        ]
      }
    ]
  },
  {
    "title": "CURRENT_PAGE_RAW_OCR_TEXT",
    "subsections": [
      {
        "title": "Prototype:",
        "content": [
          {
            "text": "plaintext\nstatus_word pivGetData(\nIN handle cardHandle,\nIN string OID,\nIN LONG oidLength,\nOUT sequence of byte data,\nINOUT LONG DataLength\n);"
          }
        ]
      },
      {
        "title": "Parameters:",
        "content": [
          {
            "text": "cardHandle: Opaque identifier of the card to be acted upon as returned by pivConnect\nOID: Object identifier of the object whose data content is to be retrieved coded as a string (e.g., \"2.16.840.1.101.3.7.2.96.80\"). See SP 800-73-5 Part1, Table 3.\noidLength: Length of the object identifier.\ndata: Retrieved data content.\nDataLength: As an input, length of the buffer allocated for data. As an output, length of the data retrieved from the PIV Card."
          }
        ]
      },
      {
        "title": "Return Codes:",
        "content": [
          {
            "text": "PIV_OK\nPIV_INVALID_CARD_HANDLE\nPIV_INVALID_OID\nPIV_DATA_OBJECT_NOT_FOUND\nPIV_SECURITY_CONDITIONS_NOT_SATISFIED\nPIV_CARD_READER_ERROR\nPIV_SM_FAILED\nPIV_INSUFFICIENT_BUFFER"
          },
          {
            "text": "If the length of the retrieved data is longer than the buffer allocated by the client application, then the PIV Middleware SHALL return PIV_INSUFFICIENT_BUFFER but SHALL still set DataLength to the length of the retrieved data. If the PIV Card Application returns a zero-length data object, then the PIV Middleware SHALL return PIV_DATA_OBJECT_NOT_FOUND."
          }
        ]
      },
      {
        "title": "3.2.4. pivLogoutOfCardApplication",
        "content": [
          {
            "subsection": "Purpose:",
            "text": []
          },
          {
            "text": "Reset the application security state/status of the PIV Card Application."
          },
          {
            "subsection": "Prototype:",
            "text": []
          },
          {
            "text": "plaintext\nstatus_word pivLogoutOfCardApplication(\nIN handle cardHandle\n);"
          },
          {
            "subsection": "Parameters:",
            "text": []
          },
          {
            "text": "cardHandle: Opaque identifier of the card to be acted upon as returned by pivConnect. The cardHandle remains valid after execution of this function."
          },
          {
            "subsection": "Return Codes:",
            "text": []
          },
          {
            "text": "PIV_OK\nPIV_INVALID_CARD_HANDLE\nPIV_CARD_READER_ERROR"
          }
        ]
      },
      {
        "title": "3.3. Entry Points for Cryptographic Operations",
        "content": [
          {
            "subsection": "3.3.1. pivCrypt",
            "text": []
          },
          {
            "text": "Perform a cryptographic operation, such as encryption or signing on a sequence of bytes. SP 800-73-5 Part1, Appendix C describes recommended procedures for PIV algorithm identifier discovery."
          },
          {
            "text": "plaintext\nstatus_word pivCrypt(\nIN handle cardHandle,\nIN byte algorithmIdentifier,\nIN byte keyReference,\nIN sequence of byte algorithmInput,\nIN LONG inputLength,\nOUT sequence of byte algorithmOutput,\nINOUT LONG outputLength\n);"
          },
          {
            "subsection": "Parameters:",
            "text": []
          },
          {
            "text": "cardHandle: Opaque identifier of the card to be acted upon as returned by pivConnect\nalgorithmIdentifier: Identifier of the cryptographic algorithm to be used for the cryptographic operation [SP800-78, Tables 9\n```# CURRENT_PAGE_RAW_OCR_TEXT"
          }
        ]
      },
      {
        "title": "Key Reference",
        "content": [
          {
            "text": "Identifier of the on-card key to be used for the cryptographic operation. See [SP800-78, Table 8] and SP 800-73-5 Part1, Table 5."
          }
        ]
      },
      {
        "title": "Algorithm Input",
        "content": [
          {
            "text": "Sequence of bytes used as the input to the cryptographic operation. The algorithmInput for RSA algorithms SHALL be restricted to the range 0 to n-1, where n is the RSA modulus."
          }
        ]
      },
      {
        "title": "Input Length",
        "content": [
          {
            "text": "Length of the algorithm input."
          }
        ]
      },
      {
        "title": "Algorithm Output",
        "content": [
          {
            "text": "Sequence of bytes output by the cryptographic operation."
          }
        ]
      },
      {
        "title": "Output Length",
        "content": [
          {
            "text": "As an input, length of the buffer allocated for algorithmOutput. As an output, length of the algorithm output."
          }
        ]
      },
      {
        "title": "Return Codes",
        "content": [
          {
            "text": "PIV_OK\nPIV_INVALID_CARD_HANDLE\nPIV_INVALID_KEYREF_OR_ALGORITHM\nPIV_SECURITY_CONDITIONS_NOT_SATISFIED\nPIV_INPUT_BYTES_MALFORMED\nPIV_CARD_READER_ERROR\nPIV_SM_FAILED\nPIV_INSUFFICIENT_BUFFER"
          },
          {
            "text": "The PIV_INPUT_BYTES_MALFORMED error condition indicates that some property of the data to be processed, such as the length or padding, was inappropriate for the requested cryptographic algorithm or key."
          },
          {
            "text": "If the value of keyReference is '04' (PIV Secure Messaging key), then the PIV Middleware SHALL return PIV_INVALID_KEYREF_OR_ALGORITHM."
          },
          {
            "text": "If the length of the algorithm output is longer than the buffer allocated by the client application, then the PIV Middleware SHALL return PIV_INSUFFICIENT_BUFFER but SHALL still set outputLength to the length of the algorithm output."
          }
        ]
      }
    ]
  },
  {
    "title": "Return Codes",
    "subsections": [
      {
        "content": "PIV_OK\nPIV_INVALID_CARD_HANDLE\nPIV_INVALID_OID\nPIV_CARD_READER_ERROR\nPIV_INSUFFICIENT_CARD_RESOURCE\nPIV_SECURITY_CONDITIONS_NOT_SATISFIED\nPIV_FUNCTION_NOT_SUPPORTED"
      }
    ]
  }
]