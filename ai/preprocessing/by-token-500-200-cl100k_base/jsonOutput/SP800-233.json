[
  "# Abstract\nThe service mesh has become the de facto application services infrastructure for cloud-native applications. It enables the various runtime functions of an application through proxies that form the data plane of the service mesh. Depending on the distribution of the network layer functions and the granularity of association of the proxies to individual services and computing nodes, different proxy models or data plane architectures have emerged. This document describes a threat profile for each of the data plane architectures with a detailed threat analysis to make recommendations on their applicability for cloud-native applications with different security risk profiles.\n\n# Executive Summary\nA centralized infrastructure called a service mesh can provide run-time services for cloud-native applications that consist of multiple loosely coupled components called microservices. These services include secure communication, service discovery, resiliency, and authorization of application communication. These services are mainly provided through proxies that form the data plane of the service mesh, which is the layer that handles application traffic at runtime and enforces policy.\n\nThe functions that the proxies provide can be broadly categorized into two groups based on the Open Systems Interconnection (OSI) model's network layer to which those functions pertain: Layer 4 (\"L4\") and Layer 7 (\"L7\"). In most service mesh deployments in production environments today, all proxy functions that provide services in both L4 and L7 layers are packed into a single proxy that is assigned to a single microservice. This service mesh proxy model is called a sidecar proxy model since the proxy is not only associated with a single service but is implemented to execute in the same network space as the service.\n\nHowever, performance and resource considerations have led to the exploration of alternate proxy models that involve splitting L4 and L7 functions into different proxies and the association or assignments of these proxies to either a single service or a group of services. This enables the proxies to be implemented at different locations at the granularity of a node rather than at the level of services. Though different models are theoretically possible, this document only considers service mesh proxy models in the data plane implementation of commonly used service mesh offerings at different stages.",
  "However, performance and resource considerations have led to the exploration of alternate proxy models that involve splitting L4 and L7 functions into different proxies and the association or assignments of these proxies to either a single service or a group of services. This enables the proxies to be implemented at different locations at the granularity of a node rather than at the level of services. Though different models are theoretically possible, this document only considers service mesh proxy models in the data plane implementation of commonly used service mesh offerings at different stages.\n\nVarious potential or likely threats to proxy functions may result in different types of exploits in different proxy models. This variation is due to several factors, such as the attack surface (i.e., communication patterns to which a particular proxy is exposed), the number of clients (services) served, and the OSI layer functions that they provide (e.g., L7 functions are more complicated and likely to have more vulnerabilities than L4 functions). The two main# Contributions of this Document\n\nThe contributions of this document are the following:\n\n1. The nature of the exploits that are possible for each threat in each of the proxy models is characterized by assigning scores to the impact and likelihood of each of the threats in each of the proxy models or architectural patterns, resulting in a threat profile that is associated with each architectural pattern or proxy model of service mesh.\n\n2. Each threat profile has an inherent set of security trade-offs at an architectural level. The implications of these trade-offs in meeting the requirements associated with the security risk profiles of different cloud-native applications are analyzed to make a broad set of recommendations toward specific architectural patterns that are appropriate for applications with different security risk profiles.\n\n## 1. Introduction\n\n\"Cloud-native\" refers to an architectural philosophy for building scalable, resilient systems that are designed to leverage the advantages of cloud computing environments. Cloud-native applications can run both on-premises and in public cloud platforms and are normally built using agile development methodologies, such as continuous integration/continuous delivery (CI/CD). Typically, technologies such as containerization and virtual machines (VMs) are used, and resilience and fail-safe features will be built in.",
  "2. Each threat profile has an inherent set of security trade-offs at an architectural level. The implications of these trade-offs in meeting the requirements associated with the security risk profiles of different cloud-native applications are analyzed to make a broad set of recommendations toward specific architectural patterns that are appropriate for applications with different security risk profiles.\n\n## 1. Introduction\n\n\"Cloud-native\" refers to an architectural philosophy for building scalable, resilient systems that are designed to leverage the advantages of cloud computing environments. Cloud-native applications can run both on-premises and in public cloud platforms and are normally built using agile development methodologies, such as continuous integration/continuous delivery (CI/CD). Typically, technologies such as containerization and virtual machines (VMs) are used, and resilience and fail-safe features will be built in.\n\nMicroservices-based applications use an architectural approach in which the entire application is broken into loosely coupled components that can be independently updated and scaled. The implementation of microservices is enabled using containers that in turn require orchestration tools and often employ a centralized services infrastructure (e.g., service mesh) to provide all runtime application services, including network connectivity, security, resiliency, and monitoring capabilities. Microservices-based applications can be implemented and deployed as cloud-native, though they represent an independent architectural approach.\n\nThe infrastructure services or functions provided by a service mesh during application runtime are provided by entities called proxies, which constitute the data plane of the service mesh. In addition, the service mesh consists of another architectural component called the control plane, which supports the functions of the data plane through interfaces to define configurations, inject software programs, and provide security artifacts (e.g., certificates).\n\nVarious configurations for proxies are being developed and tested based on the performance and security assurance data obtained during the deployment of service mesh over the last several years. These configurations are proxy (implementation) models that are based on the OSI layer functions that they provide (described in the following paragraphs) and the granularity of association between a proxy and services. Since proxies are the predominant entities of the data plane of a service mesh, these various proxy models are also called data.# Plane Architectures",
  "The infrastructure services or functions provided by a service mesh during application runtime are provided by entities called proxies, which constitute the data plane of the service mesh. In addition, the service mesh consists of another architectural component called the control plane, which supports the functions of the data plane through interfaces to define configurations, inject software programs, and provide security artifacts (e.g., certificates).\n\nVarious configurations for proxies are being developed and tested based on the performance and security assurance data obtained during the deployment of service mesh over the last several years. These configurations are proxy (implementation) models that are based on the OSI layer functions that they provide (described in the following paragraphs) and the granularity of association between a proxy and services. Since proxies are the predominant entities of the data plane of a service mesh, these various proxy models are also called data.# Plane Architectures\n\nThe OSI model [1] is a useful abstraction for thinking about the functions required to serve an application over the network. It describes seven \"layers,\" from the physical wires that connect two machines (i.e., Layer 1 \u2013 L1, the physical layer) to the application itself (i.e., Layer 7 \u2013 L7, the application layer).\n\nLayers 3, 4, and 7 are key to facilitating communication between cloud-native applications (e.g., two microservices making Hypertext Transfer Protocol (HTTP)/REST calls to each other):\n\n- **Layer 3 (\"L3\")**, the network layer, facilitates baseline connectivity between two workloads or service instances. In nearly all cases, the Internet Protocol (IP) is used as the L3 implementation.\n- **Layer 4 (\"L4\")**, the transport layer, facilitates the reliable transmission of data between workloads on the network. It also includes capabilities like encryption. Transport Control Protocol (TCP) and User Datagram Protocol (UDP) are commonly used L4 implementations, where transport layer security (TLS) provides encryption.\n- **Layer 7 (\"L7\")**, the application layer, is where protocols like HTTP operate \u2013 in user applications themselves (e.g., HTTP web servers, Secure Shell (SSH) servers).\n\nWith respect to the layers above, a service mesh's proxies in cloud-native environments are:",
  "- **Layer 3 (\"L3\")**, the network layer, facilitates baseline connectivity between two workloads or service instances. In nearly all cases, the Internet Protocol (IP) is used as the L3 implementation.\n- **Layer 4 (\"L4\")**, the transport layer, facilitates the reliable transmission of data between workloads on the network. It also includes capabilities like encryption. Transport Control Protocol (TCP) and User Datagram Protocol (UDP) are commonly used L4 implementations, where transport layer security (TLS) provides encryption.\n- **Layer 7 (\"L7\")**, the application layer, is where protocols like HTTP operate \u2013 in user applications themselves (e.g., HTTP web servers, Secure Shell (SSH) servers).\n\nWith respect to the layers above, a service mesh's proxies in cloud-native environments are:\n\n- Agnostic to L3 if the microservice instances can communicate at L3 and the proxy can communicate with the mesh's control plane.\n- At Layer 4 (L4): Connection establishment, management, and resiliency (e.g., connection-level retries); TLS (encryption in transit); application identity, authentication, and authorization; access policy based on network 5-tuple (e.g., source IP address and port, destination IP address and port, and transport protocol).\n- At Layer 7 (L7): Service discovery, request-level resiliency (e.g., retries, circuit breakers, outlier detection); and application observability.\n\n## 1.1. L4 and L7 Functions of Proxies\n\nThere are two key aspects of proxy models:\n\n1. **Proxy functions**: The functions that a service mesh's proxies provide can be broadly categorized into two groups based on the OSI model's layer [1] to which those functions pertain: Layer 4 (\"L4\") and Layer 7 (\"L7\"). The associated proxies are called L4 proxies and L7 proxies, respectively. The study of proxy functions requires an understanding of the OSI's L4 and L7 layers from the network stack point of view and the specific network services provided by those layers.",
  "## 1.1. L4 and L7 Functions of Proxies\n\nThere are two key aspects of proxy models:\n\n1. **Proxy functions**: The functions that a service mesh's proxies provide can be broadly categorized into two groups based on the OSI model's layer [1] to which those functions pertain: Layer 4 (\"L4\") and Layer 7 (\"L7\"). The associated proxies are called L4 proxies and L7 proxies, respectively. The study of proxy functions requires an understanding of the OSI's L4 and L7 layers from the network stack point of view and the specific network services provided by those layers.\n\n2. **Granularity of association**: A proxy can be associated with a single microservice instance, an entire service, or deployed to provide functions for a group of services. Depending on the nature of this association, a proxy may execute within the same network space as the service, at the same node where the group of services to which it caters run, or in an independent node dedicated to proxies where no application services run.\n\n## 1.2. Objective and Target Audience\n\nThis document will give a brief overview of the four data plane architectures.# (proxy models)\n\nbeing pursued by a range of service mesh implementations today. It will also provide threat profiles for different proxy models with a detailed threat analysis that involves 10 types of common threats. These threat profiles will inform recommendations regarding their applicability (usage) for cloud-native applications with different security risk profiles.\n\n## The target audience for these recommendations includes:\n\n- Infrastructure owners, platform/infrastructure engineers, and their team leaders who build and deploy secure runtime environments for applications by choosing the right architecture for their environment given the risk factors of the applications that they will be running and the resulting security risk profile.\n- Personnel in charge of infrastructure operations who need to be familiar with the various building blocks of the proxy models or data plane architectures (and their associated functions and interactions) to troubleshoot in the event of performance (i.e., availability) and security issues.\n\n## 1.3. Relationship to Other NIST Documents",
  "being pursued by a range of service mesh implementations today. It will also provide threat profiles for different proxy models with a detailed threat analysis that involves 10 types of common threats. These threat profiles will inform recommendations regarding their applicability (usage) for cloud-native applications with different security risk profiles.\n\n## The target audience for these recommendations includes:\n\n- Infrastructure owners, platform/infrastructure engineers, and their team leaders who build and deploy secure runtime environments for applications by choosing the right architecture for their environment given the risk factors of the applications that they will be running and the resulting security risk profile.\n- Personnel in charge of infrastructure operations who need to be familiar with the various building blocks of the proxy models or data plane architectures (and their associated functions and interactions) to troubleshoot in the event of performance (i.e., availability) and security issues.\n\n## 1.3. Relationship to Other NIST Documents\n\nThis document can be used as an adjunct to the NIST Special Publication (SP) 800-204 series of publications [2][3][4][5], which offer guidance on providing security assurance for cloud-native applications integrated with a service mesh from the following perspectives: strategy, configuration, and development/deployment paradigm. However, this document focuses on the various configurations of the application service infrastructure elements (i.e., proxies) and the resulting architectures (i.e., data plane architecture of the service mesh) that have different security implications for the application that is hosted under each of these configurations.\n\n## 1.4. Document Structure\n\nThis document is organized as follows:",
  "## 1.3. Relationship to Other NIST Documents\n\nThis document can be used as an adjunct to the NIST Special Publication (SP) 800-204 series of publications [2][3][4][5], which offer guidance on providing security assurance for cloud-native applications integrated with a service mesh from the following perspectives: strategy, configuration, and development/deployment paradigm. However, this document focuses on the various configurations of the application service infrastructure elements (i.e., proxies) and the resulting architectures (i.e., data plane architecture of the service mesh) that have different security implications for the application that is hosted under each of these configurations.\n\n## 1.4. Document Structure\n\nThis document is organized as follows:\n\n- Section 2 lists the typical capabilities of the data plane of the service mesh under three headings (i.e., security, observability, and traffic management) and the corresponding L4 and L7 proxy functions implemented under those capabilities.\n- Section 3 provides a brief overview of the four proxy models or data plane architectures.\n- Section 4 discusses proxy model threat scenarios and the threat analysis methodology adopted in this document for evaluating the threat profile score for the four data plane architectures.\n- Section 5 provides a detailed threat analysis for the four data plane architectures by assigning scores to the impact and likelihood factors associated with each threat and using them to arrive at an overall threat score.\n- Section 0 provides recommendations on the applicability (usage) of each of the four data plane architectures for cloud-native applications of different security risk profiles based on their security requirements.\n- Section 0 provides the summary and conclusions.```markdown\n# 2. Typical Service Mesh Data Plane Capabilities and Associated Proxy Functions\n\nThis document's methodology examines the security trade-offs of the proxy models (i.e., data plane architectures) and the implementations of the various capabilities that result as L4 and L7 functions in proxies. Determining the totality of proxy functions requires an analysis of each capability, the category it falls under, and the granularity of the function that it provides at L4 and L7 levels.",
  "This document's methodology examines the security trade-offs of the proxy models (i.e., data plane architectures) and the implementations of the various capabilities that result as L4 and L7 functions in proxies. Determining the totality of proxy functions requires an analysis of each capability, the category it falls under, and the granularity of the function that it provides at L4 and L7 levels.\n\nL7 functions that are carried out by proxies are much more complex than L4 functions as the latter are carried out in lower layers of the OSI stack and involve protocols such as IP and TCP. For example, parsing a TCP stream for L4 functionality simply requires decoding a fixed set of bytes as integers (i.e., the packet header), while handling HTTP requests for L7 functionality requires decoding HTTP headers, including complex string parsing and compression with variable amounts of data. Additionally, the data dealt with in an L7 function are user-supplied (i.e., can be controlled by an attacker), while the TCP data at L4 are typically system-supplied as part of routing a request to the infrastructure. This means that there is less room to embed malicious data without breaking the system itself. In one case study, the proxy Envoy is used as the data plane by several service mesh implementations. Historically, the majority of Envoy vulnerabilities have been in L7 function-related code compared to L4 function-related code.\n\n# 3. Proxy Models (Data Plane Architectures) in Service Mesh Implementations\n\nDifferent data plane architectures or proxy models in the service mesh are consequences of the following parameters:\n\n- Delineation of L4 and L7 functions\n- Nature of association of a proxy to service instances (1:1 or 1:N)\n\nThis section provides an overview of the building blocks of different data plane architectures to facilitate the threat analysis in Sec. 5. Iterations of the different architectures were driven by the adoption of mesh across a variety of use cases, necessitating trade-offs in terms of performance, reliability, and security for organizations with different application risk profiles. In spite of these different operating scenarios, the sidecar model has been the primary method for delivering service mesh capabilities.\n\nThe various alternate data plane architectures, including the one with widespread deployment at present, are:",
  "# 3. Proxy Models (Data Plane Architectures) in Service Mesh Implementations\n\nDifferent data plane architectures or proxy models in the service mesh are consequences of the following parameters:\n\n- Delineation of L4 and L7 functions\n- Nature of association of a proxy to service instances (1:1 or 1:N)\n\nThis section provides an overview of the building blocks of different data plane architectures to facilitate the threat analysis in Sec. 5. Iterations of the different architectures were driven by the adoption of mesh across a variety of use cases, necessitating trade-offs in terms of performance, reliability, and security for organizations with different application risk profiles. In spite of these different operating scenarios, the sidecar model has been the primary method for delivering service mesh capabilities.\n\nThe various alternate data plane architectures, including the one with widespread deployment at present, are:\n\n- L4 and L7 per Service Instance (DPA-1) \u2013 Sidecar model\n- Shared L4 \u2013 L7 per Service (DPA-2) \u2013 A shared L4 proxy per node (i.e., shared among all applications that execute on the same physical host) with L7 proxies dedicated per service account or namespace.\n- Shared L4 and L7 Model (DPA-3) \u2013 A shared L4 and L7 proxy per node (i.e., shared among all applications on the same physical host)\n- L4 and L7 as Part of the Application (gRPC proxy-less model [14]) (DPA-4) \u2013 Both L4 and L7 functions are part of the application server itself (e.g., gRPC, Java Spring)\n```# CURRENT_PAGE_RAW_OCR_TEXT\n\n## 3.1. L4 and L7 Proxy per Service Instance (DPA-1) \u2013 Sidecar Model",
  "- L4 and L7 per Service Instance (DPA-1) \u2013 Sidecar model\n- Shared L4 \u2013 L7 per Service (DPA-2) \u2013 A shared L4 proxy per node (i.e., shared among all applications that execute on the same physical host) with L7 proxies dedicated per service account or namespace.\n- Shared L4 and L7 Model (DPA-3) \u2013 A shared L4 and L7 proxy per node (i.e., shared among all applications on the same physical host)\n- L4 and L7 as Part of the Application (gRPC proxy-less model [14]) (DPA-4) \u2013 Both L4 and L7 functions are part of the application server itself (e.g., gRPC, Java Spring)\n```# CURRENT_PAGE_RAW_OCR_TEXT\n\n## 3.1. L4 and L7 Proxy per Service Instance (DPA-1) \u2013 Sidecar Model\n\nThe most common service mesh data plane architecture is called the \"sidecar model\" because the proxy sits beside every instance of every service. The model dedicates a proxy that has the capability to implement both L4 and L7 functions for each application (service) instance. In its security model, the proxy holds one identity for the service it is deployed beside and resides in the same trust domain as the application (e.g., in Kubernetes, it exists in the same pod; on a virtual machine (VM), it is deployed in the same VM as the service itself). The service and the proxy communicate with each other through the \"local host interface\" rather than through a network socket. However, the proxy presents a larger attack surface than the service because it implements complex L7 functions. An example of a data plane architecture is one that is implemented in the Istio service mesh with an envoy proxy deployed per pod that performs both L4 and L7 functions.\n\n## 3.2. Shared L4 \u2013 L7 per Service Model (DPA-2)",
  "## 3.2. Shared L4 \u2013 L7 per Service Model (DPA-2)\n\nIn Shared L4 \u2013 L7 per Service architecture, there is a shared L4 proxy per node (i.e., shared among all service instances that execute on the same physical host) with L7 proxies dedicated per service account. A variation in this architecture is to dedicate an L7 proxy for an entire namespace. This is not desirable from a security viewpoint for the same reasons that shared service accounts for an entire namespace are not recommended. Hence, it is not considered for threat analysis in this document. An example of the implementation of this data plane architecture is Istio's \"ambient mode\", where the per node L4 proxy is called a Ztunnel proxy, and the per service account L7 proxy is called a Waypoint proxy. It is to be noted that not every service needs an L7 proxy but when an L7 proxy is installed, it is dedicated to a single service.\n\n## 3.3. Shared L4 and L7 Model (DPA-3)\n\nIn Shared L4 and L7 architecture, the L4 and L7 functions are implemented on a per node basis. There is a shared L7 proxy per node, i.e., shared among all service instances that execute on the same physical host and provides L7 functions for all services in that node. L4 functions can be implemented by the L7 data plane, like the sidecar model (DPA-1) but shared across all applications on the node rather than dedicated one-per-app-instance. However, in some instances, L4 functions (e.g., traffic routing) can be performed by in-kernel programs (e.g., Extended Berkeley Packet Filter (eBPF) programs) instead of by a mesh proxy. An example of this data plane architecture is the Cilium service mesh, which deploys the Envoy proxy as an L7.```markdown\n# Proxy Based on its CiliumEnvoyConfig Specification [8][9][12]\n\n## 3.4 L4 and L7 as Part of the Application Model (DPA-4)",
  "## 3.4 L4 and L7 as Part of the Application Model (DPA-4)\n\nL4 and L7 Part of the Application Model is a data plane architecture that does not have any preinstalled proxies. Instead, the service mesh control plane dynamically configures access to proxy functions using a set of discovery APIs collectively known as xDS APIs. The gRPC client and server libraries for applications provide extensive support for the xDS APIs. Leveraging this feature, the service mesh control plane can program L4 and L7 functions into this library in the service container. These gRPC libraries can then provide L4 and L7 functionality (in general, all policy enforcements) to the workloads or service instances with which they are integrated, thus replicating the exact services that the L4 and L7 proxies provide to those workloads [14].\n\n# 4. Data Plane Architecture Threat Scenarios and Analysis Methodology\n\nThe threat scenario considers a service mesh deployed in a Kubernetes cluster with the assumption that no human can directly access the cluster, achieved via k8s role-based access control (RBAC). The only interaction with the cluster is via a continuous integration/continuous delivery (CI/CD) system-controlled declarative configuration in a version-controlled repository with a multi-step approval process to change that configuration, including the approval of each change by one other human at minimum.\n\nThis scenario starts by identifying access by external threat actors, internal threat actors, and malicious co-tenants.\n\n## External Threat Actors Include:\n\n- Compromised workload (application) container (e.g., via a supply chain attack)\n- Compromised node L4 proxy or container network interface (CNI)\n- Compromised node L7 proxy\n- Compromised node with limited privileged access (e.g., a container breakout)\n- Root compromise of node (e.g., a container breakout chained with the exploitation of a privilege escalation vulnerability)\n- Network access to the Kubernetes API server\n\n## Internal Threat Actors Include:",
  "This scenario starts by identifying access by external threat actors, internal threat actors, and malicious co-tenants.\n\n## External Threat Actors Include:\n\n- Compromised workload (application) container (e.g., via a supply chain attack)\n- Compromised node L4 proxy or container network interface (CNI)\n- Compromised node L7 proxy\n- Compromised node with limited privileged access (e.g., a container breakout)\n- Root compromise of node (e.g., a container breakout chained with the exploitation of a privilege escalation vulnerability)\n- Network access to the Kubernetes API server\n\n## Internal Threat Actors Include:\n\n- Cluster administrators who have wide-ranging rights to view the cluster and approve changes to the version-controlled repository and may even have direct access to the Kubernetes cluster (e.g., via a break-glass debugging account; such super-accounts should generate detailed audit records of their usage)\n- Application developers who can build images and approve configurations that go into the cluster.\n- Infrastructure engineers who have permission to deploy and configure the mesh gated by the version-controlled repository's approval process.\n- Compromised network infrastructure between nodes (e.g., unencrypted cross-data center communication)\n\nFinally, malicious co-tenants - In general, k8s is not a hard multi-tenant system (i.e., one where tenants do not trust each other), and isolating tenants from each other with stronger boundaries is recommended. In this context, a malicious co-tenant would fall...\n```# CURRENT PAGE RAW OCR TEXT\n\ninto one of the internal threat actor categories above. In this context, consider the following threats in an environment as they relate to the service mesh:\n\n1. Compromised L4 proxy\n2. Compromise of the application container\n3. Compromise of business data\n4. Compromised L7 proxy\n5. Compromised shared L7 Proxy\n6. Outdated client libraries in applications\n7. Denial of service (DoS)\n8. Resource consumption\n9. Privileged L4 Proxy\n10. Bypassing traffic interception\n\n## 4.1. Threat Analysis Methodology",
  "Finally, malicious co-tenants - In general, k8s is not a hard multi-tenant system (i.e., one where tenants do not trust each other), and isolating tenants from each other with stronger boundaries is recommended. In this context, a malicious co-tenant would fall...\n```# CURRENT PAGE RAW OCR TEXT\n\ninto one of the internal threat actor categories above. In this context, consider the following threats in an environment as they relate to the service mesh:\n\n1. Compromised L4 proxy\n2. Compromise of the application container\n3. Compromise of business data\n4. Compromised L7 proxy\n5. Compromised shared L7 Proxy\n6. Outdated client libraries in applications\n7. Denial of service (DoS)\n8. Resource consumption\n9. Privileged L4 Proxy\n10. Bypassing traffic interception\n\n## 4.1. Threat Analysis Methodology\n\nThe threat analysis methodology begins by identifying 10 potential threats to the components that make up the four architectural patterns for the proxy model or data plane architecture. The methodology then describes how the functionality of each component of the architecture is adversely affected by each threat and rates the impact and likelihood of their occurrence, justifying each rating. There are three values for the ratings: low, medium, and high. The values assigned to these ratings are relative to other data plane architectures and are not absolute values based on a metric. For example, assigning a rating value of \"high\" to the likelihood parameter for a threat does not imply that the threat is highly likely in all situations. Rather, it means that the threat is most likely to be executed against that architecture relative to the other architectures under discussion.",
  "## 4.1. Threat Analysis Methodology\n\nThe threat analysis methodology begins by identifying 10 potential threats to the components that make up the four architectural patterns for the proxy model or data plane architecture. The methodology then describes how the functionality of each component of the architecture is adversely affected by each threat and rates the impact and likelihood of their occurrence, justifying each rating. There are three values for the ratings: low, medium, and high. The values assigned to these ratings are relative to other data plane architectures and are not absolute values based on a metric. For example, assigning a rating value of \"high\" to the likelihood parameter for a threat does not imply that the threat is highly likely in all situations. Rather, it means that the threat is most likely to be executed against that architecture relative to the other architectures under discussion.\n\nThe impact (I) of the exploitation of each threat is then evaluated along with the likelihood (L) of that threat being exploited. For both parameters, there is a rating of low, medium, or high, which are translated to numeric scores of 1, 2, and 3, respectively. Multiplying I * L yields an indication of how important that threat is and the necessity to mitigate that threat relative to other architectures under discussion. Summing up the values of this indicator for all 10 potential threats provides an indication of the threat profile for that architectural pattern. Threats whose impact and likelihood are the same irrespective of the architecture (i.e., the threats are agnostic to the architecture) are assigned a relative score of 1 for impact and 1 for likelihood.\n\n## 5. Detailed Threat Analysis for Data Plane Architectures\n\nThis section considers potential targeted threats to L4 and L7 proxy functions or the libraries that implement the associated functions, the relevant proxy function that is impacted, the degree of impact, and the likelihood of the threat occurring for each of the data plane architectures (see Sec. 3.1 to 3.4).\n\n### 5.1. Threat Analysis for L4 and L7 Proxy per Service Instance (DPA-1) \u2013 Sidecar Model\n\nThe threats to the data plane of the service mesh are denoted using the mnemonic TR-x, where TR stands for threat, and x stands for the threat sequence number.# 5.1.1. Compromised L4 Proxy (TR-1)",
  "## 5. Detailed Threat Analysis for Data Plane Architectures\n\nThis section considers potential targeted threats to L4 and L7 proxy functions or the libraries that implement the associated functions, the relevant proxy function that is impacted, the degree of impact, and the likelihood of the threat occurring for each of the data plane architectures (see Sec. 3.1 to 3.4).\n\n### 5.1. Threat Analysis for L4 and L7 Proxy per Service Instance (DPA-1) \u2013 Sidecar Model\n\nThe threats to the data plane of the service mesh are denoted using the mnemonic TR-x, where TR stands for threat, and x stands for the threat sequence number.# 5.1.1. Compromised L4 Proxy (TR-1)\n\n**Threat Description:** A compromised L4 proxy (or L4 functions in the case of sidecar proxy with combined L4 and L7 functions) leads to leaked identities for every workload (service) running on the node.\n\n**Proxy Function Impacted:** Sidecar proxies negotiate mTLS connections (for communicating with any other service) on behalf of the single workload with which it is associated. In order to compromise key material and identity documents (i.e., threat targets) for multiple workloads, multiple proxy (sidecar) instances would need to be compromised.\n\n**Impact Score = 1:** Because of the nature of impact discussed above (i.e., single workload/single identity affected), this threat is assigned an impact score of 1.\n\n**Likelihood Score = 2:** Code relating to L7 functions is present to be exploited if it can be triggered. In a pure L4 proxying case, it should not be triggerable, but this relies on correct configuration from users and the service mesh implementation.\n\n# 5.1.2. Compromised Application Container (TR-2)\n\n**Threat Description:** A compromised application container (e.g., via a supply chain attack during the development phase) leads to a takeover of the identity associated with that application.\n\n**Proxy Function Impacted:** Proxies run in the same network space (i.e., same pod in Kubernetes environment) as the application container, meaning that a compromise of the application container that hosts the service instance can easily lead to a compromise of any key material (e.g., full access to key material pertaining to the identity of the service) possessed by the proxy.",
  "**Likelihood Score = 2:** Code relating to L7 functions is present to be exploited if it can be triggered. In a pure L4 proxying case, it should not be triggerable, but this relies on correct configuration from users and the service mesh implementation.\n\n# 5.1.2. Compromised Application Container (TR-2)\n\n**Threat Description:** A compromised application container (e.g., via a supply chain attack during the development phase) leads to a takeover of the identity associated with that application.\n\n**Proxy Function Impacted:** Proxies run in the same network space (i.e., same pod in Kubernetes environment) as the application container, meaning that a compromise of the application container that hosts the service instance can easily lead to a compromise of any key material (e.g., full access to key material pertaining to the identity of the service) possessed by the proxy.\n\n**Impact Score = 2:** Because of the nature of impact discussed above (i.e., single workload/single identity affected), this threat is assigned an impact score of 2. Even though only a single identity is compromised, like TR-1, this has a higher impact score as the application itself must be updated. A compromised proxy can be remediated without requiring the application itself to be updated, so there is a higher chance that a central team can successfully remediate a compromise without involving application teams.\n\n**Likelihood Score = 1:** The likelihood score is the same, regardless of architecture.\n\n# 5.1.3. Compromise of Business Data (TR-3)\n\n**Threat Description:** A compromised identity is used to pivot through the infrastructure in order to compromise the confidentiality, integrity, or availability of business data.\n\n**Proxy Function Impacted and Impact Score (= 1) and Likelihood Score (= 1):** The scores are the same, regardless of architecture. This is the fundamental risk of identity-based policy and why the principle of least privilege (PoLP) should be practiced. The telemetry provided by the service mesh (regardless of architecture) is invaluable for understanding communications in a system and creating accurate access policies.\n\n# 5.1.4. Compromised L7 Proxy (TR-4)\n\n**Threat Description:** There is a vulnerability in the L7 processing stack of the service mesh proxy.# CURRENT_PAGE_RAW_OCR_TEXT",
  "**Likelihood Score = 1:** The likelihood score is the same, regardless of architecture.\n\n# 5.1.3. Compromise of Business Data (TR-3)\n\n**Threat Description:** A compromised identity is used to pivot through the infrastructure in order to compromise the confidentiality, integrity, or availability of business data.\n\n**Proxy Function Impacted and Impact Score (= 1) and Likelihood Score (= 1):** The scores are the same, regardless of architecture. This is the fundamental risk of identity-based policy and why the principle of least privilege (PoLP) should be practiced. The telemetry provided by the service mesh (regardless of architecture) is invaluable for understanding communications in a system and creating accurate access policies.\n\n# 5.1.4. Compromised L7 Proxy (TR-4)\n\n**Threat Description:** There is a vulnerability in the L7 processing stack of the service mesh proxy.# CURRENT_PAGE_RAW_OCR_TEXT\n\nSince L7 processing is inherently more complex, there is a higher probability for vulnerabilities to arise in this part of the stack, as supported by historical Common Vulnerabilities and Exposures (CVE) data.\n\n## Proxy Function Impacted\n\nThere is no separation between L4 and L7 processing. Although any exploitable vulnerability in a sidecar proxy can lead to the compromise of all identities in the mesh, this would involve more individual proxy instances being compromised, and it may be more difficult for an attacker to accomplish this feat undetected.\n\n### Impact Score = 1\n\nA single workload is impacted (e.g., leaking credentials, becoming unavailable due to a denial-of-service attack). The same exploit could be used against all sidecars in the mesh with applications opting in to the L7 behavior, resulting in a compromise of all identities (Impact 3). In practice, this requires many more events than any other architecture and increases the likelihood of detecting and responding to the event in a timely manner.\n\n### Likelihood Score = 1\n\nA full L7 capability is available in the proxy, meaning that a relatively large attack surface is exposed. In practice for the service mesh use case, however, the HTTP processing is most likely targeted. If the application is using L7 mesh capabilities, they would be vulnerable to exploit.\n\n## 5.1.5. Compromise of Shared L7 Proxy (TR-5)\n\n### Threat Description",
  "### Impact Score = 1\n\nA single workload is impacted (e.g., leaking credentials, becoming unavailable due to a denial-of-service attack). The same exploit could be used against all sidecars in the mesh with applications opting in to the L7 behavior, resulting in a compromise of all identities (Impact 3). In practice, this requires many more events than any other architecture and increases the likelihood of detecting and responding to the event in a timely manner.\n\n### Likelihood Score = 1\n\nA full L7 capability is available in the proxy, meaning that a relatively large attack surface is exposed. In practice for the service mesh use case, however, the HTTP processing is most likely targeted. If the application is using L7 mesh capabilities, they would be vulnerable to exploit.\n\n## 5.1.5. Compromise of Shared L7 Proxy (TR-5)\n\n### Threat Description\n\nA co-tenant exploits an L7 traffic processing vulnerability in a shared proxy, which affects the confidentiality, integrity, or availability of traffic to and from another workload running on the same node.\n\n### Proxy Function Impacted\n\nBecause the proxy is dedicated per application, the impact on availability is limited to the resource constraints imposed by the scheduling system (e.g., Kubernetes). Confidentiality is impacted the same as if another application itself is compromised (i.e., containers provide some guarantee; micro-VMs provide a stronger degree of isolation; full-blown VMs are the strongest).\n\n### Impact Score = 1\n\nFor noisy neighbors (i.e., other L7 proxies on the same host that are compromised), the impact is limited by the underlying scheduling and resource constraint system (e.g., k8s, VM sizing). The following are identical across all architectures: for a shared ingress gateway, all services exposed on that gateway would be impacted (Impact 2); for a shared egress gateway, all services that utilize the egress gateway would be impacted (Impact 3). Typically, only a single deployment of egress gateways is used.\n\n### Likelihood Score = 1",
  "### Proxy Function Impacted\n\nBecause the proxy is dedicated per application, the impact on availability is limited to the resource constraints imposed by the scheduling system (e.g., Kubernetes). Confidentiality is impacted the same as if another application itself is compromised (i.e., containers provide some guarantee; micro-VMs provide a stronger degree of isolation; full-blown VMs are the strongest).\n\n### Impact Score = 1\n\nFor noisy neighbors (i.e., other L7 proxies on the same host that are compromised), the impact is limited by the underlying scheduling and resource constraint system (e.g., k8s, VM sizing). The following are identical across all architectures: for a shared ingress gateway, all services exposed on that gateway would be impacted (Impact 2); for a shared egress gateway, all services that utilize the egress gateway would be impacted (Impact 3). Typically, only a single deployment of egress gateways is used.\n\n### Likelihood Score = 1\n\nThe sidecar itself is not a shared proxy. By its nature, it is dedicated to an individual application. In this case, TR-5 refers to noisy neighbors, other proxies on the same node that cause a denial of service (DoS), and shared ingress or egress gateways. Noisy neighbors are mitigated based on the degree of isolation of the host (i.e., container versus micro-VM versus VM). The likelihood of exploiting a shared L7 ingress or egress...# CURRENT_PAGE_RAW_OCR_TEXT\n\n## gateway is the same across all architectures.\n\n### 5.1.6. Outdated Client Libraries in Applications (TR-6)\n\n**Threat Description:** Client libraries are not updated frequently or consistently across the estate of microservices, leading to potential vulnerabilities and weaknesses that can be exploited.\n\n**Proxy Function Impacted:** The proxy's infrastructure code is decoupled from its application code.\n\n**Impact Score = 1:** The mesh infrastructure is separate from the application itself and, therefore, not directly impacted by application vulnerabilities. Instead, a compromised application would use the functioning mesh to hijack the application's identity. Some application vulnerabilities can be mitigated via policies enforced by the mesh (e.g., mesh-enforced web application firewall (WAF) policy can help mitigate an application vulnerability like Log4j while the organization is patching applications).",
  "## gateway is the same across all architectures.\n\n### 5.1.6. Outdated Client Libraries in Applications (TR-6)\n\n**Threat Description:** Client libraries are not updated frequently or consistently across the estate of microservices, leading to potential vulnerabilities and weaknesses that can be exploited.\n\n**Proxy Function Impacted:** The proxy's infrastructure code is decoupled from its application code.\n\n**Impact Score = 1:** The mesh infrastructure is separate from the application itself and, therefore, not directly impacted by application vulnerabilities. Instead, a compromised application would use the functioning mesh to hijack the application's identity. Some application vulnerabilities can be mitigated via policies enforced by the mesh (e.g., mesh-enforced web application firewall (WAF) policy can help mitigate an application vulnerability like Log4j while the organization is patching applications).\n\n**Likelihood Score = 1:** The likelihood is the same, regardless of architecture.\n\n### 5.1.7. Denial of Service (TR-7)\n\n**Threat Description:** There is a conventional DoS threat.\n\n**Proxy Function Impacted:** Because the proxy is a per app instance, a DoS needs to be executed per app. Because the proxy shares resources with the application, a DoS on the mesh data plane directly competes for resources with the app instance itself. The overall blast radius of the DoS is as strong as the underlying isolation mechanism that protects workloads (i.e., pods) from each other (e.g., VMs, micro-VMs, containers).\n\n**Impact Score = 1:** There is a single instance of a single application.\n\n**Likelihood Score = 1:** L4 and L7 code may be exploited. However, the attack must be executed across each instance of the target. There is not a central resource to target to achieve a DoS other than a shared ingress gateway that is identical across all architectures under discussion.\n\n### 5.1.8. Resource Consumption (TR-8)\n\n**Threat Description:** There is overall resource consumption by the data plane of the service mesh infrastructure.",
  "**Impact Score = 1:** There is a single instance of a single application.\n\n**Likelihood Score = 1:** L4 and L7 code may be exploited. However, the attack must be executed across each instance of the target. There is not a central resource to target to achieve a DoS other than a shared ingress gateway that is identical across all architectures under discussion.\n\n### 5.1.8. Resource Consumption (TR-8)\n\n**Threat Description:** There is overall resource consumption by the data plane of the service mesh infrastructure.\n\n**Proxy Function Impacted:** Because sidecars are a separate process and dedicated per application, they have the worst overall resource consumption. Configuration that is identical across all applications must be held by the data plane per application and cannot be shared. The static overhead of the sidecar data plane implementation itself (e.g., constant Random Access Memory (RAM) usage, constant Central Processing Unit (CPU) overhead) is duplicated per application instance and cannot be amortized over all applications on the node. In part, this isolation is what allows sidecars to have lower impact and likelihood across many of the other threats identified here.\n\n**Impact Score = 3:** Sidecars will consume the most resources out of all available options, even in well-configured environments.\n\n**Likelihood Score = 3:** It is challenging to configure sidecars correctly to minimize configuration.```markdown\n# CURRENT_PAGE_RAW_OCR_TEXT\n\nand reduce overhead. While some specific implementations do better than others due to engineer trade-offs (e.g., lazily loading configuration the first time that an application needs it versus eagerly pushing all configuration ahead of use), it is a more common situation where the most resource utilization occurs with a sidecar architecture.\n\n## 5.1.9. Privileged L4 Proxy (TR-9)\n\n**Threat Description:** A service mesh implementation requires an L4 component (e.g., deployed as a DaemonSet on a Kubernetes cluster) to run with an overprivileged security context (e.g., Privileged Pod).",
  "**Impact Score = 3:** Sidecars will consume the most resources out of all available options, even in well-configured environments.\n\n**Likelihood Score = 3:** It is challenging to configure sidecars correctly to minimize configuration.```markdown\n# CURRENT_PAGE_RAW_OCR_TEXT\n\nand reduce overhead. While some specific implementations do better than others due to engineer trade-offs (e.g., lazily loading configuration the first time that an application needs it versus eagerly pushing all configuration ahead of use), it is a more common situation where the most resource utilization occurs with a sidecar architecture.\n\n## 5.1.9. Privileged L4 Proxy (TR-9)\n\n**Threat Description:** A service mesh implementation requires an L4 component (e.g., deployed as a DaemonSet on a Kubernetes cluster) to run with an overprivileged security context (e.g., Privileged Pod).\n\n**Proxy Function Impacted & Impact Score (= 1) and Likelihood Score (= 1):** The impact and likelihood are the same, regardless of architecture. In a per-node case, this is usually encapsulated as a CNI provider that runs in a privileged context by default. In a sidecar case, privilege is only needed at startup to establish traffic interception rules. Depending on the implementation (e.g., Kubernetes init containers), this can ensure that the privileged user is not run alongside the application but only during initialization. In all cases, Kubernetes-defined CAP_NET_ADMIN is typically the only privilege required for mesh data plane functionality.\n\n## 5.1.10. Data Plane (Service Mesh) Bypassed (TR-10)\n\n**Threat Description:** Traffic is sent directly to a workload, bypassing mesh functionality and authorization policies.\n\n**Proxy Function Impacted:** It is the easiest to bypass of all of the available models, from the application choosing not to use a sidecar to the container-local bypasses/configurations.\n\n**Impact Score = 2:** An application is exposed without mesh security controls.\n\n**Likelihood Score = 2:** Because the proxy runs in user space in the same control groups as the application, there are a variety of attacks available that are not relevant or applicable to other implementations.\n\n## 5.1.11 Overall Threat Score\n\n**Cumulative Threat Score = 23:** This is computed based on the methodology in Sec. 4.1.",
  "## 5.1.10. Data Plane (Service Mesh) Bypassed (TR-10)\n\n**Threat Description:** Traffic is sent directly to a workload, bypassing mesh functionality and authorization policies.\n\n**Proxy Function Impacted:** It is the easiest to bypass of all of the available models, from the application choosing not to use a sidecar to the container-local bypasses/configurations.\n\n**Impact Score = 2:** An application is exposed without mesh security controls.\n\n**Likelihood Score = 2:** Because the proxy runs in user space in the same control groups as the application, there are a variety of attacks available that are not relevant or applicable to other implementations.\n\n## 5.1.11 Overall Threat Score\n\n**Cumulative Threat Score = 23:** This is computed based on the methodology in Sec. 4.1.\n\n## 5.2. Threat Analysis for Shared L4 \u2013 L7 per Service Model (DPA-2)\n\n### 5.2.1. Compromised L4 Proxy (TR-1)\n\n**Threat Description:** A compromised L4 proxy (or L4 functions in the case of sidecar proxy with combined L4 and L7 functions) leads to leaked identities for every workload (i.e., service) running on the node.\n\n**Proxy Function Impacted:** The L4 proxy has access to all of the keys associated with the workloads running on the node.\n\n**Impact Score = 3:** The identities of all of the workloads (i.e., services) on the node are compromised.\n\n**Likelihood Score = 1:** Only code that delivers L4 functions is present. This minimal code footprint and functionality present the lowest attack surface of all options.\n\n### 5.2.2. Compromised Application Container (TR-2)\n\n**Threat Description:** A compromised application container (e.g., via a supply chain attack during the development phase) leads to a takeover of the identity associated with that\n```# CURRENT PAGE RAW OCR TEXT\n\n## application.\n\n### Proxy Function Impacted:\nData plane components are not located in the same pod as workload containers, so a compromised workload does not necessarily lead to the access of keys or secrets.",
  "**Proxy Function Impacted:** The L4 proxy has access to all of the keys associated with the workloads running on the node.\n\n**Impact Score = 3:** The identities of all of the workloads (i.e., services) on the node are compromised.\n\n**Likelihood Score = 1:** Only code that delivers L4 functions is present. This minimal code footprint and functionality present the lowest attack surface of all options.\n\n### 5.2.2. Compromised Application Container (TR-2)\n\n**Threat Description:** A compromised application container (e.g., via a supply chain attack during the development phase) leads to a takeover of the identity associated with that\n```# CURRENT PAGE RAW OCR TEXT\n\n## application.\n\n### Proxy Function Impacted:\nData plane components are not located in the same pod as workload containers, so a compromised workload does not necessarily lead to the access of keys or secrets.\n\n**Impact Score = 1:** A single workload/single identity is impacted, and there is no direct access to underlying key material.\n**Likelihood Score = 2:** The likelihood is the same, regardless of architecture.\n\n### 5.2.3. Compromise of Business Data (TR-3)\n**Threat Description:** An identity is used to pivot through the infrastructure in order to compromise the confidentiality, integrity, or availability of business data.\n**Proxy Function Impacted and Impact Score (= 1) and Likelihood Score (= 1):** The impact and likelihood are the same, regardless of architecture. This is the fundamental risk of identity-based policy and why the PoLP should be practiced. The telemetry provided by the service mesh (regardless of architecture) is invaluable for understanding communication patterns in a given system and creating accurate access policies.",
  "**Impact Score = 1:** A single workload/single identity is impacted, and there is no direct access to underlying key material.\n**Likelihood Score = 2:** The likelihood is the same, regardless of architecture.\n\n### 5.2.3. Compromise of Business Data (TR-3)\n**Threat Description:** An identity is used to pivot through the infrastructure in order to compromise the confidentiality, integrity, or availability of business data.\n**Proxy Function Impacted and Impact Score (= 1) and Likelihood Score (= 1):** The impact and likelihood are the same, regardless of architecture. This is the fundamental risk of identity-based policy and why the PoLP should be practiced. The telemetry provided by the service mesh (regardless of architecture) is invaluable for understanding communication patterns in a given system and creating accurate access policies.\n\n### 5.2.4. Compromised L7 Proxy (TR-4)\n**Threat Description:** There is a vulnerability in the L7 processing stack of the service mesh proxy. As L7 processing is inherently more complex, there is a higher probability for vulnerabilities to arise in this part of the stack, as supported by historical CVE data.\n**Proxy Function Impacted:** This topology allows for \"less complex\" L4 capabilities (e.g., mTLS to be adopted with L7 processing only occurring if there is a strict requirement for it). Each service account has its own dedicated L7 proxy.\n**Impact Score = 2:** A single set of workloads is impacted (e.g., DoS) or a single identity leaked. In the event of a DoS, it is much easier to make all workloads unavailable compared to the sidecar model because the mesh's L7 processing is centralized into L7 \"middle proxies.\"\n**Likelihood Score = 1:** The likelihood is the same as sidecar (i.e., potential impact on all workloads using L7 capabilities) (see Sec. 5.1.4).",
  "### 5.2.5. Compromise of Shared L7 Proxy (TR-5)\n**Threat Description:** A co-tenant exploits an L7 traffic processing vulnerability in a shared proxy and affects the confidentiality, integrity, or availability of traffic to and from another workload that runs on the same node.\n**Proxy Function Impacted:** By limiting the per-node functionality to L4 processing, the attack surface is significantly reduced.\n**Impact Score = 1:** The application workload itself is unaffected. The proxy is a separate deployment. As long as the L7 proxy is not shared with the compromised application, there is no impact.\n**Likelihood Score = 1:** The likelihood is as likely as in TR-4 (see Sec. 5.2.4).\n\n### 5.2.6. Outdated Client Libraries in Applications (TR-6)\n**Threat Description:** Client libraries are not updated frequently or consistently across the estate of microservices, leading to potential vulnerabilities and weaknesses that can be exploited.\n**Proxy Function Impacted:** The infrastructure code is decoupled from the application code.\n**Impact Score = 1:** The impact is the same as in DPA-1 (see Sec. 5.1.6).```markdown\n# CURRENT_PAGE_RAW_OCR_TEXT\n\n## Likelihood Score = 1\nThe likelihood is the same, regardless of architecture.\n\n## 5.2.7. Denial of Service (TR-7)\n\n### Threat Description\nThere is a conventional DoS threat.\n\n### Proxy Function Impacted\nA DoS executed at L4 has the same impact as the centralized per-node model because the L4 process is centralized per node. All applications on the node are impacted. A DoS executed at L7 impacts all application instances of the target application since a set of dedicated L7 proxies is deployed per app. The number of proxies that implement L7 functionality is typically less than the number of application instances, making them an easier target for DoS than every instance of the target application.\n\n### Impact Score\n= 2: An L4 DoS would impact all application instances on the target host.",
  "## Likelihood Score = 1\nThe likelihood is the same, regardless of architecture.\n\n## 5.2.7. Denial of Service (TR-7)\n\n### Threat Description\nThere is a conventional DoS threat.\n\n### Proxy Function Impacted\nA DoS executed at L4 has the same impact as the centralized per-node model because the L4 process is centralized per node. All applications on the node are impacted. A DoS executed at L7 impacts all application instances of the target application since a set of dedicated L7 proxies is deployed per app. The number of proxies that implement L7 functionality is typically less than the number of application instances, making them an easier target for DoS than every instance of the target application.\n\n### Impact Score\n= 2: An L4 DoS would impact all application instances on the target host.\n\n### Likelihood Score\n= 2: The L4 proxy is deployed once per node, so it presents a better target for DoS than DPA-1 or DPA-4. This is mitigated somewhat by the simplified functionality of an L4 proxy compared to a combined L4 and L7 proxy. The L7 proxy is shared by multiple instances of the same application and presents an easier DoS target than the application itself. Therefore, it is more likely than the sidecar model (DPA-1).\n\n## 5.2.8. Resource Consumption (TR-8)\n\n### Threat Description\nThere is overall resource consumption by the data plane of the service mesh infrastructure.",
  "### Impact Score\n= 2: An L4 DoS would impact all application instances on the target host.\n\n### Likelihood Score\n= 2: The L4 proxy is deployed once per node, so it presents a better target for DoS than DPA-1 or DPA-4. This is mitigated somewhat by the simplified functionality of an L4 proxy compared to a combined L4 and L7 proxy. The L7 proxy is shared by multiple instances of the same application and presents an easier DoS target than the application itself. Therefore, it is more likely than the sidecar model (DPA-1).\n\n## 5.2.8. Resource Consumption (TR-8)\n\n### Threat Description\nThere is overall resource consumption by the data plane of the service mesh infrastructure.\n\n### Proxy Function Impacted\nThe shared L4 proxy typically has a much lower memory (RAM) footprint and CPU usage due to a lower rate of change of configuration, less configuration overall, and less responsibility than a combined L4 and L7 sidecar proxy (DPA-1). For the service mesh's data plane, L7 processing is typically the dominating CPU cost, followed by encryption. L7 proxies are shared by all instances of the same application and deployed as a few traditional \"reverse proxies\" per application. This results in much lower resource consumption for L7 processing than the sidecar model (DPA-1). Overall, DPA-2 uses more resources than the shared per node model (DPA-3) but substantially less than the sidecar model (DPA-1) due to reduced overhead (e.g., an application with 50 instances requires 50 sidecars but might be served with five shared L7 proxies or fewer).\n\n### Impact Score\n= 2: DPA-3 has lower consumption than sidecar and is easier to achieve but is not as low as all shared (DPA-3) or all in app (DPA-4).\n\n### Likelihood Score\n= 1: This model was intentionally designed to mitigate the resource overhead of running an entire sidecar proxy instance per service instance. Instead, the single node-level proxy receives full configurations for all services on the node, and dedicated L7 proxies receive configuration for only their service. As a result, total resource consumption is low by default.\n\n## 5.2.9 Privileged L4 Proxy (TR-9)",
  "### Impact Score\n= 2: DPA-3 has lower consumption than sidecar and is easier to achieve but is not as low as all shared (DPA-3) or all in app (DPA-4).\n\n### Likelihood Score\n= 1: This model was intentionally designed to mitigate the resource overhead of running an entire sidecar proxy instance per service instance. Instead, the single node-level proxy receives full configurations for all services on the node, and dedicated L7 proxies receive configuration for only their service. As a result, total resource consumption is low by default.\n\n## 5.2.9 Privileged L4 Proxy (TR-9)\n\n### Threat Description\nA service mesh implementation requires an L4 component (e.g., deployed as a DaemonSet on a Kubernetes cluster) to run with an overprivileged security context (e.g., Privileged Pod).\n```# Proxy Function Impacted and Impact Score (= 1) and Likelihood Score (= 1)\n\nThe impact and likelihood are the same, regardless of architecture. In the per-node case, this is usually encapsulated as a CNI provider that runs in a privileged context by default. In a sidecar case, privilege is only needed at startup to establish traffic interception rules. Depending on the implementation (e.g., Kubernetes init containers), this can ensure that the privileged user is not run alongside the application but only during initialization. In all cases, Kubernetes-defined CAP_NET_ADMIN is typically the only privilege required for mesh data plane functionality.\n\n## 5.2.10 Data Plane (Service Mesh) Bypassed (TR-10)\n\n### Threat Description\n\nTraffic is sent directly to a workload, bypassing mesh functionality and authorization policies.\n\n### Proxy Function Impacted",
  "The impact and likelihood are the same, regardless of architecture. In the per-node case, this is usually encapsulated as a CNI provider that runs in a privileged context by default. In a sidecar case, privilege is only needed at startup to establish traffic interception rules. Depending on the implementation (e.g., Kubernetes init containers), this can ensure that the privileged user is not run alongside the application but only during initialization. In all cases, Kubernetes-defined CAP_NET_ADMIN is typically the only privilege required for mesh data plane functionality.\n\n## 5.2.10 Data Plane (Service Mesh) Bypassed (TR-10)\n\n### Threat Description\n\nTraffic is sent directly to a workload, bypassing mesh functionality and authorization policies.\n\n### Proxy Function Impacted\n\nPart of the goal of moving enforcement out of the application context and into a shared context is to use stronger primitives to ensure the non-bypassability of the mesh data plane. In general, with a per-node L4 setup, sending traffic to an individual application instance on the node should not be achievable (e.g., similar to but not necessarily implemented as a host-level Virtual Private Network (VPN) that requires workloads to be part of the VPN overlay to connect). L7 proxies are deployed independently from the applications that they represent, which requires special configuration in the mesh to ensure that they are routed through and making the ability to bypass easier than other models. The impact of a missing L7 policy can be significant. Other models rely on one thing at most to ensure that traffic is directed to the correct policy enforcement point. This model relies on two things to ensure that traffic is subject to the correct policy enforcement points (PEPs): traffic interception and mesh configuration to route via middle proxies.\n\n### Impact Score\n\n= 2: An app is exposed without mesh security controls.\n\n### Likelihood Score\n\n= 2: L4 controls are designed and built to mitigate this. L7 controls are easier to bypass compared to the sidecar model.\n\n## 5.2.11 Overall Threat Score\n\nCumulative Threat Score = 22: This is computed based on the methodology in Sec. 4.1.\n\n## 5.3. Threat Analysis for Shared L4 and L7 Model (DPA-3)\n\n### 5.3.1. Compromised L4 Proxy (TR-1)\n\n#### Threat Description",
  "### Impact Score\n\n= 2: An app is exposed without mesh security controls.\n\n### Likelihood Score\n\n= 2: L4 controls are designed and built to mitigate this. L7 controls are easier to bypass compared to the sidecar model.\n\n## 5.2.11 Overall Threat Score\n\nCumulative Threat Score = 22: This is computed based on the methodology in Sec. 4.1.\n\n## 5.3. Threat Analysis for Shared L4 and L7 Model (DPA-3)\n\n### 5.3.1. Compromised L4 Proxy (TR-1)\n\n#### Threat Description\n\nA compromised L4 proxy (or L4 functions in the case of sidecar proxy with combined L4 and L7 functions) leads to leaked identities for every workload (i.e., service) running on the node.\n\n#### Proxy Function Impacted\n\nThe L4 proxy has access to all of the keys associated with the workloads running on the node.\n\n#### Impact Score\n\n= 3: All identities on the node are impacted.\n\n#### Likelihood Score\n\n= 3: L7 code may be enabled for another server that can be exploited to affect all applications on the host.\n\n### 5.3.2. Compromised Application Container (TR-2)\n\n#### Threat Description\n\nA compromised application container (e.g., via a supply chain attack) leads to unauthorized access to the application and its data.# CURRENT PAGE RAW OCR TEXT\n\n## Chain Attack During Development Phase\nA chain attack during the development phase leads to a takeover of the identity associated with that application.\n\n### Proxy Function Impacted\nData plane components are not located in the same pod as workload containers, so a compromised workload does not necessarily lead to the access of keys or secrets.\n\n- **Impact Score** = 1: A single workload/single identity is impacted, and there is no direct access to underlying key material.\n- **Likelihood Score** = 2: The likelihood is the same, regardless of architecture.\n\n## 5.3.3. Compromise of Business Data (TR-3)\n### Threat Description\nAn identity is used to pivot through the infrastructure in order to compromise the confidentiality, integrity, or availability of business data.",
  "#### Threat Description\n\nA compromised application container (e.g., via a supply chain attack) leads to unauthorized access to the application and its data.# CURRENT PAGE RAW OCR TEXT\n\n## Chain Attack During Development Phase\nA chain attack during the development phase leads to a takeover of the identity associated with that application.\n\n### Proxy Function Impacted\nData plane components are not located in the same pod as workload containers, so a compromised workload does not necessarily lead to the access of keys or secrets.\n\n- **Impact Score** = 1: A single workload/single identity is impacted, and there is no direct access to underlying key material.\n- **Likelihood Score** = 2: The likelihood is the same, regardless of architecture.\n\n## 5.3.3. Compromise of Business Data (TR-3)\n### Threat Description\nAn identity is used to pivot through the infrastructure in order to compromise the confidentiality, integrity, or availability of business data.\n\n### Proxy Function Impacted and Impact Score\n- **Impact Score** (= 1) and **Likelihood Score** (= 1): The impact and likelihood are the same, regardless of architecture. This is the fundamental risk of identity-based policy and is why the PoLP should be practiced. The telemetry provided by the service mesh (regardless of architecture) is invaluable for understanding communication patterns in a given system and creating accurate access policies.\n\n## 5.3.4. Compromised L7 Proxy (TR-4)\n### Threat Description\nThere is a vulnerability in the L7 processing stack of the service mesh proxy. As L7 processing is inherently more complex, there is a higher probability for vulnerabilities to arise in this part of the stack, as supported by historical CVE data.\n\n### Proxy Function Impacted\nThis topology allows for \"less complex\" L4 capabilities (e.g., mTLS) to be adopted with L7 processing only occurring if there is a strict requirement for it. The blast radius of a proxy compromise affects all workloads on the node. This means that its failure represents a shared fate outage and is susceptible to DoS attacks.",
  "## 5.3.4. Compromised L7 Proxy (TR-4)\n### Threat Description\nThere is a vulnerability in the L7 processing stack of the service mesh proxy. As L7 processing is inherently more complex, there is a higher probability for vulnerabilities to arise in this part of the stack, as supported by historical CVE data.\n\n### Proxy Function Impacted\nThis topology allows for \"less complex\" L4 capabilities (e.g., mTLS) to be adopted with L7 processing only occurring if there is a strict requirement for it. The blast radius of a proxy compromise affects all workloads on the node. This means that its failure represents a shared fate outage and is susceptible to DoS attacks.\n\n- **Impact Score** = 3: An L7 capability is shared across all applications on the node, so a single application's configuration may cause the proxy to become susceptible to failure and result in attacks on all applications on the node (e.g., a credential leak or denial of service, depending on the attack).\n- **Likelihood Score** = 2: For a given application using L7 capabilities, the likelihood is the same as for the sidecar model. However, because workloads that are only doing L4 are susceptible to attack, the likelihood is higher if they share the same node that would have been safe under the sidecar model (DPA-1).\n\n## 5.3.5. Compromise of Shared L7 Proxy (TR-5)\n### Threat Description\nA co-tenant exploits an L7 traffic processing vulnerability in a shared proxy and affects the confidentiality, integrity, or availability of traffic to or from another workload that runs on the same node.\n\n### Proxy Function Impacted\nA single proxy instance does not provide an inherently multi-tenant setup. Hence, security concerns arise when combining complex processing rules for L7 traffic from multiple unconstrained tenants in a shared instance. In this configuration, L7 processing of the traffic of multiple co-tenants is performed within one process with no# Memory Protection\n\n## Isolation Benefits\nIsolation benefits that could be gained by containerizing L7 functionality per workload.",
  "## 5.3.5. Compromise of Shared L7 Proxy (TR-5)\n### Threat Description\nA co-tenant exploits an L7 traffic processing vulnerability in a shared proxy and affects the confidentiality, integrity, or availability of traffic to or from another workload that runs on the same node.\n\n### Proxy Function Impacted\nA single proxy instance does not provide an inherently multi-tenant setup. Hence, security concerns arise when combining complex processing rules for L7 traffic from multiple unconstrained tenants in a shared instance. In this configuration, L7 processing of the traffic of multiple co-tenants is performed within one process with no# Memory Protection\n\n## Isolation Benefits\nIsolation benefits that could be gained by containerizing L7 functionality per workload.\n\n- **Impact Score** = 3: All workloads on the node are impacted.\n- **Likelihood Score** = 2: A compromise is as likely as in the sidecar model (DPA-1), but applications that would not be susceptible to attack under DPA-1 are susceptible under this model (DPA-3) (see Sec. 5.3.4).\n\n## 5.3.6. Outdated Client Libraries in Applications (TR-6)\n### Threat Description\nClient libraries are not updated frequently or consistently across the estate of microservices, leading to potential vulnerabilities and weaknesses that can be exploited.\n\n### Proxy Function Impacted\nThe infrastructure code is decoupled from the application code.\n\n- **Impact Score** = 1: The impact is the same as the sidecar model (DPA-1) (see Sec. 5.1.6).\n- **Likelihood Score** = 1: The likelihood is the same, regardless of architecture.\n\n## 5.3.7. Denial of Service (TR-7)\n### Threat Description\nThere is a conventional DoS threat.\n\n### Proxy Function Impacted\nBecause processing for all application instances on the node is shared and a single proxy instance is not inherently multi-tenant (i.e., provides no controls with regard to resource utilization across independent backends and clients), the blast radius of a DoS threat on the mesh data plane affects every application on the node.",
  "### Proxy Function Impacted\nThe infrastructure code is decoupled from the application code.\n\n- **Impact Score** = 1: The impact is the same as the sidecar model (DPA-1) (see Sec. 5.1.6).\n- **Likelihood Score** = 1: The likelihood is the same, regardless of architecture.\n\n## 5.3.7. Denial of Service (TR-7)\n### Threat Description\nThere is a conventional DoS threat.\n\n### Proxy Function Impacted\nBecause processing for all application instances on the node is shared and a single proxy instance is not inherently multi-tenant (i.e., provides no controls with regard to resource utilization across independent backends and clients), the blast radius of a DoS threat on the mesh data plane affects every application on the node.\n\n- **Impact Score** = 3: The impact applies to all workloads on the node.\n- **Likelihood Score** = 2: If any application configuration triggers exploitable paths in the shared proxy, all applications on the node suffer.\n\n## 5.3.8. Resource Consumption (TR-8)\n### Threat Description\nThere is overall resource consumption by the data plane of the service mesh infrastructure.\n\n### Proxy Function Impacted\nBecause all functionality is shared at the node level, DPA-3 has the most opportunity for deduplication and a subsequent reduction in resource usage. A configuration (e.g., service discovery) needs to be sent only once to each node rather than to each and every application instance. Overall, this results in the lowest rate of change, the least data transferred, and a lower runtime footprint (e.g., RAM, CPU).\n\n- **Impact Score** = 1: This has the lowest overall resource utilization of all available architectures.\n- **Likelihood Score** = 1: Because there is only a single proxy instance per node, rather than a data plane instance per service or per service instance, resource consumption should be the lowest of all out-of-process (i.e., non-gRPC) models.\n\n## 5.3.9. Privileged L4 Proxy (TR-9)\n### Threat Description\nA service mesh implementation requires an L4 component (e.g., deployed as a Daemon Set on a Kubernetes cluster) to run with an overprivileged security context (e.g., Privileged Pod).",
  "- **Impact Score** = 1: This has the lowest overall resource utilization of all available architectures.\n- **Likelihood Score** = 1: Because there is only a single proxy instance per node, rather than a data plane instance per service or per service instance, resource consumption should be the lowest of all out-of-process (i.e., non-gRPC) models.\n\n## 5.3.9. Privileged L4 Proxy (TR-9)\n### Threat Description\nA service mesh implementation requires an L4 component (e.g., deployed as a Daemon Set on a Kubernetes cluster) to run with an overprivileged security context (e.g., Privileged Pod).\n\n### Proxy Function Impacted and Impact Score\n- **Impact Score** = 1 and **Likelihood Score** = 1: The impact and likelihood are the same, regardless of architecture. In the per-node case, this is usually encapsulated as a CNI provider that runs in a privileged context by default. In the sidecar case,# CURRENT_PAGE_RAW_OCR_TEXT\n\n## privilege is only needed at startup to establish traffic interception rules.\n\nDepending on the implementation (e.g., Kubernetes init containers), this can ensure that the privileged user is not run alongside the application but only during initialization. In all cases, Kubernetes-defined CAP_NET_ADMIN is typically the only privilege required for mesh data plane functionality.\n\n### 5.3.10. Data Plane (Service Mesh) Bypassed (TR-10)\n\n**Threat Description:** Traffic is sent directly to a workload, bypassing mesh functionality and authorization policies.\n\n**Proxy Function Impacted:** Part of the goal of moving enforcement out of the application context and into a shared context is to use stronger primitives to ensure the non-bypassability of the mesh data plane. In general, with a per-node setup, sending traffic to an individual application instance on the node should not be achievable (e.g., similar to but not necessarily implemented as a host-level VPN that requires workloads to be part of the VPN overlay to connect).\n\n**Impact Score = 3:** All applications on the node are exposed without mesh security controls.\n\n**Likelihood Score = 1:** By design, this architecture is built to mitigate this kind of bypass.\n\n### 5.3.11 Overall Threat Score\n\n**Cumulative Threat Score = 37:** This is computed based on the methodology in Sec. 4.1.",
  "**Threat Description:** Traffic is sent directly to a workload, bypassing mesh functionality and authorization policies.\n\n**Proxy Function Impacted:** Part of the goal of moving enforcement out of the application context and into a shared context is to use stronger primitives to ensure the non-bypassability of the mesh data plane. In general, with a per-node setup, sending traffic to an individual application instance on the node should not be achievable (e.g., similar to but not necessarily implemented as a host-level VPN that requires workloads to be part of the VPN overlay to connect).\n\n**Impact Score = 3:** All applications on the node are exposed without mesh security controls.\n\n**Likelihood Score = 1:** By design, this architecture is built to mitigate this kind of bypass.\n\n### 5.3.11 Overall Threat Score\n\n**Cumulative Threat Score = 37:** This is computed based on the methodology in Sec. 4.1.\n\n## 5.4. Threat Analysis for L4 and L7 as Part of the Application Model (gRPC proxyless Model (DPA-4))\n\n### 5.4.1. Compromised L4 Proxy (TR-1)\n\n**Threat Description:** A compromised L4 proxy (or L4 functions in the case of sidecar proxy with combined L4 and L7 functions) leads to leaked identities (cannot it not lead to MITM attacks by compromising proxy logic?) for every workload (i.e., service) that runs on the node.\n\n**Proxy Function Impacted:** mTLS connections are negotiated by the client library inside of the application with a single identity (i.e., that of the application). In order to compromise key material and identity documents for multiple workloads, multiple application instances would need to be compromised.\n\n**Impact Score = 1:** A single workload/single identity is impacted.\n\n**Likelihood Score = 2:** There is a large surface area if something goes wrong since this is inside of the application's context. Therefore, this is as likely or slightly more likely than DPA-1.\n\n### 5.4.2. Compromised Application Container (TR-2)\n\n**Threat Description:** A compromised application container (e.g., via a supply chain attack during the development phase) leads to the takeover of an identity associated with that application.",
  "**Proxy Function Impacted:** mTLS connections are negotiated by the client library inside of the application with a single identity (i.e., that of the application). In order to compromise key material and identity documents for multiple workloads, multiple application instances would need to be compromised.\n\n**Impact Score = 1:** A single workload/single identity is impacted.\n\n**Likelihood Score = 2:** There is a large surface area if something goes wrong since this is inside of the application's context. Therefore, this is as likely or slightly more likely than DPA-1.\n\n### 5.4.2. Compromised Application Container (TR-2)\n\n**Threat Description:** A compromised application container (e.g., via a supply chain attack during the development phase) leads to the takeover of an identity associated with that application.\n\n**Proxy Function Impacted:** Compromising the application does compromise the mesh. Full access to any key material used by the application, including the mesh identity, is achievable.\n\n**Impact Score = 2:** A single workload/single identity is impacted, and there is full access to the key material used by that application.```markdown\n# CURRENT_PAGE_RAW_OCR_TEXT\n\n## Likelihood Score = 2\nThe likelihood is the same, regardless of architecture.\n\n### 5.4.3. Compromise of Business Data (TR-3)\n**Threat Description:** An identity is used to pivot through the infrastructure in order to compromise the confidentiality, integrity, or availability of business data.\n\n**Proxy Function Impacted and Impact Score (= 1) and Likelihood Score (= 1):** The impact and likelihood are the same, regardless of architecture. This is the fundamental risk of identity-based policy and is why the PoLP should be practiced. The telemetry provided by the service mesh (regardless of architecture) is invaluable for understanding communication patterns in a given system and creating accurate access policies.\n\n### 5.4.4. Compromised L7 Proxy (TR-4)\n**Threat Description:** There is a vulnerability in the L7 processing stack of the service mesh proxy. As L7 processing is inherently more complex than typical L4 proxy processing, there is a higher probability for vulnerabilities to arise in this part of the stack, as supported by historical CVE data.",
  "**Proxy Function Impacted and Impact Score (= 1) and Likelihood Score (= 1):** The impact and likelihood are the same, regardless of architecture. This is the fundamental risk of identity-based policy and is why the PoLP should be practiced. The telemetry provided by the service mesh (regardless of architecture) is invaluable for understanding communication patterns in a given system and creating accurate access policies.\n\n### 5.4.4. Compromised L7 Proxy (TR-4)\n**Threat Description:** There is a vulnerability in the L7 processing stack of the service mesh proxy. As L7 processing is inherently more complex than typical L4 proxy processing, there is a higher probability for vulnerabilities to arise in this part of the stack, as supported by historical CVE data.\n\n**Proxy Function Impacted:** Compromising the L7 processing stack results in compromising the entire application and in more risk of compromise beyond runtime identity and DoS for other users.\n\n**Impact Score = 3:** The application itself is compromised, including non-mesh credentials (e.g., truncate table users) that are not available if only the proxy is compromised.\n\n**Likelihood Score = 3:** Since L7 processing code is the application, the surface area is much larger.\n\n### 5.4.5. Compromise of Shared L7 Proxy (TR-5)\n**Threat Description:** A co-tenant exploits an L7 traffic processing vulnerability in a shared proxy and affects the confidentiality, integrity, or availability of traffic to or from another workload that runs on the same node.\n\n**Proxy Function Impacted:** L7 processing is entirely isolated by whatever mechanisms isolate the applications themselves (e.g., containers, micro-VMs, VMs). The impact is limited by the strength of that boundary.\n\n**Impact Score = 1:** See Sec. 5.1.5.\n\n**Likelihood Score = 1:** The likelihood is the same as any other application compromise.\n\n### 5.4.6. Outdated Client Libraries in Applications (TR-6)\n**Threat Description:** Client libraries are not updated frequently or consistently across the estate of microservices, leading to potential vulnerabilities and weaknesses that can be exploited.\n\n**Proxy Function Impacted:** Infrastructure concerns are embedded within the application code. Challenges can arise when enforcing consistency in versions between microservices.",
  "**Proxy Function Impacted:** L7 processing is entirely isolated by whatever mechanisms isolate the applications themselves (e.g., containers, micro-VMs, VMs). The impact is limited by the strength of that boundary.\n\n**Impact Score = 1:** See Sec. 5.1.5.\n\n**Likelihood Score = 1:** The likelihood is the same as any other application compromise.\n\n### 5.4.6. Outdated Client Libraries in Applications (TR-6)\n**Threat Description:** Client libraries are not updated frequently or consistently across the estate of microservices, leading to potential vulnerabilities and weaknesses that can be exploited.\n\n**Proxy Function Impacted:** Infrastructure concerns are embedded within the application code. Challenges can arise when enforcing consistency in versions between microservices.\n\n**Impact Score = 3:** The mesh functionality itself is part of the application. Therefore, bad application updates result in bad mesh updates. This means that vulnerabilities remain for longer, and since the mesh is part of the application, a vulnerability in the application is a vulnerability in the mesh data plane.\n\n**Likelihood Score = 2:** The likelihood depends on the frequency of updates. If applications can be\n```# CURRENT PAGE RAW OCR TEXT\n\n## 5.4.7. Denial of Service (TR-7)\n\n**Threat Description:** There is a conventional denial-of-service threat.\n**Proxy Function Impacted:** A DoS threat to the mesh data plane (L4 or L7) is a threat to the application itself. In all other respects, it is very similar to the sidecar model.\n**Impact Score = 1:** There is a single instance of a single application, so an attack could be repeated across all applications (see Sec. 5.1.7).\n**Likelihood Score = 2:** The functionality of both the mesh data plane and the application code itself are susceptible to DoS.\n\n## 5.4.8. Resource Consumption (TR-8)",
  "**Likelihood Score = 2:** The likelihood depends on the frequency of updates. If applications can be\n```# CURRENT PAGE RAW OCR TEXT\n\n## 5.4.7. Denial of Service (TR-7)\n\n**Threat Description:** There is a conventional denial-of-service threat.\n**Proxy Function Impacted:** A DoS threat to the mesh data plane (L4 or L7) is a threat to the application itself. In all other respects, it is very similar to the sidecar model.\n**Impact Score = 1:** There is a single instance of a single application, so an attack could be repeated across all applications (see Sec. 5.1.7).\n**Likelihood Score = 2:** The functionality of both the mesh data plane and the application code itself are susceptible to DoS.\n\n## 5.4.8. Resource Consumption (TR-8)\n\n**Threat Description:** There is overall resource consumption by the data plane of the service mesh infrastructure.\n**Proxy Function Impacted:** Because it is built into the application, resources devoted to mesh data plane functionality are very low. The only reason that overall resource utilization may be higher than the shared L4 and L7 model (DPA-3) is because some duplication of configuration and processing needs to occur to push the configuration to every application instance.\n**Impact Score = 2:** This has a potentially lower resource usage on a per-app basis than any other model but is likely higher in aggregate because resources and configuration cannot be shared across data plane instances.\n**Likelihood Score = 1:** gRPC achieves the lowest overhead of all possible options because there is no separate data plane, strictly the application itself. If an application is already using gRPC, it will see little-to-no additional overhead for using a mesh data plane to configure gRPC functionality.\n\n## 5.4.9. Privileged L4 Proxy (TR-9)",
  "## 5.4.9. Privileged L4 Proxy (TR-9)\n\n**Threat Description:** A service mesh implementation requires an L4 component (e.g., deployed as a Daemon Set on a Kubernetes cluster) to run with an overprivileged security context (e.g., Privileged Pod).\n**Proxy Function Impacted and Impact Score (= 0) and Likelihood Score (= 0):** The mesh data plane functionality runs in the application context without any special privileges and is the same as the application itself. No special capabilities or permissions are required to intercept traffic or implement policy enforcement.\n\n## 5.4.10. Data Plane (Service Mesh) Bypassed (TR-10)\n\n**Threat Description:** Traffic is sent directly to a workload, bypassing mesh functionality and authorization policies.\n**Proxy Function Impacted:** The application is the enforcement point, so there is no bypassing.\n**Impact Score = 1:** The application is exposed in a degraded state or without some controls.# CURRENT_PAGE_RAW_OCR_TEXT\n\n## Likelihood Score\nLikelihood Score = 1: Due to the nature of RPC frameworks and in-process enforcement, mesh data plane policy should not be able to be bypassed.\n\n## Overall Threat Score\nCumulative Threat Score = 28: This is computed based on the methodology in Sec 4.1.\n\n## Recommendations Based on the Application Security Risk Profile\nWhile the ratings or scores for the impact and likelihood parameters for different threats in different data plane architectures are dictated by the number of service instances affected, the risk profiles associated with the applications are determined by the criticality of the entire application with respect to the business process that it supports.\n\nWhen developing threat profiles for architectural patterns (see Sec. 5), consider that the impact and likelihood parameters for some threats are the same irrespective of the proxy model or data plane architecture. Since the ratings assigned to these parameters are relative, both parameters are assigned a rating of 1, which results in an overall threat rating of 1 for those threats. The threats that fall under this category and should be ignored are:\n- Compromise of business data (TR-3)\n- Privileged L4 proxy (TR-9)\n\nAdditionally, threats that have no direct security implications but may have performance implications should also be ignored, namely Resource consumption (TR-8).",
  "When developing threat profiles for architectural patterns (see Sec. 5), consider that the impact and likelihood parameters for some threats are the same irrespective of the proxy model or data plane architecture. Since the ratings assigned to these parameters are relative, both parameters are assigned a rating of 1, which results in an overall threat rating of 1 for those threats. The threats that fall under this category and should be ignored are:\n- Compromise of business data (TR-3)\n- Privileged L4 proxy (TR-9)\n\nAdditionally, threats that have no direct security implications but may have performance implications should also be ignored, namely Resource consumption (TR-8).\n\n### Cloud-Native Applications With Low Risk Profiles\nThe service mesh capability requirements for this class of application are:\n- LOW-REQ1: Service-to-service authorization (i.e., Service A can call Service B) is based on network location/parameter (e.g., subnet) and authorization at the granularity of the called service method. Calling the user and a per-call request are not required.\n- LOW-REQ2: Logging and metrics need to be captured only at the level of network parameters (e.g., source/destination IP address) and not at the level of per-call request.\n- LOW-REQ3: All traffic management capabilities (e.g., load balancing, rate limiting) need to be enforced at the network connection level and not at the per-call request.\n\nThese capabilities essentially involve network-transport/network-level data that can be provided by the proxy's L4 functions. Hence, the following are recommendations for this class of application:\n- Since all requirements can be met by L4 proxies or L4 functions built into the libraries, all four data plane architectures can be theoretically used.\n- Since neither method-level nor per-call request handling is required, thus eliminating all L7 functions, data plane architectures that deploy an L7 proxy per service instance (i.e., side-car model [DPA-1]) expose an unnecessary attack surface. Therefore, either of the two models with a shared L4 proxy (i.e., DPA-2 or DPA-3) is recommended. A gRPC proxy-less model (i.e., DPA-4) is also usable for this class of applications, though it does expose a larger attack surface than DPA-2 or DPA-3.",
  "These capabilities essentially involve network-transport/network-level data that can be provided by the proxy's L4 functions. Hence, the following are recommendations for this class of application:\n- Since all requirements can be met by L4 proxies or L4 functions built into the libraries, all four data plane architectures can be theoretically used.\n- Since neither method-level nor per-call request handling is required, thus eliminating all L7 functions, data plane architectures that deploy an L7 proxy per service instance (i.e., side-car model [DPA-1]) expose an unnecessary attack surface. Therefore, either of the two models with a shared L4 proxy (i.e., DPA-2 or DPA-3) is recommended. A gRPC proxy-less model (i.e., DPA-4) is also usable for this class of applications, though it does expose a larger attack surface than DPA-2 or DPA-3.\n\n### Cloud-Native Applications with Medium Risk Profiles\nThe service mesh capability requirements for this class of application are:\n- MEDIUM-REQ1: In addition to service-to-service authorization at the level of service, a# CURRENT PAGE RAW OCR TEXT\n\n## Full Authorization Policy\n\nA full authorization policy at the method level (i.e., Service A can execute GET on B's billing method with valid end user credentials that contain the READ scope) is required.\n\n- **MEDIUM-REQ2:** Logging and metrics data need to be captured at the level of network parameters (e.g., source/destination IP address) along with some metadata (e.g., the called service and method).\n- **MEDIUM-REQ3:** All traffic management capabilities (e.g., load balancing, rate limiting) can be enforced at the network-connection level (as in low risk profile case) and not at the per-call request or per-method level.\n\nThese capabilities essentially involve both the network-transport/network-level data (all L4 functions) and some L7 functions (not all), such as authenticating user identities not only locally from tokens (e.g., JSON Web Tokens [JWT]) and remotely using standardized protocols (e.g., OAuth and OIDC). Since the use of L7 proxies with some limited functionality is mandatory, the following are recommendations for this class of application:",
  "- **MEDIUM-REQ2:** Logging and metrics data need to be captured at the level of network parameters (e.g., source/destination IP address) along with some metadata (e.g., the called service and method).\n- **MEDIUM-REQ3:** All traffic management capabilities (e.g., load balancing, rate limiting) can be enforced at the network-connection level (as in low risk profile case) and not at the per-call request or per-method level.\n\nThese capabilities essentially involve both the network-transport/network-level data (all L4 functions) and some L7 functions (not all), such as authenticating user identities not only locally from tokens (e.g., JSON Web Tokens [JWT]) and remotely using standardized protocols (e.g., OAuth and OIDC). Since the use of L7 proxies with some limited functionality is mandatory, the following are recommendations for this class of application:\n\n- Just like for applications with a low risk profile, all four data plane architectures can be theoretically used.\n- Since L7 functions are limited, it is not essential to dedicate an L7 proxy for each service. Hence, data plane architectures that deploy an L7 proxy for each service (e.g., sidecar model [DPA-1]) may consume more resources than other models for limited additional assurance. In contrast, most exploitable vulnerabilities lie in L7 code. A shared L4 and L7 model (i.e., DPA-3) is not desirable since the shared L7 component introduces risks for all services that share the same physical host. Therefore, the shared L4 and L7 per service model (i.e., DPA-2) is likely the best combination of resource utilization and risk. A gRPC proxy-less model (i.e., DPA-4) that includes libraries for L4 functions and limited L7 functions is also recommended with similar risks but even less resource utilization than DPA-2 in most cases.\n\n## Cloud-Native Applications With High Risk Profiles\n\nThe service mesh capability requirements for this class of application are:",
  "## Cloud-Native Applications With High Risk Profiles\n\nThe service mesh capability requirements for this class of application are:\n\n- **HIGH-REQ1:** A full user-to-resource-level access control is required in addition to (a) service-to-service authorization at the level of service and (b) a full authorization policy at the method level (i.e., Service A can execute GET on B's billing method with valid end user credentials that contain the READ scope). This necessitates the proxy making an external authorization call for each request.\n- **HIGH-REQ2:** Logging and metrics meta data relating to a request must be captured (e.g., rate of requests, rate of positive outcomes, processing time for each request).\n- **HIGH-REQ3:** All traffic management capabilities are required at the request level and should involve application layer parameters in addition to those at the network connection level.\n\nThese capabilities reveal that a complete suite of L7 functions is required.```markdown\n## CURRENT_PAGE_RAW_OCR_TEXT\n\n- Just like for applications with low risk and medium risk profiles, all four data plane architectures can be theoretically used.\n- Based on the requirements, this class of applications belongs to highly critical applications that require a great degree of isolation and in which any compromise should be limited to only one service instance rather than multiple service instances. Data plane architectures that deploy an L7 proxy for each service (e.g., sidecar model [DPA-1]) are most applicable. A shared L7 proxy per service (e.g., DPA-2) can be an acceptable trade-off for some organizations if they have other mechanisms for mitigating shared-fate failures of all instances of the service that the shared service mesh L7 proxy brings (e.g., mitigating a DoS attack via L3 controls outside of the mesh). However, tightly integrating both L4 and L7 functions with the service instance provides a greater degree of isolation, so DPA-1 is highly recommended.",
  "- Just like for applications with low risk and medium risk profiles, all four data plane architectures can be theoretically used.\n- Based on the requirements, this class of applications belongs to highly critical applications that require a great degree of isolation and in which any compromise should be limited to only one service instance rather than multiple service instances. Data plane architectures that deploy an L7 proxy for each service (e.g., sidecar model [DPA-1]) are most applicable. A shared L7 proxy per service (e.g., DPA-2) can be an acceptable trade-off for some organizations if they have other mechanisms for mitigating shared-fate failures of all instances of the service that the shared service mesh L7 proxy brings (e.g., mitigating a DoS attack via L3 controls outside of the mesh). However, tightly integrating both L4 and L7 functions with the service instance provides a greater degree of isolation, so DPA-1 is highly recommended.\n\nAll relevant network traffic data pertaining to their level in the stack they operate will be collected by L4 and L7 proxies. This guidance does not make any distinction between these proxy types as far as a network data collection ability is concerned. Additionally, all proxies will be configured to send the collected data to the appropriate monitoring tools in the enterprise infrastructure. The tools for aggregating and filtering traffic is beyond the scope of the data plane architecture components considered in this document. The same applies to the monitoring tools that provide the dashboard, analyze the traffic, generate the required metrics, and send alerts regarding the threats detected. Hence, nothing in this recommendation compromises the observability requirements of applications in the enterprise.\n\nMoreover, this guidance does not recommend a particular data plane architecture for the entire enterprise. Applications have different levels of security requirements within an enterprise, such as functions that do not require L7 proxy functions. Therefore, an enterprise can choose to deploy DPA-1 (i.e., sidecar proxies) for some selected applications while using different architectures (e.g., DPA-2, DPA-3, or DPA-4) for others to leverage their increased performance and still meet the enterprise's security needs.\n\n## 7. Summary and Conclusions\n\nCloud-native applications are microservices-based applications implemented using containers and VMs and that sometimes span on-premises and multiple clouds. When a centralized service infrastructure is beneficial to the overall security of this class of applications, a service mesh may be useful.",
  "Moreover, this guidance does not recommend a particular data plane architecture for the entire enterprise. Applications have different levels of security requirements within an enterprise, such as functions that do not require L7 proxy functions. Therefore, an enterprise can choose to deploy DPA-1 (i.e., sidecar proxies) for some selected applications while using different architectures (e.g., DPA-2, DPA-3, or DPA-4) for others to leverage their increased performance and still meet the enterprise's security needs.\n\n## 7. Summary and Conclusions\n\nCloud-native applications are microservices-based applications implemented using containers and VMs and that sometimes span on-premises and multiple clouds. When a centralized service infrastructure is beneficial to the overall security of this class of applications, a service mesh may be useful.\n\nService mesh implementations are characterized by proxies \u2013 a type of configuration of entities that enable various capabilities during application runtimes, such as policy enforcement (including access control), network connectivity (including the establishment of secure sessions), and performance monitoring through the collection of data for\n```# Computing Various Metrics\n\nThe proxies form the data plane of the service mesh, and a particular configuration of proxies is called a proxy model or a data plane architecture.\n\nThe first and most widely used deployment of the proxy model is the sidecar model, in which a single proxy provides functions at both L4 and L7 and is associated with a service instance.\n\nPerformance, resource consumption, and specific security needs for different cloud-native applications have led to the exploration of alternate proxy models. This document provided a detailed threat analysis of these alternate proxy models as well as recommendations for their use in cloud-native applications with different security risk profiles."
]