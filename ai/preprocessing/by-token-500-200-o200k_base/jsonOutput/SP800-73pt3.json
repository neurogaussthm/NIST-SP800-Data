[
  "```markdown\n# Abstract\nFIPS 201 defines the requirements and characteristics of government-wide interoperable identity credentials. It specifies that these identity credentials must be stored on a smart card and that additional common identity credentials, known as derived PIV credentials, may be issued by a federal department or agency and used when a PIV Card is not practical. This document contains the technical specifications to interface with the smart card to retrieve and use the PIV identity credentials. The specifications reflect the design goals of interoperability and PIV Card functions. The goals are addressed by specifying a PIV data model, card edge interface, and application programming interface. Moreover, this document enumerates requirements for the options and branches in international integrated circuit card standards. The specifications go further by constraining interpretations of the normative standards to ease implementation, facilitate interoperability, and ensure performance in a manner tailored for PIV applications.\n\n# 1. Introduction\nHomeland Security Presidential Directive-12 (HSPD-12) called for the adoption of a common identification standard to govern the interoperable use of identity credentials to allow physical and logical access to federally controlled facilities and information systems. In response, Federal Information Processing Standard (FIPS) 201 [FIPS201], Personal Identity Verification (PIV) of Federal Employees and Contractors, was developed to define reliable, government-wide identity credentials for use in applications such as access to federally controlled facilities and information systems. FIPS 201 supports multiple types of authenticators, including authenticators on smart cards (also known as PIV Cards) and derived PIV credential authenticators in various other form factors. This publication contains technical specifications to interface with PIV Cards to retrieve and use identity credentials. Other specifications, such as NIST Special Publication (SP) 800-157r1 (Revision 1), contain procedures and life cycle activities to issue, maintain, and use derived PIV credentials.",
  "## 1.1. Purpose\nFIPS 201 defines processes for binding identities to authenticators, such as the PIV Card and derived PIV credentials used in the federal PIV system. SP 800-73-5 contains the technical specifications to interface with the PIV Card to retrieve and use the identity credentials. The specifications reflect the design goals of interoperability and PIV Card functions. The goals are addressed by specifying a PIV data model, card edge interface, and application programming interface. Moreover, this document enumerates requirements for the options and branches in international integrated circuit (ICC) standards [ISO7816]. The specifications go further by\n```# Constraining Interpretations of the Normative Standards\n\nto ease implementation, facilitate interoperability, and ensure performance in a manner tailored for PIV applications.\n\n## 1.2. Scope\n\nSP 800-73-5 specifies the PIV data model, application programming interface (API), and card interface requirements necessary to comply with the use cases, as defined in Section 6 of FIPS 201 and further described in Appendix B of SP 800-73-5 Part 1. Interoperability is defined as the use of PIV identity credentials such that client-application programs, compliant card applications, and compliant ICCs CAN be used interchangeably by all information processing systems across federal agencies. SP 800-73-5 defines the PIV data elements' identifiers, structure, and format, as well as the client API and card command interface for use with the PIV Card.\n\nThis document \u2014 SP 800-73-5, Interfaces for Personal Identity Verification: Part 3 \u2013 PIV Client Application Programming Interface \u2014 contains technical specifications for the PIV client application programming interface to the PIV Card.\n\n## 1.3. Audience and Assumptions\n\nThis document is intended for federal agencies and implementers of PIV systems. Readers are assumed to have a working knowledge of smart card standards and applications. Readers should also be aware of the following important content in SP 800-73-5 Part 1:\n\n- The front matter details configuration management recommendations and specifies NPIVP conformance testing procedures.\n- Appendix G provides the full Revision History of SP 800-73.\n- Section 1.3 specifies the effective date of SP 800-73-5.\n\n## 1.4. Content and Organization",
  "This document \u2014 SP 800-73-5, Interfaces for Personal Identity Verification: Part 3 \u2013 PIV Client Application Programming Interface \u2014 contains technical specifications for the PIV client application programming interface to the PIV Card.\n\n## 1.3. Audience and Assumptions\n\nThis document is intended for federal agencies and implementers of PIV systems. Readers are assumed to have a working knowledge of smart card standards and applications. Readers should also be aware of the following important content in SP 800-73-5 Part 1:\n\n- The front matter details configuration management recommendations and specifies NPIVP conformance testing procedures.\n- Appendix G provides the full Revision History of SP 800-73.\n- Section 1.3 specifies the effective date of SP 800-73-5.\n\n## 1.4. Content and Organization\n\nAll sections in this document are normative (i.e., mandatory for compliance) unless specified as informative (i.e., non-mandatory) and are structured as follows:\n\n- Section 1, Introduction, provides the purpose, scope, audience, and assumptions of the document and outlines its structure.\n- Section 2, Overview: Concepts and Constructs, describes both the PIV Card Application and the PIV client API. This section is informative.\n- Section 3, Client Application Programming Interface, describes the set of entry points accessible by client applications through the PIV Middleware to interact with the PIV Card.\n- Appendix A contains the list of acronyms used in this document. This section is informative.\n- Appendix B contains the Glossary of terms used in this document. This section is informative.\n- Appendix C explains the notation in use in this document. This section is informative.\n\n## 2. Overview: Concepts and Constructs\n\nSP 800-73-5 Parts 2 and 3 define two interfaces to an ICC that contain the PIV Card Application: a low-level card command interface (SP 800-73-5 Part 2) and a high-level client API (Part 3). SP# CURRENT_PAGE_RAW_OCR_TEXT\n\n800-73-5 Part 3 (this document) is optional, and NIST Personal Identity Verification Program (NPIVP) conformance testing for PIV Middleware in accordance with SP 800-73 Part 3 is discontinued since endpoints support high-level client APIs natively at the time of this publication.",
  "## 2. Overview: Concepts and Constructs\n\nSP 800-73-5 Parts 2 and 3 define two interfaces to an ICC that contain the PIV Card Application: a low-level card command interface (SP 800-73-5 Part 2) and a high-level client API (Part 3). SP# CURRENT_PAGE_RAW_OCR_TEXT\n\n800-73-5 Part 3 (this document) is optional, and NIST Personal Identity Verification Program (NPIVP) conformance testing for PIV Middleware in accordance with SP 800-73 Part 3 is discontinued since endpoints support high-level client APIs natively at the time of this publication.\n\nThe information processing concepts and data constructs on both interfaces are identical and MAY be referred to generically as the information processing concepts and data constructs on the PIV interfaces without specific reference to the client API or the card command interface. The client API provides task-specific programmatic access to these concepts and constructs, and the card command interface provides communication access. The client API is used by client applications using the PIV Card Application. The card command interface is used by software that implement the client API (middleware).\n\nThe client API is thought of as being at a higher level than the card command interface because access to a single entry point on the client API may cause multiple card commands to traverse the card command interface. In other words, it may require more than one card command on the card command interface to accomplish the task represented by a single call on an entry point of the client API.\n\nThe client API is a program execution, call/return style interface, whereas the card command interface is a communication protocol, command/response style interface. Because of this difference, the representation of the PIV concepts and constructs as bits and bytes on the client API may be different from the representation of these same concepts and constructs on the card command interface.\n\n## 3. Client Application Programming Interface\n\nTable 1 lists the entry points on the PIV client API. This section references object identifiers (OIDs), which are defined and can be found in SP 800-73-5 Part1, Table 3.",
  "The client API is a program execution, call/return style interface, whereas the card command interface is a communication protocol, command/response style interface. Because of this difference, the representation of the PIV concepts and constructs as bits and bytes on the client API may be different from the representation of these same concepts and constructs on the card command interface.\n\n## 3. Client Application Programming Interface\n\nTable 1 lists the entry points on the PIV client API. This section references object identifiers (OIDs), which are defined and can be found in SP 800-73-5 Part1, Table 3.\n\nIf both the PIV Middleware and the PIV Card support secure messaging, then all non-card management functionality of the PIV Card MAY be accessed over either the contact or contactless interface of the card. In order to perform non-card management functionality that would otherwise be limited to the contact interface, the client application must first establish a virtual contact interface by calling the pivEstablishSecureMessaging function and using the pivLogIntoCardApplication function to submit the pairing code to the card. If the client application does not have another means of determining whether communication with the PIV Card is over a contact or contactless interface, it MAY use the pivGetData function to attempt to read a mandatory data object (e.g., such as the X.509 Certificate for PIV Authentication or the security object) that has an access rule for read of \"Always.\" However, that is only accessible over the contact and virtual contact interfaces (see SP 800-73-5 Part1, Table 2). If the# CURRENT_PAGE_RAW_OCR_TEXT\n\nIf the return code from `pivGetData` is `PIV_SECURITY_CONDITIONS_NOT_SATISFIED`, then the communication with the card is over a contactless interface.\n\n## 3.1. Entry Points for Communication\n\n### 3.1.1. pivMiddlewareVersion\n\n**Purpose:** Returns the PIV Middleware version string\n\n**Prototype:**\n```plaintext\nstatus_word pivMiddlewareVersion(\nOUT version versionString\n);\n```",
  "If the return code from `pivGetData` is `PIV_SECURITY_CONDITIONS_NOT_SATISFIED`, then the communication with the card is over a contactless interface.\n\n## 3.1. Entry Points for Communication\n\n### 3.1.1. pivMiddlewareVersion\n\n**Purpose:** Returns the PIV Middleware version string\n\n**Prototype:**\n```plaintext\nstatus_word pivMiddlewareVersion(\nOUT version versionString\n);\n```\n\n**Parameter:** versionString\n- For SP 800-73-5 Part 3 conformant PIV Middleware, the parameter returns \"800-73-5 Client API\" or \"800-73-5 Client API with SM.\"\n- For SP 800-73-4 Part 3 conformant middleware, the parameter returns \"800-73-4 Client API\" or \"800-73-4 Client API with SM.\"\n- Earlier versions with versionString (e.g., \"800-73-3 Client API,\" \"800-73-2 Client API,\" and \"800-78-1 Client API\") are discontinued as they do not conform to the requirements of FIPS 201-3.\n\n**Return Codes:** PIV_OK\n\nPIV Middleware that returns a versionString of \"800-73-5 Client API with SM\" and \"800-73-4 Client API with SM\" SHALL implement all PIV Middleware functions listed in Table 1 and be able to recognize and process all mandatory and optional PIV data objects. PIV Middleware that returns a versionString of \"800-73-5 Client API\" and \"800-73-4 Client API\" SHALL implement all PIV Middleware functions listed in Table 1 except for `pivEstablishSecureMessaging` and SHALL be able to recognize and process all mandatory and optional PIV data objects.\n\n### 3.1.2. pivConnect\n\n**Purpose:** Connects the client API to the PIV Card Application on a specific ICC.\n\n**Prototype:**\n```plaintext\nstatus_word pivConnect(\nIN Boolean sharedConnection,\nINOUT sequence of bytes connectionDescription,\nINOUT LONG CDLength,\nOUT handle cardHandle\n);\n```",
  "### 3.1.2. pivConnect\n\n**Purpose:** Connects the client API to the PIV Card Application on a specific ICC.\n\n**Prototype:**\n```plaintext\nstatus_word pivConnect(\nIN Boolean sharedConnection,\nINOUT sequence of bytes connectionDescription,\nINOUT LONG CDLength,\nOUT handle cardHandle\n);\n```\n\n**Parameters:**\n- **sharedConnection** If TRUE, other client applications CAN establish concurrent connections to the ICC. If FALSE and the connection is established, then the calling client application has exclusive access to the ICC.\n- **connectionDescription** A connection description data object (tag 0x7F21). See Table 2. If the length of the value field of the '8x' data object in the connection description data object is zero, then a list of the card readers of the type indicated by the tag of the '8x' series data object and available at the '9x' location is returned in the connectionDescription. In order to provide sufficient space for the return value, the client application SHALL allocate a buffer of at least 2048 bytes for connectionDescription. The connection description BER-TLV [ISO8825] used on the PIV client API SHALL have the structure described in Table 2. At most one selection from the '8x' series and one selection from the '9x' series SHALL appear in the connection description template. For example, '7F 21 0C 82 04 41 63 6D 65 91 04 C0 00 02 17' describes a connection to a generic card reader at internet address 192.0.2.23. In another example, '7F 21 0B 82 01 00 93 06 16 17 55 50 12 3F' describes a connection to the subscriber.```markdown\n# Identity Module in the Mobile Phone",
  "At +1 617 555 0123. When used as an argument to the pivConnect entry point on the PIV client API described in this section, an '8x' series data object with zero length and a '9x' series data object request the return of all available card readers of the described type on the described node. Thus, '7F 21 04 81 00 90 00' would request a list of all available PC/SC card readers on the host on which the client application was running.\n\n## CDLength\nLength of the card description parameter.\n\n## cardHandle\nThe returned opaque identifier of a communication channel to a particular ICC and, hence, of the card itself. cardHandle is used in all other entry points on the PIV client API to identify which card the functionality of the entry point should be applied to.\n\n## Return Codes:\n- PIV_OK\n- PIV_CONNECTION_DESCRIPTION_MALFORMED\n- PIV_CONNECTION_FAILURE\n- PIV_CONNECTION_LOCKED\n\n### 3.1.3. pivDisconnect\n**Purpose:** Disconnect the PIV API from the PIV Card Application and the ICC that contains the PIV Card Application.\n\n**Prototype:**\n```c\nstatus_word pivDisconnect(\nIN handle cardHandle\n);\n```\n\n**Parameters:**\n- **cardHandle** Opaque identifier of the card to be acted upon as returned by pivConnect. The value of cardHandle is undefined upon return from pivDisconnect.\n\n**Return Codes:**\n- PIV_OK\n- PIV_INVALID_CARD_HANDLE\n- PIV_CARD_READER_ERROR\n\nIf secure messaging has been established, then the PIV Middleware SHALL zeroize the secure messaging session keys.\n\n## 3.2. Entry Points for Data Access\n\n### 3.2.1. pivSelectCardApplication\n**Purpose:** Set the PIV Card Application as the currently selected card application and establish the PIV Card Application's security state.\n\n**Prototype:**\n```c\nstatus_word pivSelectCardApplication(\nIN handle cardHandle,\nIN sequence of byte applicationAID,\nIN LONG aidLength,\nOUT sequence of byte applicationProperties,\nINOUT LONG APLength\n);\n```",
  "**Parameters:**\n- **cardHandle** Opaque identifier of the card to be acted upon as returned by pivConnect. The value of cardHandle is undefined upon return from pivDisconnect.\n\n**Return Codes:**\n- PIV_OK\n- PIV_INVALID_CARD_HANDLE\n- PIV_CARD_READER_ERROR\n\nIf secure messaging has been established, then the PIV Middleware SHALL zeroize the secure messaging session keys.\n\n## 3.2. Entry Points for Data Access\n\n### 3.2.1. pivSelectCardApplication\n**Purpose:** Set the PIV Card Application as the currently selected card application and establish the PIV Card Application's security state.\n\n**Prototype:**\n```c\nstatus_word pivSelectCardApplication(\nIN handle cardHandle,\nIN sequence of byte applicationAID,\nIN LONG aidLength,\nOUT sequence of byte applicationProperties,\nINOUT LONG APLength\n);\n```\n\n**Parameters:**\n- **cardHandle** Opaque identifier of the card to be acted upon as returned by pivConnect.\n- **aidLength** Length of the PIV Card Application AID.\n- **applicationAID** The AID of the PIV Card Application that is to become the currently selected card application.\n- **applicationProperties** The application properties of the selected PIV Card Application; see SP 800-73-5 Part2, Table 3.\n- **APLength** As an input, length of the buffer allocated for applicationProperties; as an output, length of the application properties.\n\n**Return Codes:**\n- PIV_OK\n- PIV_INVALID_CARD_HANDLE\n- PIV_CARD_APPLICATION_NOT_FOUND\n- PIV_CARD_READER_ERROR\n``````markdown\n# PIV_INSUFFICIENT_BUFFER\n\nIf the length of application properties is longer than the buffer allocated by the client application, then the PIV Middleware SHALL return PIV_INSUFFICIENT_BUFFER but SHALL still set APLength to the length of the application properties.\n\n## 3.2.2. pivEstablishSecureMessaging\n\n**Purpose:** Establish secure messaging with the PIV Card Application.\n\n**Prototype:**\n```c\nstatus_word pivEstablishSecureMessaging(\nIN handle cardHandle,\n);\n```\n\n**Parameters:**\n- `cardHandle` Opaque identifier of the card to be acted upon as returned by pivConnect",
  "**Return Codes:**\n- PIV_OK\n- PIV_INVALID_CARD_HANDLE\n- PIV_CARD_APPLICATION_NOT_FOUND\n- PIV_CARD_READER_ERROR\n``````markdown\n# PIV_INSUFFICIENT_BUFFER\n\nIf the length of application properties is longer than the buffer allocated by the client application, then the PIV Middleware SHALL return PIV_INSUFFICIENT_BUFFER but SHALL still set APLength to the length of the application properties.\n\n## 3.2.2. pivEstablishSecureMessaging\n\n**Purpose:** Establish secure messaging with the PIV Card Application.\n\n**Prototype:**\n```c\nstatus_word pivEstablishSecureMessaging(\nIN handle cardHandle,\n);\n```\n\n**Parameters:**\n- `cardHandle` Opaque identifier of the card to be acted upon as returned by pivConnect\n\n**Return Codes:**\n- PIV_OK\n- PIV_INVALID_CARD_HANDLE\n- PIV_CARD_READER_ERROR\n- PIV_SM_FAILED\n\nAfter successful execution of the key establishment protocol, the PIV Middleware SHALL perform all subsequent GET DATA, VERIFY, and GENERAL AUTHENTICATE commands over secure messaging with the exception of any subsequent uses of the GENERAL AUTHENTICATE command to perform the key establishment protocol.\n\n## 3.2.3. pivLogIntoCardApplication\n\n**Purpose:** Set the security state within the PIV Card Application.\n\n**Prototype:**\n```c\nstatus_word pivLogIntoCardApplication(\nIN handle cardHandle,\nIN sequence of byte authenticators,\nIN LONG AuthLength\n);\n```\n\n**Parameters:**\n- `cardHandle` Opaque identifier of the card to be acted upon as returned by pivConnect\n- `authenticators` A sequence of zero or more BER-TLV-encoded authenticators to be used to authenticate and set the security state/status in the PIV Card Application context. The authenticator BER-TLV used on the PIV client API SHALL have the structure described in Table 3.\n- `AuthLength` Length of the authenticator template.\n\n### Table 3. Data objects in an authenticator template (Tag '67')",
  "## 3.2.3. pivLogIntoCardApplication\n\n**Purpose:** Set the security state within the PIV Card Application.\n\n**Prototype:**\n```c\nstatus_word pivLogIntoCardApplication(\nIN handle cardHandle,\nIN sequence of byte authenticators,\nIN LONG AuthLength\n);\n```\n\n**Parameters:**\n- `cardHandle` Opaque identifier of the card to be acted upon as returned by pivConnect\n- `authenticators` A sequence of zero or more BER-TLV-encoded authenticators to be used to authenticate and set the security state/status in the PIV Card Application context. The authenticator BER-TLV used on the PIV client API SHALL have the structure described in Table 3.\n- `AuthLength` Length of the authenticator template.\n\n### Table 3. Data objects in an authenticator template (Tag '67')\n\n| Description     | Tag | M/O | Comment                                                                                      |\n|------------------|-----|-----|----------------------------------------------------------------------------------------------|\n| Reference data   | '81'| M   | Value of the PIV Card Application PIN, Global PIN, or pairing code, as described in Sec. 2.4.3 of SP 800-73-5 Part2, or OCC data, as described in Sec. 5.5.2 of [SP800-76] |\n| Key reference     | '83'| M   | See Table 4 of SP 800-73-5 Part1 for PIV Card Application PIN, Global PIN, pairing code, and OCC key reference values |\n\n**Return Codes:**\n- PIV_OK\n- PIV_INVALID_CARD_HANDLE\n- PIV_AUTHENTICATOR_MALFORMED\n- PIV_AUTHENTICATION_FAILURE\n- PIV_SECURITY_CONDITIONS_NOT_SATISFIED\n- PIV_CARD_READER_ERROR\n- PIV_SM_FAILED\n\nThe PIV Middleware SHALL NOT submit authenticators to the PIV Card over a contactless interface without secure messaging. If secure messaging has not been established, then the pivLogIntoCardApplication function SHALL return PIV_SECURITY_CONDITIONS_NOT_SATISFIED.\n\n### 3.2.3.1. pivGetData\n\n**Purpose:** Return the entire data content of the named data object.\n``````markdown\n# CURRENT_PAGE_RAW_OCR_TEXT",
  "**Return Codes:**\n- PIV_OK\n- PIV_INVALID_CARD_HANDLE\n- PIV_AUTHENTICATOR_MALFORMED\n- PIV_AUTHENTICATION_FAILURE\n- PIV_SECURITY_CONDITIONS_NOT_SATISFIED\n- PIV_CARD_READER_ERROR\n- PIV_SM_FAILED\n\nThe PIV Middleware SHALL NOT submit authenticators to the PIV Card over a contactless interface without secure messaging. If secure messaging has not been established, then the pivLogIntoCardApplication function SHALL return PIV_SECURITY_CONDITIONS_NOT_SATISFIED.\n\n### 3.2.3.1. pivGetData\n\n**Purpose:** Return the entire data content of the named data object.\n``````markdown\n# CURRENT_PAGE_RAW_OCR_TEXT\n\n## Prototype:\n```plaintext\nstatus_word pivGetData(\nIN handle cardHandle,\nIN string OID,\nIN LONG oidLength,\nOUT sequence of byte data,\nINOUT LONG DataLength\n);\n```\n\n## Parameters:\n- **cardHandle**: Opaque identifier of the card to be acted upon as returned by pivConnect\n- **OID**: Object identifier of the object whose data content is to be retrieved coded as a string (e.g., \"2.16.840.1.101.3.7.2.96.80\"). See SP 800-73-5 Part1, Table 3.\n- **oidLength**: Length of the object identifier.\n- **data**: Retrieved data content.\n- **DataLength**: As an input, length of the buffer allocated for data. As an output, length of the data retrieved from the PIV Card.\n\n## Return Codes:\n- PIV_OK\n- PIV_INVALID_CARD_HANDLE\n- PIV_INVALID_OID\n- PIV_DATA_OBJECT_NOT_FOUND\n- PIV_SECURITY_CONDITIONS_NOT_SATISFIED\n- PIV_CARD_READER_ERROR\n- PIV_SM_FAILED\n- PIV_INSUFFICIENT_BUFFER\n\nIf the length of the retrieved data is longer than the buffer allocated by the client application, then the PIV Middleware SHALL return PIV_INSUFFICIENT_BUFFER but SHALL still set DataLength to the length of the retrieved data. If the PIV Card Application returns a zero-length data object, then the PIV Middleware SHALL return PIV_DATA_OBJECT_NOT_FOUND.",
  "## Return Codes:\n- PIV_OK\n- PIV_INVALID_CARD_HANDLE\n- PIV_INVALID_OID\n- PIV_DATA_OBJECT_NOT_FOUND\n- PIV_SECURITY_CONDITIONS_NOT_SATISFIED\n- PIV_CARD_READER_ERROR\n- PIV_SM_FAILED\n- PIV_INSUFFICIENT_BUFFER\n\nIf the length of the retrieved data is longer than the buffer allocated by the client application, then the PIV Middleware SHALL return PIV_INSUFFICIENT_BUFFER but SHALL still set DataLength to the length of the retrieved data. If the PIV Card Application returns a zero-length data object, then the PIV Middleware SHALL return PIV_DATA_OBJECT_NOT_FOUND.\n\n## 3.2.4. pivLogoutOfCardApplication\n### Purpose:\nReset the application security state/status of the PIV Card Application.\n\n### Prototype:\n```plaintext\nstatus_word pivLogoutOfCardApplication(\nIN handle cardHandle\n);\n```\n\n### Parameters:\n- **cardHandle**: Opaque identifier of the card to be acted upon as returned by pivConnect. The cardHandle remains valid after execution of this function.\n\n### Return Codes:\n- PIV_OK\n- PIV_INVALID_CARD_HANDLE\n- PIV_CARD_READER_ERROR\n\n## 3.3. Entry Points for Cryptographic Operations\n### 3.3.1. pivCrypt\n#### Purpose:\nPerform a cryptographic operation, such as encryption or signing on a sequence of bytes. SP 800-73-5 Part1, Appendix C describes recommended procedures for PIV algorithm identifier discovery.\n\n#### Prototype:\n```plaintext\nstatus_word pivCrypt(\nIN handle cardHandle,\nIN byte algorithmIdentifier,\nIN byte keyReference,\nIN sequence of byte algorithmInput,\nIN LONG inputLength,\nOUT sequence of byte algorithmOutput,\nINOUT LONG outputLength\n);\n```\n\n### Parameters:\n- **cardHandle**: Opaque identifier of the card to be acted upon as returned by pivConnect\n- **algorithmIdentifier**: Identifier of the cryptographic algorithm to be used for the cryptographic operation [SP800-78, Tables 9\n```# CURRENT_PAGE_RAW_OCR_TEXT\n\n## Key Reference\nIdentifier of the on-card key to be used for the cryptographic operation. See [SP800-78, Table 8] and SP 800-73-5 Part1, Table 5.",
  "#### Prototype:\n```plaintext\nstatus_word pivCrypt(\nIN handle cardHandle,\nIN byte algorithmIdentifier,\nIN byte keyReference,\nIN sequence of byte algorithmInput,\nIN LONG inputLength,\nOUT sequence of byte algorithmOutput,\nINOUT LONG outputLength\n);\n```\n\n### Parameters:\n- **cardHandle**: Opaque identifier of the card to be acted upon as returned by pivConnect\n- **algorithmIdentifier**: Identifier of the cryptographic algorithm to be used for the cryptographic operation [SP800-78, Tables 9\n```# CURRENT_PAGE_RAW_OCR_TEXT\n\n## Key Reference\nIdentifier of the on-card key to be used for the cryptographic operation. See [SP800-78, Table 8] and SP 800-73-5 Part1, Table 5.\n\n## Algorithm Input\nSequence of bytes used as the input to the cryptographic operation. The algorithmInput for RSA algorithms SHALL be restricted to the range 0 to n-1, where n is the RSA modulus.\n\n## Input Length\nLength of the algorithm input.\n\n## Algorithm Output\nSequence of bytes output by the cryptographic operation.\n\n## Output Length\nAs an input, length of the buffer allocated for algorithmOutput. As an output, length of the algorithm output.\n\n## Return Codes\n- PIV_OK\n- PIV_INVALID_CARD_HANDLE\n- PIV_INVALID_KEYREF_OR_ALGORITHM\n- PIV_SECURITY_CONDITIONS_NOT_SATISFIED\n- PIV_INPUT_BYTES_MALFORMED\n- PIV_CARD_READER_ERROR\n- PIV_SM_FAILED\n- PIV_INSUFFICIENT_BUFFER\n\nThe PIV_INPUT_BYTES_MALFORMED error condition indicates that some property of the data to be processed, such as the length or padding, was inappropriate for the requested cryptographic algorithm or key.\n\nIf the value of keyReference is '04' (PIV Secure Messaging key), then the PIV Middleware SHALL return PIV_INVALID_KEYREF_OR_ALGORITHM.\n\nIf the length of the algorithm output is longer than the buffer allocated by the client application, then the PIV Middleware SHALL return PIV_INSUFFICIENT_BUFFER but SHALL still set outputLength to the length of the algorithm output.",
  "## Return Codes\n- PIV_OK\n- PIV_INVALID_CARD_HANDLE\n- PIV_INVALID_KEYREF_OR_ALGORITHM\n- PIV_SECURITY_CONDITIONS_NOT_SATISFIED\n- PIV_INPUT_BYTES_MALFORMED\n- PIV_CARD_READER_ERROR\n- PIV_SM_FAILED\n- PIV_INSUFFICIENT_BUFFER\n\nThe PIV_INPUT_BYTES_MALFORMED error condition indicates that some property of the data to be processed, such as the length or padding, was inappropriate for the requested cryptographic algorithm or key.\n\nIf the value of keyReference is '04' (PIV Secure Messaging key), then the PIV Middleware SHALL return PIV_INVALID_KEYREF_OR_ALGORITHM.\n\nIf the length of the algorithm output is longer than the buffer allocated by the client application, then the PIV Middleware SHALL return PIV_INSUFFICIENT_BUFFER but SHALL still set outputLength to the length of the algorithm output.\n\n## 3.4. Entry Points for Credential Initialization and Administration\nThe PIV Middleware SHALL NOT submit data provided to the pivPutData or pivGenerateKeyPair function over the contactless interface. If the PIV Middleware is not communicating with the PIV Card via the card's contact interface, then the pivPutData or pivGenerateKeyPair function SHALL return PIV_FUNCTION_NOT_SUPPORTED.\n\n### 3.4.1. pivPutData\n**Purpose:** Replace the entire data content of the named data object with the provided data.\n\n**Prototype:**\n```plaintext\nstatus_word pivPutData(\nIN handle cardHandle,\nIN string OID,\nIN LONG oidLength,\nIN sequence of byte data,\nIN LONG dataLength\n);\n```",
  "If the length of the algorithm output is longer than the buffer allocated by the client application, then the PIV Middleware SHALL return PIV_INSUFFICIENT_BUFFER but SHALL still set outputLength to the length of the algorithm output.\n\n## 3.4. Entry Points for Credential Initialization and Administration\nThe PIV Middleware SHALL NOT submit data provided to the pivPutData or pivGenerateKeyPair function over the contactless interface. If the PIV Middleware is not communicating with the PIV Card via the card's contact interface, then the pivPutData or pivGenerateKeyPair function SHALL return PIV_FUNCTION_NOT_SUPPORTED.\n\n### 3.4.1. pivPutData\n**Purpose:** Replace the entire data content of the named data object with the provided data.\n\n**Prototype:**\n```plaintext\nstatus_word pivPutData(\nIN handle cardHandle,\nIN string OID,\nIN LONG oidLength,\nIN sequence of byte data,\nIN LONG dataLength\n);\n```\n\n**Parameters:**\n- **cardHandle**: Opaque identifier of the card to be acted upon as returned by pivConnect.\n- **OID**: Object identifier of the object whose data content is to be replaced coded as a string (e.g., \"2.16.840.1.101.3.7.2.96.80\"). See SP 800-73-5 Part1, Table 3.\n- **oidLength**: Length of the object identifier.\n- **data**: Data to be used to replace in its entirety the data content of the named data object.\n- **dataLength**: Length of the provided data.```markdown\n# Return Codes\n- PIV_OK\n- PIV_INVALID_CARD_HANDLE\n- PIV_INVALID_OID\n- PIV_CARD_READER_ERROR\n- PIV_INSUFFICIENT_CARD_RESOURCE\n- PIV_SECURITY_CONDITIONS_NOT_SATISFIED\n- PIV_FUNCTION_NOT_SUPPORTED\n\n## 3.4.2. pivGenerateKeyPair\n\n### Purpose\nGenerates an asymmetric key pair in the currently selected card application. If the provided key reference exists and the cryptographic mechanism associated with the reference data identified by this key reference is the same as the provided cryptographic mechanism, then the generated key pair replaces in entirety the key pair currently associated with the key reference.",
  "## 3.4.2. pivGenerateKeyPair\n\n### Purpose\nGenerates an asymmetric key pair in the currently selected card application. If the provided key reference exists and the cryptographic mechanism associated with the reference data identified by this key reference is the same as the provided cryptographic mechanism, then the generated key pair replaces in entirety the key pair currently associated with the key reference.\n\n### Prototype\n```c\nstatus_word pivGenerateKeyPair(\nIN handle cardHandle,\nIN byte keyReference,\nIN byte cryptographicMechanism,\nOUT sequence of byte publicKey,\nINOUT LONG KeyLength\n);\n```\n\n### Parameters\n- **cardHandle**: Opaque identifier of the card to be acted upon as returned by `pivConnect`\n- **keyReference**: The key reference of the generated key pair\n- **cryptographicMechanism**: The type of key pair to be generated. See SP 800-73-5 Part1, Table 7.\n- **publicKey**: BER-TLV data objects defining the public key of the generated key pair. See SP 800-73-5 Part2, Table 11.\n- **KeyLength**: As an input, the length of the buffer allocated for publicKey; as an output, length of the public key-related data retrieved from the PIV Card\n\n### Return Codes\n- PIV_OK\n- PIV_INVALID_CARD_HANDLE\n- PIV_SECURITY_CONDITIONS_NOT_SATISFIED\n- PIV_FUNCTION_NOT_SUPPORTED\n- PIV_INVALID_KEY_OR_KEYALG_COMBINATION\n- PIV_UNSUPPORTED_CRYPTOGRAPHIC_MECHANISM\n- PIV_CARD_READER_ERROR\n- PIV_INSUFFICIENT_BUFFER\n\nIf the length of public key-related data retrieved from the PIV Card is longer than the buffer allocated by the client application, then the PIV Middleware SHALL return PIV_INSUFFICIENT_BUFFER but SHALL still set KeyLength to the length of the public key-related data retrieved from the PIV Card.\n```"
]